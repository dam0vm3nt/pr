// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package sv

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/vballestra/sv/sv/gh_utils"
)

// The possible states for a check suite or run conclusion.
type CheckConclusionState string

const (
	// The check suite or run requires action.
	CheckConclusionStateActionRequired CheckConclusionState = "ACTION_REQUIRED"
	// The check suite or run has been cancelled.
	CheckConclusionStateCancelled CheckConclusionState = "CANCELLED"
	// The check suite or run has failed.
	CheckConclusionStateFailure CheckConclusionState = "FAILURE"
	// The check suite or run was neutral.
	CheckConclusionStateNeutral CheckConclusionState = "NEUTRAL"
	// The check suite or run was skipped.
	CheckConclusionStateSkipped CheckConclusionState = "SKIPPED"
	// The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
	CheckConclusionStateStale CheckConclusionState = "STALE"
	// The check suite or run has failed at startup.
	CheckConclusionStateStartupFailure CheckConclusionState = "STARTUP_FAILURE"
	// The check suite or run has succeeded.
	CheckConclusionStateSuccess CheckConclusionState = "SUCCESS"
	// The check suite or run has timed out.
	CheckConclusionStateTimedOut CheckConclusionState = "TIMED_OUT"
)

// CheckRunCase includes the GraphQL fields of CheckRun requested by the fragment CheckRunCase.
// The GraphQL type's documentation follows.
//
// A check run.
type CheckRunCase struct {
	// The name of the check for this check run.
	Name string `json:"name"`
	// The current status of the check run.
	Status CheckStatusState `json:"status"`
	// The conclusion of the check run.
	Conclusion *CheckConclusionState `json:"conclusion"`
	// Identifies the date and time when the check run was started.
	StartedAt *time.Time `json:"startedAt"`
	// Identifies the date and time when the check run was completed.
	CompletedAt *time.Time `json:"completedAt"`
	// The URL from which to find full details of the check run on the integrator's site.
	DetailsUrl *string `json:"detailsUrl"`
}

// GetName returns CheckRunCase.Name, and is useful for accessing the field via an interface.
func (v *CheckRunCase) GetName() string { return v.Name }

// GetStatus returns CheckRunCase.Status, and is useful for accessing the field via an interface.
func (v *CheckRunCase) GetStatus() CheckStatusState { return v.Status }

// GetConclusion returns CheckRunCase.Conclusion, and is useful for accessing the field via an interface.
func (v *CheckRunCase) GetConclusion() *CheckConclusionState { return v.Conclusion }

// GetStartedAt returns CheckRunCase.StartedAt, and is useful for accessing the field via an interface.
func (v *CheckRunCase) GetStartedAt() *time.Time { return v.StartedAt }

// GetCompletedAt returns CheckRunCase.CompletedAt, and is useful for accessing the field via an interface.
func (v *CheckRunCase) GetCompletedAt() *time.Time { return v.CompletedAt }

// GetDetailsUrl returns CheckRunCase.DetailsUrl, and is useful for accessing the field via an interface.
func (v *CheckRunCase) GetDetailsUrl() *string { return v.DetailsUrl }

// The possible states of a check run in a status rollup.
type CheckRunState string

const (
	// The check run requires action.
	CheckRunStateActionRequired CheckRunState = "ACTION_REQUIRED"
	// The check run has been cancelled.
	CheckRunStateCancelled CheckRunState = "CANCELLED"
	// The check run has been completed.
	CheckRunStateCompleted CheckRunState = "COMPLETED"
	// The check run has failed.
	CheckRunStateFailure CheckRunState = "FAILURE"
	// The check run is in progress.
	CheckRunStateInProgress CheckRunState = "IN_PROGRESS"
	// The check run was neutral.
	CheckRunStateNeutral CheckRunState = "NEUTRAL"
	// The check run is in pending state.
	CheckRunStatePending CheckRunState = "PENDING"
	// The check run has been queued.
	CheckRunStateQueued CheckRunState = "QUEUED"
	// The check run was skipped.
	CheckRunStateSkipped CheckRunState = "SKIPPED"
	// The check run was marked stale by GitHub. Only GitHub can use this conclusion.
	CheckRunStateStale CheckRunState = "STALE"
	// The check run has failed at startup.
	CheckRunStateStartupFailure CheckRunState = "STARTUP_FAILURE"
	// The check run has succeeded.
	CheckRunStateSuccess CheckRunState = "SUCCESS"
	// The check run has timed out.
	CheckRunStateTimedOut CheckRunState = "TIMED_OUT"
	// The check run is in waiting state.
	CheckRunStateWaiting CheckRunState = "WAITING"
)

// The possible states for a check suite or run status.
type CheckStatusState string

const (
	// The check suite or run has been completed.
	CheckStatusStateCompleted CheckStatusState = "COMPLETED"
	// The check suite or run is in progress.
	CheckStatusStateInProgress CheckStatusState = "IN_PROGRESS"
	// The check suite or run is in pending state.
	CheckStatusStatePending CheckStatusState = "PENDING"
	// The check suite or run has been queued.
	CheckStatusStateQueued CheckStatusState = "QUEUED"
	// The check suite or run has been requested.
	CheckStatusStateRequested CheckStatusState = "REQUESTED"
	// The check suite or run is in waiting state.
	CheckStatusStateWaiting CheckStatusState = "WAITING"
)

// CommentInfo includes the GraphQL fields of Comment requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
//
// CommentInfo is implemented by the following types:
// CommentInfoCommitComment
// CommentInfoDiscussion
// CommentInfoDiscussionComment
// CommentInfoGistComment
// CommentInfoIssue
// CommentInfoIssueComment
// CommentInfoPullRequest
// CommentInfoPullRequestReview
// CommentInfoPullRequestReviewComment
// CommentInfoTeamDiscussion
// CommentInfoTeamDiscussionComment
type CommentInfo interface {
	implementsGraphQLInterfaceCommentInfo()
	CommonCommentInfo
}

func (v *CommentInfoCommitComment) implementsGraphQLInterfaceCommentInfo()            {}
func (v *CommentInfoDiscussion) implementsGraphQLInterfaceCommentInfo()               {}
func (v *CommentInfoDiscussionComment) implementsGraphQLInterfaceCommentInfo()        {}
func (v *CommentInfoGistComment) implementsGraphQLInterfaceCommentInfo()              {}
func (v *CommentInfoIssue) implementsGraphQLInterfaceCommentInfo()                    {}
func (v *CommentInfoIssueComment) implementsGraphQLInterfaceCommentInfo()             {}
func (v *CommentInfoPullRequest) implementsGraphQLInterfaceCommentInfo()              {}
func (v *CommentInfoPullRequestReview) implementsGraphQLInterfaceCommentInfo()        {}
func (v *CommentInfoPullRequestReviewComment) implementsGraphQLInterfaceCommentInfo() {}
func (v *CommentInfoTeamDiscussion) implementsGraphQLInterfaceCommentInfo()           {}
func (v *CommentInfoTeamDiscussionComment) implementsGraphQLInterfaceCommentInfo()    {}

func __unmarshalCommentInfo(b []byte, v *CommentInfo) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CommitComment":
		*v = new(CommentInfoCommitComment)
		return json.Unmarshal(b, *v)
	case "Discussion":
		*v = new(CommentInfoDiscussion)
		return json.Unmarshal(b, *v)
	case "DiscussionComment":
		*v = new(CommentInfoDiscussionComment)
		return json.Unmarshal(b, *v)
	case "GistComment":
		*v = new(CommentInfoGistComment)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(CommentInfoIssue)
		return json.Unmarshal(b, *v)
	case "IssueComment":
		*v = new(CommentInfoIssueComment)
		return json.Unmarshal(b, *v)
	case "PullRequest":
		*v = new(CommentInfoPullRequest)
		return json.Unmarshal(b, *v)
	case "PullRequestReview":
		*v = new(CommentInfoPullRequestReview)
		return json.Unmarshal(b, *v)
	case "PullRequestReviewComment":
		*v = new(CommentInfoPullRequestReviewComment)
		return json.Unmarshal(b, *v)
	case "TeamDiscussion":
		*v = new(CommentInfoTeamDiscussion)
		return json.Unmarshal(b, *v)
	case "TeamDiscussionComment":
		*v = new(CommentInfoTeamDiscussionComment)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Comment.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CommentInfo: "%v"`, tn.TypeName)
	}
}

func __marshalCommentInfo(v *CommentInfo) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CommentInfoCommitComment:
		typename = "CommitComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoCommitComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommentInfoDiscussion:
		typename = "Discussion"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoDiscussion
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommentInfoDiscussionComment:
		typename = "DiscussionComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoDiscussionComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommentInfoGistComment:
		typename = "GistComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoGistComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommentInfoIssue:
		typename = "Issue"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoIssue
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommentInfoIssueComment:
		typename = "IssueComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoIssueComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommentInfoPullRequest:
		typename = "PullRequest"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoPullRequest
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommentInfoPullRequestReview:
		typename = "PullRequestReview"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoPullRequestReview
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommentInfoPullRequestReviewComment:
		typename = "PullRequestReviewComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoPullRequestReviewComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommentInfoTeamDiscussion:
		typename = "TeamDiscussion"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoTeamDiscussion
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommentInfoTeamDiscussionComment:
		typename = "TeamDiscussionComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommentInfoTeamDiscussionComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CommentInfo: "%T"`, v)
	}
}

// CommentInfo includes the GraphQL fields of CommitComment requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoCommitComment struct {
	CommonCommentInfoCommitComment `json:"-"`
	ReactionsInfoCommitComment     `json:"-"`
}

// GetId returns CommentInfoCommitComment.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoCommitComment) GetId() string { return v.CommonCommentInfoCommitComment.Id }

// GetAuthor returns CommentInfoCommitComment.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoCommitComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoCommitComment.Author
}

// GetRaw returns CommentInfoCommitComment.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoCommitComment) GetRaw() string { return v.CommonCommentInfoCommitComment.Raw }

// GetBodyText returns CommentInfoCommitComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoCommitComment) GetBodyText() string {
	return v.CommonCommentInfoCommitComment.BodyText
}

// GetBodyHTML returns CommentInfoCommitComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoCommitComment) GetBodyHTML() string {
	return v.CommonCommentInfoCommitComment.BodyHTML
}

// GetCreatedAt returns CommentInfoCommitComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoCommitComment) GetCreatedAt() time.Time {
	return v.CommonCommentInfoCommitComment.CreatedAt
}

// GetReactions returns CommentInfoCommitComment.Reactions, and is useful for accessing the field via an interface.
func (v *CommentInfoCommitComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.ReactionsInfoCommitComment.Reactions
}

func (v *CommentInfoCommitComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoCommitComment
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoCommitComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoCommitComment)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ReactionsInfoCommitComment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoCommitComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *CommentInfoCommitComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoCommitComment) __premarshalJSON() (*__premarshalCommentInfoCommitComment, error) {
	var retval __premarshalCommentInfoCommitComment

	retval.Id = v.CommonCommentInfoCommitComment.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoCommitComment.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoCommitComment.CommonCommentInfoCommitComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoCommitComment.Raw
	retval.BodyText = v.CommonCommentInfoCommitComment.BodyText
	retval.BodyHTML = v.CommonCommentInfoCommitComment.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoCommitComment.CreatedAt
	retval.Reactions = v.ReactionsInfoCommitComment.Reactions
	return &retval, nil
}

// CommentInfo includes the GraphQL fields of Discussion requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoDiscussion struct {
	CommonCommentInfoDiscussion `json:"-"`
	ReactionsInfoDiscussion     `json:"-"`
}

// GetId returns CommentInfoDiscussion.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussion) GetId() string { return v.CommonCommentInfoDiscussion.Id }

// GetAuthor returns CommentInfoDiscussion.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussion) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoDiscussion.Author
}

// GetRaw returns CommentInfoDiscussion.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussion) GetRaw() string { return v.CommonCommentInfoDiscussion.Raw }

// GetBodyText returns CommentInfoDiscussion.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussion) GetBodyText() string { return v.CommonCommentInfoDiscussion.BodyText }

// GetBodyHTML returns CommentInfoDiscussion.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussion) GetBodyHTML() string { return v.CommonCommentInfoDiscussion.BodyHTML }

// GetCreatedAt returns CommentInfoDiscussion.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussion) GetCreatedAt() time.Time {
	return v.CommonCommentInfoDiscussion.CreatedAt
}

// GetReactions returns CommentInfoDiscussion.Reactions, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussion) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.ReactionsInfoDiscussion.Reactions
}

func (v *CommentInfoDiscussion) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoDiscussion
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoDiscussion = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoDiscussion)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ReactionsInfoDiscussion)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoDiscussion struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *CommentInfoDiscussion) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoDiscussion) __premarshalJSON() (*__premarshalCommentInfoDiscussion, error) {
	var retval __premarshalCommentInfoDiscussion

	retval.Id = v.CommonCommentInfoDiscussion.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoDiscussion.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoDiscussion.CommonCommentInfoDiscussion.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoDiscussion.Raw
	retval.BodyText = v.CommonCommentInfoDiscussion.BodyText
	retval.BodyHTML = v.CommonCommentInfoDiscussion.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoDiscussion.CreatedAt
	retval.Reactions = v.ReactionsInfoDiscussion.Reactions
	return &retval, nil
}

// CommentInfo includes the GraphQL fields of DiscussionComment requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoDiscussionComment struct {
	CommonCommentInfoDiscussionComment `json:"-"`
	ReactionsInfoDiscussionComment     `json:"-"`
}

// GetId returns CommentInfoDiscussionComment.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussionComment) GetId() string { return v.CommonCommentInfoDiscussionComment.Id }

// GetAuthor returns CommentInfoDiscussionComment.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussionComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoDiscussionComment.Author
}

// GetRaw returns CommentInfoDiscussionComment.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussionComment) GetRaw() string {
	return v.CommonCommentInfoDiscussionComment.Raw
}

// GetBodyText returns CommentInfoDiscussionComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussionComment) GetBodyText() string {
	return v.CommonCommentInfoDiscussionComment.BodyText
}

// GetBodyHTML returns CommentInfoDiscussionComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussionComment) GetBodyHTML() string {
	return v.CommonCommentInfoDiscussionComment.BodyHTML
}

// GetCreatedAt returns CommentInfoDiscussionComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussionComment) GetCreatedAt() time.Time {
	return v.CommonCommentInfoDiscussionComment.CreatedAt
}

// GetReactions returns CommentInfoDiscussionComment.Reactions, and is useful for accessing the field via an interface.
func (v *CommentInfoDiscussionComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.ReactionsInfoDiscussionComment.Reactions
}

func (v *CommentInfoDiscussionComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoDiscussionComment
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoDiscussionComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoDiscussionComment)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ReactionsInfoDiscussionComment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoDiscussionComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *CommentInfoDiscussionComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoDiscussionComment) __premarshalJSON() (*__premarshalCommentInfoDiscussionComment, error) {
	var retval __premarshalCommentInfoDiscussionComment

	retval.Id = v.CommonCommentInfoDiscussionComment.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoDiscussionComment.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoDiscussionComment.CommonCommentInfoDiscussionComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoDiscussionComment.Raw
	retval.BodyText = v.CommonCommentInfoDiscussionComment.BodyText
	retval.BodyHTML = v.CommonCommentInfoDiscussionComment.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoDiscussionComment.CreatedAt
	retval.Reactions = v.ReactionsInfoDiscussionComment.Reactions
	return &retval, nil
}

// CommentInfo includes the GraphQL fields of GistComment requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoGistComment struct {
	CommonCommentInfoGistComment `json:"-"`
}

// GetId returns CommentInfoGistComment.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoGistComment) GetId() string { return v.CommonCommentInfoGistComment.Id }

// GetAuthor returns CommentInfoGistComment.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoGistComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoGistComment.Author
}

// GetRaw returns CommentInfoGistComment.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoGistComment) GetRaw() string { return v.CommonCommentInfoGistComment.Raw }

// GetBodyText returns CommentInfoGistComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoGistComment) GetBodyText() string { return v.CommonCommentInfoGistComment.BodyText }

// GetBodyHTML returns CommentInfoGistComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoGistComment) GetBodyHTML() string { return v.CommonCommentInfoGistComment.BodyHTML }

// GetCreatedAt returns CommentInfoGistComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoGistComment) GetCreatedAt() time.Time {
	return v.CommonCommentInfoGistComment.CreatedAt
}

func (v *CommentInfoGistComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoGistComment
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoGistComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoGistComment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoGistComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommentInfoGistComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoGistComment) __premarshalJSON() (*__premarshalCommentInfoGistComment, error) {
	var retval __premarshalCommentInfoGistComment

	retval.Id = v.CommonCommentInfoGistComment.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoGistComment.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoGistComment.CommonCommentInfoGistComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoGistComment.Raw
	retval.BodyText = v.CommonCommentInfoGistComment.BodyText
	retval.BodyHTML = v.CommonCommentInfoGistComment.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoGistComment.CreatedAt
	return &retval, nil
}

// CommentInfo includes the GraphQL fields of Issue requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoIssue struct {
	CommonCommentInfoIssue `json:"-"`
	ReactionsInfoIssue     `json:"-"`
}

// GetId returns CommentInfoIssue.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoIssue) GetId() string { return v.CommonCommentInfoIssue.Id }

// GetAuthor returns CommentInfoIssue.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoIssue) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoIssue.Author
}

// GetRaw returns CommentInfoIssue.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoIssue) GetRaw() string { return v.CommonCommentInfoIssue.Raw }

// GetBodyText returns CommentInfoIssue.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoIssue) GetBodyText() string { return v.CommonCommentInfoIssue.BodyText }

// GetBodyHTML returns CommentInfoIssue.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoIssue) GetBodyHTML() string { return v.CommonCommentInfoIssue.BodyHTML }

// GetCreatedAt returns CommentInfoIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoIssue) GetCreatedAt() time.Time { return v.CommonCommentInfoIssue.CreatedAt }

// GetReactions returns CommentInfoIssue.Reactions, and is useful for accessing the field via an interface.
func (v *CommentInfoIssue) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.ReactionsInfoIssue.Reactions
}

func (v *CommentInfoIssue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoIssue
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoIssue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoIssue)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ReactionsInfoIssue)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoIssue struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *CommentInfoIssue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoIssue) __premarshalJSON() (*__premarshalCommentInfoIssue, error) {
	var retval __premarshalCommentInfoIssue

	retval.Id = v.CommonCommentInfoIssue.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoIssue.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoIssue.CommonCommentInfoIssue.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoIssue.Raw
	retval.BodyText = v.CommonCommentInfoIssue.BodyText
	retval.BodyHTML = v.CommonCommentInfoIssue.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoIssue.CreatedAt
	retval.Reactions = v.ReactionsInfoIssue.Reactions
	return &retval, nil
}

// CommentInfo includes the GraphQL fields of IssueComment requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoIssueComment struct {
	CommonCommentInfoIssueComment `json:"-"`
	ReactionsInfoIssueComment     `json:"-"`
}

// GetId returns CommentInfoIssueComment.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoIssueComment) GetId() string { return v.CommonCommentInfoIssueComment.Id }

// GetAuthor returns CommentInfoIssueComment.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoIssueComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoIssueComment.Author
}

// GetRaw returns CommentInfoIssueComment.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoIssueComment) GetRaw() string { return v.CommonCommentInfoIssueComment.Raw }

// GetBodyText returns CommentInfoIssueComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoIssueComment) GetBodyText() string {
	return v.CommonCommentInfoIssueComment.BodyText
}

// GetBodyHTML returns CommentInfoIssueComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoIssueComment) GetBodyHTML() string {
	return v.CommonCommentInfoIssueComment.BodyHTML
}

// GetCreatedAt returns CommentInfoIssueComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoIssueComment) GetCreatedAt() time.Time {
	return v.CommonCommentInfoIssueComment.CreatedAt
}

// GetReactions returns CommentInfoIssueComment.Reactions, and is useful for accessing the field via an interface.
func (v *CommentInfoIssueComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.ReactionsInfoIssueComment.Reactions
}

func (v *CommentInfoIssueComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoIssueComment
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoIssueComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoIssueComment)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ReactionsInfoIssueComment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoIssueComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *CommentInfoIssueComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoIssueComment) __premarshalJSON() (*__premarshalCommentInfoIssueComment, error) {
	var retval __premarshalCommentInfoIssueComment

	retval.Id = v.CommonCommentInfoIssueComment.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoIssueComment.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoIssueComment.CommonCommentInfoIssueComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoIssueComment.Raw
	retval.BodyText = v.CommonCommentInfoIssueComment.BodyText
	retval.BodyHTML = v.CommonCommentInfoIssueComment.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoIssueComment.CreatedAt
	retval.Reactions = v.ReactionsInfoIssueComment.Reactions
	return &retval, nil
}

// CommentInfo includes the GraphQL fields of PullRequest requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoPullRequest struct {
	CommonCommentInfoPullRequest `json:"-"`
	ReactionsInfoPullRequest     `json:"-"`
}

// GetId returns CommentInfoPullRequest.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequest) GetId() string { return v.CommonCommentInfoPullRequest.Id }

// GetAuthor returns CommentInfoPullRequest.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequest) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoPullRequest.Author
}

// GetRaw returns CommentInfoPullRequest.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequest) GetRaw() string { return v.CommonCommentInfoPullRequest.Raw }

// GetBodyText returns CommentInfoPullRequest.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequest) GetBodyText() string { return v.CommonCommentInfoPullRequest.BodyText }

// GetBodyHTML returns CommentInfoPullRequest.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequest) GetBodyHTML() string { return v.CommonCommentInfoPullRequest.BodyHTML }

// GetCreatedAt returns CommentInfoPullRequest.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequest) GetCreatedAt() time.Time {
	return v.CommonCommentInfoPullRequest.CreatedAt
}

// GetReactions returns CommentInfoPullRequest.Reactions, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequest) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.ReactionsInfoPullRequest.Reactions
}

func (v *CommentInfoPullRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoPullRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoPullRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoPullRequest)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ReactionsInfoPullRequest)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoPullRequest struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *CommentInfoPullRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoPullRequest) __premarshalJSON() (*__premarshalCommentInfoPullRequest, error) {
	var retval __premarshalCommentInfoPullRequest

	retval.Id = v.CommonCommentInfoPullRequest.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoPullRequest.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoPullRequest.CommonCommentInfoPullRequest.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoPullRequest.Raw
	retval.BodyText = v.CommonCommentInfoPullRequest.BodyText
	retval.BodyHTML = v.CommonCommentInfoPullRequest.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoPullRequest.CreatedAt
	retval.Reactions = v.ReactionsInfoPullRequest.Reactions
	return &retval, nil
}

// CommentInfo includes the GraphQL fields of PullRequestReview requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoPullRequestReview struct {
	CommonCommentInfoPullRequestReview `json:"-"`
	ReactionsInfoPullRequestReview     `json:"-"`
}

// GetId returns CommentInfoPullRequestReview.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReview) GetId() string { return v.CommonCommentInfoPullRequestReview.Id }

// GetAuthor returns CommentInfoPullRequestReview.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReview) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoPullRequestReview.Author
}

// GetRaw returns CommentInfoPullRequestReview.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReview) GetRaw() string {
	return v.CommonCommentInfoPullRequestReview.Raw
}

// GetBodyText returns CommentInfoPullRequestReview.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReview) GetBodyText() string {
	return v.CommonCommentInfoPullRequestReview.BodyText
}

// GetBodyHTML returns CommentInfoPullRequestReview.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReview) GetBodyHTML() string {
	return v.CommonCommentInfoPullRequestReview.BodyHTML
}

// GetCreatedAt returns CommentInfoPullRequestReview.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReview) GetCreatedAt() time.Time {
	return v.CommonCommentInfoPullRequestReview.CreatedAt
}

// GetReactions returns CommentInfoPullRequestReview.Reactions, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReview) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.ReactionsInfoPullRequestReview.Reactions
}

func (v *CommentInfoPullRequestReview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoPullRequestReview
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoPullRequestReview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoPullRequestReview)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ReactionsInfoPullRequestReview)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoPullRequestReview struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *CommentInfoPullRequestReview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoPullRequestReview) __premarshalJSON() (*__premarshalCommentInfoPullRequestReview, error) {
	var retval __premarshalCommentInfoPullRequestReview

	retval.Id = v.CommonCommentInfoPullRequestReview.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoPullRequestReview.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoPullRequestReview.CommonCommentInfoPullRequestReview.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoPullRequestReview.Raw
	retval.BodyText = v.CommonCommentInfoPullRequestReview.BodyText
	retval.BodyHTML = v.CommonCommentInfoPullRequestReview.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoPullRequestReview.CreatedAt
	retval.Reactions = v.ReactionsInfoPullRequestReview.Reactions
	return &retval, nil
}

// CommentInfo includes the GraphQL fields of PullRequestReviewComment requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoPullRequestReviewComment struct {
	CommonCommentInfoPullRequestReviewComment `json:"-"`
	ReactionsInfoPullRequestReviewComment     `json:"-"`
}

// GetId returns CommentInfoPullRequestReviewComment.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReviewComment) GetId() string {
	return v.CommonCommentInfoPullRequestReviewComment.Id
}

// GetAuthor returns CommentInfoPullRequestReviewComment.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReviewComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoPullRequestReviewComment.Author
}

// GetRaw returns CommentInfoPullRequestReviewComment.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReviewComment) GetRaw() string {
	return v.CommonCommentInfoPullRequestReviewComment.Raw
}

// GetBodyText returns CommentInfoPullRequestReviewComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReviewComment) GetBodyText() string {
	return v.CommonCommentInfoPullRequestReviewComment.BodyText
}

// GetBodyHTML returns CommentInfoPullRequestReviewComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReviewComment) GetBodyHTML() string {
	return v.CommonCommentInfoPullRequestReviewComment.BodyHTML
}

// GetCreatedAt returns CommentInfoPullRequestReviewComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReviewComment) GetCreatedAt() time.Time {
	return v.CommonCommentInfoPullRequestReviewComment.CreatedAt
}

// GetReactions returns CommentInfoPullRequestReviewComment.Reactions, and is useful for accessing the field via an interface.
func (v *CommentInfoPullRequestReviewComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.ReactionsInfoPullRequestReviewComment.Reactions
}

func (v *CommentInfoPullRequestReviewComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoPullRequestReviewComment
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoPullRequestReviewComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoPullRequestReviewComment)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ReactionsInfoPullRequestReviewComment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoPullRequestReviewComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *CommentInfoPullRequestReviewComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoPullRequestReviewComment) __premarshalJSON() (*__premarshalCommentInfoPullRequestReviewComment, error) {
	var retval __premarshalCommentInfoPullRequestReviewComment

	retval.Id = v.CommonCommentInfoPullRequestReviewComment.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoPullRequestReviewComment.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoPullRequestReviewComment.Raw
	retval.BodyText = v.CommonCommentInfoPullRequestReviewComment.BodyText
	retval.BodyHTML = v.CommonCommentInfoPullRequestReviewComment.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoPullRequestReviewComment.CreatedAt
	retval.Reactions = v.ReactionsInfoPullRequestReviewComment.Reactions
	return &retval, nil
}

// CommentInfo includes the GraphQL fields of TeamDiscussion requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoTeamDiscussion struct {
	CommonCommentInfoTeamDiscussion `json:"-"`
	ReactionsInfoTeamDiscussion     `json:"-"`
}

// GetId returns CommentInfoTeamDiscussion.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussion) GetId() string { return v.CommonCommentInfoTeamDiscussion.Id }

// GetAuthor returns CommentInfoTeamDiscussion.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussion) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoTeamDiscussion.Author
}

// GetRaw returns CommentInfoTeamDiscussion.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussion) GetRaw() string { return v.CommonCommentInfoTeamDiscussion.Raw }

// GetBodyText returns CommentInfoTeamDiscussion.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussion) GetBodyText() string {
	return v.CommonCommentInfoTeamDiscussion.BodyText
}

// GetBodyHTML returns CommentInfoTeamDiscussion.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussion) GetBodyHTML() string {
	return v.CommonCommentInfoTeamDiscussion.BodyHTML
}

// GetCreatedAt returns CommentInfoTeamDiscussion.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussion) GetCreatedAt() time.Time {
	return v.CommonCommentInfoTeamDiscussion.CreatedAt
}

// GetReactions returns CommentInfoTeamDiscussion.Reactions, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussion) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.ReactionsInfoTeamDiscussion.Reactions
}

func (v *CommentInfoTeamDiscussion) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoTeamDiscussion
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoTeamDiscussion = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoTeamDiscussion)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ReactionsInfoTeamDiscussion)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoTeamDiscussion struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *CommentInfoTeamDiscussion) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoTeamDiscussion) __premarshalJSON() (*__premarshalCommentInfoTeamDiscussion, error) {
	var retval __premarshalCommentInfoTeamDiscussion

	retval.Id = v.CommonCommentInfoTeamDiscussion.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoTeamDiscussion.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoTeamDiscussion.CommonCommentInfoTeamDiscussion.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoTeamDiscussion.Raw
	retval.BodyText = v.CommonCommentInfoTeamDiscussion.BodyText
	retval.BodyHTML = v.CommonCommentInfoTeamDiscussion.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoTeamDiscussion.CreatedAt
	retval.Reactions = v.ReactionsInfoTeamDiscussion.Reactions
	return &retval, nil
}

// CommentInfo includes the GraphQL fields of TeamDiscussionComment requested by the fragment CommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommentInfoTeamDiscussionComment struct {
	CommonCommentInfoTeamDiscussionComment `json:"-"`
	ReactionsInfoTeamDiscussionComment     `json:"-"`
}

// GetId returns CommentInfoTeamDiscussionComment.Id, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussionComment) GetId() string {
	return v.CommonCommentInfoTeamDiscussionComment.Id
}

// GetAuthor returns CommentInfoTeamDiscussionComment.Author, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussionComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoTeamDiscussionComment.Author
}

// GetRaw returns CommentInfoTeamDiscussionComment.Raw, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussionComment) GetRaw() string {
	return v.CommonCommentInfoTeamDiscussionComment.Raw
}

// GetBodyText returns CommentInfoTeamDiscussionComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussionComment) GetBodyText() string {
	return v.CommonCommentInfoTeamDiscussionComment.BodyText
}

// GetBodyHTML returns CommentInfoTeamDiscussionComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussionComment) GetBodyHTML() string {
	return v.CommonCommentInfoTeamDiscussionComment.BodyHTML
}

// GetCreatedAt returns CommentInfoTeamDiscussionComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussionComment) GetCreatedAt() time.Time {
	return v.CommonCommentInfoTeamDiscussionComment.CreatedAt
}

// GetReactions returns CommentInfoTeamDiscussionComment.Reactions, and is useful for accessing the field via an interface.
func (v *CommentInfoTeamDiscussionComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.ReactionsInfoTeamDiscussionComment.Reactions
}

func (v *CommentInfoTeamDiscussionComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommentInfoTeamDiscussionComment
		graphql.NoUnmarshalJSON
	}
	firstPass.CommentInfoTeamDiscussionComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoTeamDiscussionComment)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ReactionsInfoTeamDiscussionComment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommentInfoTeamDiscussionComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *CommentInfoTeamDiscussionComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommentInfoTeamDiscussionComment) __premarshalJSON() (*__premarshalCommentInfoTeamDiscussionComment, error) {
	var retval __premarshalCommentInfoTeamDiscussionComment

	retval.Id = v.CommonCommentInfoTeamDiscussionComment.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoTeamDiscussionComment.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommentInfoTeamDiscussionComment.CommonCommentInfoTeamDiscussionComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoTeamDiscussionComment.Raw
	retval.BodyText = v.CommonCommentInfoTeamDiscussionComment.BodyText
	retval.BodyHTML = v.CommonCommentInfoTeamDiscussionComment.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoTeamDiscussionComment.CreatedAt
	retval.Reactions = v.ReactionsInfoTeamDiscussionComment.Reactions
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of Comment requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
//
// CommonCommentInfo is implemented by the following types:
// CommonCommentInfoCommitComment
// CommonCommentInfoDiscussion
// CommonCommentInfoDiscussionComment
// CommonCommentInfoGistComment
// CommonCommentInfoIssue
// CommonCommentInfoIssueComment
// CommonCommentInfoPullRequest
// CommonCommentInfoPullRequestReview
// CommonCommentInfoPullRequestReviewComment
// CommonCommentInfoTeamDiscussion
// CommonCommentInfoTeamDiscussionComment
type CommonCommentInfo interface {
	implementsGraphQLInterfaceCommonCommentInfo()
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetAuthor returns the interface-field "author" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The actor who authored the comment.
	GetAuthor() *CommonCommentInfoAuthorActor
	// GetRaw returns the interface-field "body" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The body as Markdown.
	GetRaw() string
	// GetBodyText returns the interface-field "bodyText" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The body rendered to text.
	GetBodyText() string
	// GetBodyHTML returns the interface-field "bodyHTML" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The body rendered to HTML.
	GetBodyHTML() string
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Identifies the date and time when the object was created.
	GetCreatedAt() time.Time
}

func (v *CommonCommentInfoCommitComment) implementsGraphQLInterfaceCommonCommentInfo()            {}
func (v *CommonCommentInfoDiscussion) implementsGraphQLInterfaceCommonCommentInfo()               {}
func (v *CommonCommentInfoDiscussionComment) implementsGraphQLInterfaceCommonCommentInfo()        {}
func (v *CommonCommentInfoGistComment) implementsGraphQLInterfaceCommonCommentInfo()              {}
func (v *CommonCommentInfoIssue) implementsGraphQLInterfaceCommonCommentInfo()                    {}
func (v *CommonCommentInfoIssueComment) implementsGraphQLInterfaceCommonCommentInfo()             {}
func (v *CommonCommentInfoPullRequest) implementsGraphQLInterfaceCommonCommentInfo()              {}
func (v *CommonCommentInfoPullRequestReview) implementsGraphQLInterfaceCommonCommentInfo()        {}
func (v *CommonCommentInfoPullRequestReviewComment) implementsGraphQLInterfaceCommonCommentInfo() {}
func (v *CommonCommentInfoTeamDiscussion) implementsGraphQLInterfaceCommonCommentInfo()           {}
func (v *CommonCommentInfoTeamDiscussionComment) implementsGraphQLInterfaceCommonCommentInfo()    {}

func __unmarshalCommonCommentInfo(b []byte, v *CommonCommentInfo) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CommitComment":
		*v = new(CommonCommentInfoCommitComment)
		return json.Unmarshal(b, *v)
	case "Discussion":
		*v = new(CommonCommentInfoDiscussion)
		return json.Unmarshal(b, *v)
	case "DiscussionComment":
		*v = new(CommonCommentInfoDiscussionComment)
		return json.Unmarshal(b, *v)
	case "GistComment":
		*v = new(CommonCommentInfoGistComment)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(CommonCommentInfoIssue)
		return json.Unmarshal(b, *v)
	case "IssueComment":
		*v = new(CommonCommentInfoIssueComment)
		return json.Unmarshal(b, *v)
	case "PullRequest":
		*v = new(CommonCommentInfoPullRequest)
		return json.Unmarshal(b, *v)
	case "PullRequestReview":
		*v = new(CommonCommentInfoPullRequestReview)
		return json.Unmarshal(b, *v)
	case "PullRequestReviewComment":
		*v = new(CommonCommentInfoPullRequestReviewComment)
		return json.Unmarshal(b, *v)
	case "TeamDiscussion":
		*v = new(CommonCommentInfoTeamDiscussion)
		return json.Unmarshal(b, *v)
	case "TeamDiscussionComment":
		*v = new(CommonCommentInfoTeamDiscussionComment)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Comment.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CommonCommentInfo: "%v"`, tn.TypeName)
	}
}

func __marshalCommonCommentInfo(v *CommonCommentInfo) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CommonCommentInfoCommitComment:
		typename = "CommitComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoCommitComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoDiscussion:
		typename = "Discussion"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoDiscussion
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoDiscussionComment:
		typename = "DiscussionComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoDiscussionComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoGistComment:
		typename = "GistComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoGistComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoIssue:
		typename = "Issue"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoIssue
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoIssueComment:
		typename = "IssueComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoIssueComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoPullRequest:
		typename = "PullRequest"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoPullRequest
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoPullRequestReview:
		typename = "PullRequestReview"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoPullRequestReview
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoPullRequestReviewComment:
		typename = "PullRequestReviewComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoPullRequestReviewComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoTeamDiscussion:
		typename = "TeamDiscussion"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoTeamDiscussion
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoTeamDiscussionComment:
		typename = "TeamDiscussionComment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoTeamDiscussionComment
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CommonCommentInfo: "%T"`, v)
	}
}

// CommonCommentInfoAuthorActor includes the requested fields of the GraphQL interface Actor.
//
// CommonCommentInfoAuthorActor is implemented by the following types:
// CommonCommentInfoAuthorBot
// CommonCommentInfoAuthorEnterpriseUserAccount
// CommonCommentInfoAuthorMannequin
// CommonCommentInfoAuthorOrganization
// CommonCommentInfoAuthorUser
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
type CommonCommentInfoAuthorActor interface {
	implementsGraphQLInterfaceCommonCommentInfoAuthorActor()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	UserInfo
}

func (v *CommonCommentInfoAuthorBot) implementsGraphQLInterfaceCommonCommentInfoAuthorActor() {}
func (v *CommonCommentInfoAuthorEnterpriseUserAccount) implementsGraphQLInterfaceCommonCommentInfoAuthorActor() {
}
func (v *CommonCommentInfoAuthorMannequin) implementsGraphQLInterfaceCommonCommentInfoAuthorActor() {}
func (v *CommonCommentInfoAuthorOrganization) implementsGraphQLInterfaceCommonCommentInfoAuthorActor() {
}
func (v *CommonCommentInfoAuthorUser) implementsGraphQLInterfaceCommonCommentInfoAuthorActor() {}

func __unmarshalCommonCommentInfoAuthorActor(b []byte, v *CommonCommentInfoAuthorActor) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Bot":
		*v = new(CommonCommentInfoAuthorBot)
		return json.Unmarshal(b, *v)
	case "EnterpriseUserAccount":
		*v = new(CommonCommentInfoAuthorEnterpriseUserAccount)
		return json.Unmarshal(b, *v)
	case "Mannequin":
		*v = new(CommonCommentInfoAuthorMannequin)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(CommonCommentInfoAuthorOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(CommonCommentInfoAuthorUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Actor.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CommonCommentInfoAuthorActor: "%v"`, tn.TypeName)
	}
}

func __marshalCommonCommentInfoAuthorActor(v *CommonCommentInfoAuthorActor) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CommonCommentInfoAuthorBot:
		typename = "Bot"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoAuthorBot
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoAuthorEnterpriseUserAccount:
		typename = "EnterpriseUserAccount"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoAuthorEnterpriseUserAccount
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoAuthorMannequin:
		typename = "Mannequin"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoAuthorMannequin
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoAuthorOrganization:
		typename = "Organization"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoAuthorOrganization
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CommonCommentInfoAuthorUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCommonCommentInfoAuthorUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CommonCommentInfoAuthorActor: "%T"`, v)
	}
}

// CommonCommentInfoAuthorBot includes the requested fields of the GraphQL type Bot.
// The GraphQL type's documentation follows.
//
// A special type of user which takes actions on behalf of GitHub Apps.
type CommonCommentInfoAuthorBot struct {
	Typename    *string `json:"__typename"`
	UserInfoBot `json:"-"`
}

// GetTypename returns CommonCommentInfoAuthorBot.Typename, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoAuthorBot) GetTypename() *string { return v.Typename }

// GetDisplayName returns CommonCommentInfoAuthorBot.DisplayName, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoAuthorBot) GetDisplayName() string { return v.UserInfoBot.DisplayName }

func (v *CommonCommentInfoAuthorBot) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoAuthorBot
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoAuthorBot = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInfoBot)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommonCommentInfoAuthorBot struct {
	Typename *string `json:"__typename"`

	DisplayName string `json:"displayName"`
}

func (v *CommonCommentInfoAuthorBot) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoAuthorBot) __premarshalJSON() (*__premarshalCommonCommentInfoAuthorBot, error) {
	var retval __premarshalCommonCommentInfoAuthorBot

	retval.Typename = v.Typename
	retval.DisplayName = v.UserInfoBot.DisplayName
	return &retval, nil
}

// CommonCommentInfoAuthorEnterpriseUserAccount includes the requested fields of the GraphQL type EnterpriseUserAccount.
// The GraphQL type's documentation follows.
//
// An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
type CommonCommentInfoAuthorEnterpriseUserAccount struct {
	Typename                      *string `json:"__typename"`
	UserInfoEnterpriseUserAccount `json:"-"`
}

// GetTypename returns CommonCommentInfoAuthorEnterpriseUserAccount.Typename, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoAuthorEnterpriseUserAccount) GetTypename() *string { return v.Typename }

// GetDisplayName returns CommonCommentInfoAuthorEnterpriseUserAccount.DisplayName, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoAuthorEnterpriseUserAccount) GetDisplayName() string {
	return v.UserInfoEnterpriseUserAccount.DisplayName
}

func (v *CommonCommentInfoAuthorEnterpriseUserAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoAuthorEnterpriseUserAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoAuthorEnterpriseUserAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInfoEnterpriseUserAccount)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommonCommentInfoAuthorEnterpriseUserAccount struct {
	Typename *string `json:"__typename"`

	DisplayName string `json:"displayName"`
}

func (v *CommonCommentInfoAuthorEnterpriseUserAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoAuthorEnterpriseUserAccount) __premarshalJSON() (*__premarshalCommonCommentInfoAuthorEnterpriseUserAccount, error) {
	var retval __premarshalCommonCommentInfoAuthorEnterpriseUserAccount

	retval.Typename = v.Typename
	retval.DisplayName = v.UserInfoEnterpriseUserAccount.DisplayName
	return &retval, nil
}

// CommonCommentInfoAuthorMannequin includes the requested fields of the GraphQL type Mannequin.
// The GraphQL type's documentation follows.
//
// A placeholder user for attribution of imported data on GitHub.
type CommonCommentInfoAuthorMannequin struct {
	Typename          *string `json:"__typename"`
	UserInfoMannequin `json:"-"`
}

// GetTypename returns CommonCommentInfoAuthorMannequin.Typename, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoAuthorMannequin) GetTypename() *string { return v.Typename }

// GetDisplayName returns CommonCommentInfoAuthorMannequin.DisplayName, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoAuthorMannequin) GetDisplayName() string {
	return v.UserInfoMannequin.DisplayName
}

func (v *CommonCommentInfoAuthorMannequin) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoAuthorMannequin
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoAuthorMannequin = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInfoMannequin)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommonCommentInfoAuthorMannequin struct {
	Typename *string `json:"__typename"`

	DisplayName string `json:"displayName"`
}

func (v *CommonCommentInfoAuthorMannequin) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoAuthorMannequin) __premarshalJSON() (*__premarshalCommonCommentInfoAuthorMannequin, error) {
	var retval __premarshalCommonCommentInfoAuthorMannequin

	retval.Typename = v.Typename
	retval.DisplayName = v.UserInfoMannequin.DisplayName
	return &retval, nil
}

// CommonCommentInfoAuthorOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type CommonCommentInfoAuthorOrganization struct {
	Typename             *string `json:"__typename"`
	UserInfoOrganization `json:"-"`
}

// GetTypename returns CommonCommentInfoAuthorOrganization.Typename, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoAuthorOrganization) GetTypename() *string { return v.Typename }

// GetDisplayName returns CommonCommentInfoAuthorOrganization.DisplayName, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoAuthorOrganization) GetDisplayName() string {
	return v.UserInfoOrganization.DisplayName
}

func (v *CommonCommentInfoAuthorOrganization) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoAuthorOrganization
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoAuthorOrganization = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInfoOrganization)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommonCommentInfoAuthorOrganization struct {
	Typename *string `json:"__typename"`

	DisplayName string `json:"displayName"`
}

func (v *CommonCommentInfoAuthorOrganization) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoAuthorOrganization) __premarshalJSON() (*__premarshalCommonCommentInfoAuthorOrganization, error) {
	var retval __premarshalCommonCommentInfoAuthorOrganization

	retval.Typename = v.Typename
	retval.DisplayName = v.UserInfoOrganization.DisplayName
	return &retval, nil
}

// CommonCommentInfoAuthorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type CommonCommentInfoAuthorUser struct {
	Typename     *string `json:"__typename"`
	UserInfoUser `json:"-"`
}

// GetTypename returns CommonCommentInfoAuthorUser.Typename, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoAuthorUser) GetTypename() *string { return v.Typename }

// GetDisplayName returns CommonCommentInfoAuthorUser.DisplayName, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoAuthorUser) GetDisplayName() string { return v.UserInfoUser.DisplayName }

func (v *CommonCommentInfoAuthorUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoAuthorUser
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoAuthorUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInfoUser)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCommonCommentInfoAuthorUser struct {
	Typename *string `json:"__typename"`

	DisplayName string `json:"displayName"`
}

func (v *CommonCommentInfoAuthorUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoAuthorUser) __premarshalJSON() (*__premarshalCommonCommentInfoAuthorUser, error) {
	var retval __premarshalCommonCommentInfoAuthorUser

	retval.Typename = v.Typename
	retval.DisplayName = v.UserInfoUser.DisplayName
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of CommitComment requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoCommitComment struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoCommitComment.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoCommitComment) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoCommitComment.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoCommitComment) GetAuthor() *CommonCommentInfoAuthorActor { return v.Author }

// GetRaw returns CommonCommentInfoCommitComment.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoCommitComment) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoCommitComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoCommitComment) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoCommitComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoCommitComment) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoCommitComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoCommitComment) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoCommitComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoCommitComment
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoCommitComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoCommitComment.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoCommitComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoCommitComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoCommitComment) __premarshalJSON() (*__premarshalCommonCommentInfoCommitComment, error) {
	var retval __premarshalCommonCommentInfoCommitComment

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoCommitComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of Discussion requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoDiscussion struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoDiscussion.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussion) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoDiscussion.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussion) GetAuthor() *CommonCommentInfoAuthorActor { return v.Author }

// GetRaw returns CommonCommentInfoDiscussion.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussion) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoDiscussion.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussion) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoDiscussion.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussion) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoDiscussion.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussion) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoDiscussion) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoDiscussion
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoDiscussion = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoDiscussion.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoDiscussion struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoDiscussion) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoDiscussion) __premarshalJSON() (*__premarshalCommonCommentInfoDiscussion, error) {
	var retval __premarshalCommonCommentInfoDiscussion

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoDiscussion.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of DiscussionComment requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoDiscussionComment struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoDiscussionComment.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussionComment) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoDiscussionComment.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussionComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.Author
}

// GetRaw returns CommonCommentInfoDiscussionComment.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussionComment) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoDiscussionComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussionComment) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoDiscussionComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussionComment) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoDiscussionComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoDiscussionComment) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoDiscussionComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoDiscussionComment
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoDiscussionComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoDiscussionComment.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoDiscussionComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoDiscussionComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoDiscussionComment) __premarshalJSON() (*__premarshalCommonCommentInfoDiscussionComment, error) {
	var retval __premarshalCommonCommentInfoDiscussionComment

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoDiscussionComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of GistComment requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoGistComment struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoGistComment.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoGistComment) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoGistComment.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoGistComment) GetAuthor() *CommonCommentInfoAuthorActor { return v.Author }

// GetRaw returns CommonCommentInfoGistComment.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoGistComment) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoGistComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoGistComment) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoGistComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoGistComment) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoGistComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoGistComment) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoGistComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoGistComment
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoGistComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoGistComment.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoGistComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoGistComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoGistComment) __premarshalJSON() (*__premarshalCommonCommentInfoGistComment, error) {
	var retval __premarshalCommonCommentInfoGistComment

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoGistComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of Issue requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoIssue struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoIssue.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssue) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoIssue.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssue) GetAuthor() *CommonCommentInfoAuthorActor { return v.Author }

// GetRaw returns CommonCommentInfoIssue.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssue) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoIssue.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssue) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoIssue.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssue) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssue) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoIssue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoIssue
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoIssue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoIssue.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoIssue struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoIssue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoIssue) __premarshalJSON() (*__premarshalCommonCommentInfoIssue, error) {
	var retval __premarshalCommonCommentInfoIssue

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoIssue.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of IssueComment requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoIssueComment struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoIssueComment.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssueComment) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoIssueComment.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssueComment) GetAuthor() *CommonCommentInfoAuthorActor { return v.Author }

// GetRaw returns CommonCommentInfoIssueComment.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssueComment) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoIssueComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssueComment) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoIssueComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssueComment) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoIssueComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoIssueComment) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoIssueComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoIssueComment
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoIssueComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoIssueComment.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoIssueComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoIssueComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoIssueComment) __premarshalJSON() (*__premarshalCommonCommentInfoIssueComment, error) {
	var retval __premarshalCommonCommentInfoIssueComment

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoIssueComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of PullRequest requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoPullRequest struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoPullRequest.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequest) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoPullRequest.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequest) GetAuthor() *CommonCommentInfoAuthorActor { return v.Author }

// GetRaw returns CommonCommentInfoPullRequest.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequest) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoPullRequest.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequest) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoPullRequest.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequest) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoPullRequest.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequest) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoPullRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoPullRequest
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoPullRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoPullRequest.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoPullRequest struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoPullRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoPullRequest) __premarshalJSON() (*__premarshalCommonCommentInfoPullRequest, error) {
	var retval __premarshalCommonCommentInfoPullRequest

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoPullRequest.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of PullRequestReview requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoPullRequestReview struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoPullRequestReview.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReview) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoPullRequestReview.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReview) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.Author
}

// GetRaw returns CommonCommentInfoPullRequestReview.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReview) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoPullRequestReview.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReview) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoPullRequestReview.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReview) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoPullRequestReview.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReview) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoPullRequestReview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoPullRequestReview
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoPullRequestReview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoPullRequestReview.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoPullRequestReview struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoPullRequestReview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoPullRequestReview) __premarshalJSON() (*__premarshalCommonCommentInfoPullRequestReview, error) {
	var retval __premarshalCommonCommentInfoPullRequestReview

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoPullRequestReview.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of PullRequestReviewComment requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoPullRequestReviewComment struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoPullRequestReviewComment.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReviewComment) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoPullRequestReviewComment.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReviewComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.Author
}

// GetRaw returns CommonCommentInfoPullRequestReviewComment.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReviewComment) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoPullRequestReviewComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReviewComment) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoPullRequestReviewComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReviewComment) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoPullRequestReviewComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoPullRequestReviewComment) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoPullRequestReviewComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoPullRequestReviewComment
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoPullRequestReviewComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoPullRequestReviewComment.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoPullRequestReviewComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoPullRequestReviewComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoPullRequestReviewComment) __premarshalJSON() (*__premarshalCommonCommentInfoPullRequestReviewComment, error) {
	var retval __premarshalCommonCommentInfoPullRequestReviewComment

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoPullRequestReviewComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of TeamDiscussion requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoTeamDiscussion struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoTeamDiscussion.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussion) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoTeamDiscussion.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussion) GetAuthor() *CommonCommentInfoAuthorActor { return v.Author }

// GetRaw returns CommonCommentInfoTeamDiscussion.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussion) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoTeamDiscussion.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussion) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoTeamDiscussion.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussion) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoTeamDiscussion.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussion) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoTeamDiscussion) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoTeamDiscussion
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoTeamDiscussion = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoTeamDiscussion.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoTeamDiscussion struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoTeamDiscussion) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoTeamDiscussion) __premarshalJSON() (*__premarshalCommonCommentInfoTeamDiscussion, error) {
	var retval __premarshalCommonCommentInfoTeamDiscussion

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoTeamDiscussion.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// CommonCommentInfo includes the GraphQL fields of TeamDiscussionComment requested by the fragment CommonCommentInfo.
// The GraphQL type's documentation follows.
//
// Represents a comment.
type CommonCommentInfoTeamDiscussionComment struct {
	Id string `json:"id"`
	// The actor who authored the comment.
	Author *CommonCommentInfoAuthorActor `json:"-"`
	// The body as Markdown.
	Raw string `json:"raw"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CommonCommentInfoTeamDiscussionComment.Id, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussionComment) GetId() string { return v.Id }

// GetAuthor returns CommonCommentInfoTeamDiscussionComment.Author, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussionComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.Author
}

// GetRaw returns CommonCommentInfoTeamDiscussionComment.Raw, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussionComment) GetRaw() string { return v.Raw }

// GetBodyText returns CommonCommentInfoTeamDiscussionComment.BodyText, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussionComment) GetBodyText() string { return v.BodyText }

// GetBodyHTML returns CommonCommentInfoTeamDiscussionComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussionComment) GetBodyHTML() string { return v.BodyHTML }

// GetCreatedAt returns CommonCommentInfoTeamDiscussionComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonCommentInfoTeamDiscussionComment) GetCreatedAt() time.Time { return v.CreatedAt }

func (v *CommonCommentInfoTeamDiscussionComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CommonCommentInfoTeamDiscussionComment
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CommonCommentInfoTeamDiscussionComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CommonCommentInfoAuthorActor)
			err = __unmarshalCommonCommentInfoAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CommonCommentInfoTeamDiscussionComment.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCommonCommentInfoTeamDiscussionComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *CommonCommentInfoTeamDiscussionComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CommonCommentInfoTeamDiscussionComment) __premarshalJSON() (*__premarshalCommonCommentInfoTeamDiscussionComment, error) {
	var retval __premarshalCommonCommentInfoTeamDiscussionComment

	retval.Id = v.Id
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal CommonCommentInfoTeamDiscussionComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.Raw
	retval.BodyText = v.BodyText
	retval.BodyHTML = v.BodyHTML
	retval.CreatedAt = v.CreatedAt
	return &retval, nil
}

// The possible sides of a diff.
type DiffSide string

const (
	// The left side of the diff.
	DiffSideLeft DiffSide = "LEFT"
	// The right side of the diff.
	DiffSideRight DiffSide = "RIGHT"
)

// GetChecksAndStatusRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetChecksAndStatusRepository struct {
	// Returns a single pull request from the current repository by number.
	PullRequest *GetChecksAndStatusRepositoryPullRequest `json:"pullRequest"`
}

// GetPullRequest returns GetChecksAndStatusRepository.PullRequest, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepository) GetPullRequest() *GetChecksAndStatusRepositoryPullRequest {
	return v.PullRequest
}

// GetChecksAndStatusRepositoryPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type GetChecksAndStatusRepositoryPullRequest struct {
	// A list of commits present in this pull request's head branch not present in the base branch.
	StatusCheckRollup GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnection `json:"statusCheckRollup"`
}

// GetStatusCheckRollup returns GetChecksAndStatusRepositoryPullRequest.StatusCheckRollup, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequest) GetStatusCheckRollup() GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnection {
	return v.StatusCheckRollup
}

// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnection includes the requested fields of the GraphQL type PullRequestCommitConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequestCommit.
type GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnection struct {
	// A list of nodes.
	Nodes []*GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommit `json:"nodes"`
}

// GetNodes returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnection) GetNodes() []*GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommit {
	return v.Nodes
}

// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommit includes the requested fields of the GraphQL type PullRequestCommit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit part of a pull request.
type GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommit struct {
	// The Git commit object
	Commit GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommit `json:"commit"`
}

// GetCommit returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommit.Commit, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommit) GetCommit() GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommit {
	return v.Commit
}

// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommit struct {
	// Check and Status rollup information for this commit.
	StatusCheckRollup *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup `json:"statusCheckRollup"`
}

// GetStatusCheckRollup returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommit.StatusCheckRollup, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommit) GetStatusCheckRollup() *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup {
	return v.StatusCheckRollup
}

// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup includes the requested fields of the GraphQL type StatusCheckRollup.
// The GraphQL type's documentation follows.
//
// Represents the rollup for both the check runs and status for a commit.
type GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup struct {
	// A list of status contexts and check runs for this commit.
	Contexts GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection `json:"contexts"`
}

// GetContexts returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup.Contexts, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup) GetContexts() GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection {
	return v.Contexts
}

// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection includes the requested fields of the GraphQL type StatusCheckRollupContextConnection.
// The GraphQL type's documentation follows.
//
// The connection type for StatusCheckRollupContext.
type GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection struct {
	// A list of nodes.
	Nodes []*GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext `json:"-"`
	// Information to aid in pagination.
	PageInfo GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection) GetNodes() []*GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext {
	return v.Nodes
}

// GetPageInfo returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection) GetPageInfo() GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionPageInfo {
	return v.PageInfo
}

func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]*GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				*dst = new(GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext)
				err = __unmarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext(
					src, *dst)
				if err != nil {
					return fmt.Errorf(
						"Unable to unmarshal GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection struct {
	Nodes []json.RawMessage `json:"nodes"`

	PageInfo GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionPageInfo `json:"pageInfo"`
}

func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection) __premarshalJSON() (*__premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection, error) {
	var retval __premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection

	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"Unable to marshal GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection.Nodes: %w", err)
				}
			}
		}
	}
	retval.PageInfo = v.PageInfo
	return &retval, nil
}

// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun includes the requested fields of the GraphQL type CheckRun.
// The GraphQL type's documentation follows.
//
// A check run.
type GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun struct {
	Typename     *string `json:"__typename"`
	CheckRunCase `json:"-"`
}

// GetTypename returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun.Typename, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) GetTypename() *string {
	return v.Typename
}

// GetName returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun.Name, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) GetName() string {
	return v.CheckRunCase.Name
}

// GetStatus returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun.Status, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) GetStatus() CheckStatusState {
	return v.CheckRunCase.Status
}

// GetConclusion returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun.Conclusion, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) GetConclusion() *CheckConclusionState {
	return v.CheckRunCase.Conclusion
}

// GetStartedAt returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun.StartedAt, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) GetStartedAt() *time.Time {
	return v.CheckRunCase.StartedAt
}

// GetCompletedAt returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun.CompletedAt, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) GetCompletedAt() *time.Time {
	return v.CheckRunCase.CompletedAt
}

// GetDetailsUrl returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun.DetailsUrl, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) GetDetailsUrl() *string {
	return v.CheckRunCase.DetailsUrl
}

func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun
		graphql.NoUnmarshalJSON
	}
	firstPass.GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CheckRunCase)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`

	Status CheckStatusState `json:"status"`

	Conclusion *CheckConclusionState `json:"conclusion"`

	StartedAt *time.Time `json:"startedAt"`

	CompletedAt *time.Time `json:"completedAt"`

	DetailsUrl *string `json:"detailsUrl"`
}

func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) __premarshalJSON() (*__premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun, error) {
	var retval __premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun

	retval.Typename = v.Typename
	retval.Name = v.CheckRunCase.Name
	retval.Status = v.CheckRunCase.Status
	retval.Conclusion = v.CheckRunCase.Conclusion
	retval.StartedAt = v.CheckRunCase.StartedAt
	retval.CompletedAt = v.CheckRunCase.CompletedAt
	retval.DetailsUrl = v.CheckRunCase.DetailsUrl
	return &retval, nil
}

// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext includes the requested fields of the GraphQL interface StatusCheckRollupContext.
//
// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext is implemented by the following types:
// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun
// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext
// The GraphQL type's documentation follows.
//
// Types that can be inside a StatusCheckRollup context.
type GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext interface {
	implementsGraphQLInterfaceGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun) implementsGraphQLInterfaceGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext() {
}
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext) implementsGraphQLInterfaceGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext() {
}

func __unmarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext(b []byte, v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CheckRun":
		*v = new(GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun)
		return json.Unmarshal(b, *v)
	case "StatusContext":
		*v = new(GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing StatusCheckRollupContext.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext: "%v"`, tn.TypeName)
	}
}

func __marshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext(v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun:
		typename = "CheckRun"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesCheckRun
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext:
		typename = "StatusContext"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusCheckRollupContext: "%T"`, v)
	}
}

// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext includes the requested fields of the GraphQL type StatusContext.
// The GraphQL type's documentation follows.
//
// Represents an individual commit status context
type GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext struct {
	Typename          *string `json:"__typename"`
	StatusContextCase `json:"-"`
}

// GetTypename returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext.Typename, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext) GetTypename() *string {
	return v.Typename
}

// GetContext returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext.Context, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext) GetContext() string {
	return v.StatusContextCase.Context
}

// GetState returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext.State, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext) GetState() StatusState {
	return v.StatusContextCase.State
}

// GetTargetUrl returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext.TargetUrl, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext) GetTargetUrl() *string {
	return v.StatusContextCase.TargetUrl
}

func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext
		graphql.NoUnmarshalJSON
	}
	firstPass.GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.StatusContextCase)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext struct {
	Typename *string `json:"__typename"`

	Context string `json:"context"`

	State StatusState `json:"state"`

	TargetUrl *string `json:"targetUrl"`
}

func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext) __premarshalJSON() (*__premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext, error) {
	var retval __premarshalGetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionNodesStatusContext

	retval.Typename = v.Typename
	retval.Context = v.StatusContextCase.Context
	retval.State = v.StatusContextCase.State
	retval.TargetUrl = v.StatusContextCase.TargetUrl
	return &retval, nil
}

// GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusRepositoryPullRequestStatusCheckRollupPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetChecksAndStatusResponse is returned by GetChecksAndStatus on success.
type GetChecksAndStatusResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository *GetChecksAndStatusRepository `json:"repository"`
}

// GetRepository returns GetChecksAndStatusResponse.Repository, and is useful for accessing the field via an interface.
func (v *GetChecksAndStatusResponse) GetRepository() *GetChecksAndStatusRepository {
	return v.Repository
}

// LabelInfo includes the GraphQL fields of Label requested by the fragment LabelInfo.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type LabelInfo struct {
	Id string `json:"id"`
	// Identifies the label color.
	Color string `json:"color"`
	// A brief description of this label.
	Description *string `json:"description"`
}

// GetId returns LabelInfo.Id, and is useful for accessing the field via an interface.
func (v *LabelInfo) GetId() string { return v.Id }

// GetColor returns LabelInfo.Color, and is useful for accessing the field via an interface.
func (v *LabelInfo) GetColor() string { return v.Color }

// GetDescription returns LabelInfo.Description, and is useful for accessing the field via an interface.
func (v *LabelInfo) GetDescription() *string { return v.Description }

// NextPageInfo includes the GraphQL fields of PageInfo requested by the fragment NextPageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type NextPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns NextPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *NextPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetEndCursor returns NextPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *NextPageInfo) GetEndCursor() *string { return v.EndCursor }

// The possible events to perform on a pull request review.
type PullRequestReviewEvent string

const (
	// Submit feedback and approve merging these changes.
	PullRequestReviewEventApprove PullRequestReviewEvent = "APPROVE"
	// Submit general feedback without explicit approval.
	PullRequestReviewEventComment PullRequestReviewEvent = "COMMENT"
	// Dismiss review so it now longer effects merging.
	PullRequestReviewEventDismiss PullRequestReviewEvent = "DISMISS"
	// Submit feedback that must be addressed before merging.
	PullRequestReviewEventRequestChanges PullRequestReviewEvent = "REQUEST_CHANGES"
)

// The possible states of a pull request review.
type PullRequestReviewState string

const (
	// A review allowing the pull request to merge.
	PullRequestReviewStateApproved PullRequestReviewState = "APPROVED"
	// A review blocking the pull request from merging.
	PullRequestReviewStateChangesRequested PullRequestReviewState = "CHANGES_REQUESTED"
	// An informational review.
	PullRequestReviewStateCommented PullRequestReviewState = "COMMENTED"
	// A review that has been dismissed.
	PullRequestReviewStateDismissed PullRequestReviewState = "DISMISSED"
	// A review that has not yet been submitted.
	PullRequestReviewStatePending PullRequestReviewState = "PENDING"
)

// The possible states of a pull request.
type PullRequestState string

const (
	// A pull request that has been closed without being merged.
	PullRequestStateClosed PullRequestState = "CLOSED"
	// A pull request that has been closed by being merged.
	PullRequestStateMerged PullRequestState = "MERGED"
	// A pull request that is still open.
	PullRequestStateOpen PullRequestState = "OPEN"
)

// PullRequestsListRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type PullRequestsListRepository struct {
	// Returns a single pull request from the current repository by number.
	PullRequest *PullRequestsListRepositoryPullRequest `json:"pullRequest"`
}

// GetPullRequest returns PullRequestsListRepository.PullRequest, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepository) GetPullRequest() *PullRequestsListRepositoryPullRequest {
	return v.PullRequest
}

// PullRequestsListRepositoryPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type PullRequestsListRepositoryPullRequest struct {
	// A list of reviews associated with the pull request.
	Reviews *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnection `json:"reviews"`
}

// GetReviews returns PullRequestsListRepositoryPullRequest.Reviews, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequest) GetReviews() *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnection {
	return v.Reviews
}

// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnection includes the requested fields of the GraphQL type PullRequestReviewConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequestReview.
type PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnection struct {
	// A list of nodes.
	Nodes []*PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview `json:"nodes"`
}

// GetNodes returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnection) GetNodes() []*PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview {
	return v.Nodes
}

// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview includes the requested fields of the GraphQL type PullRequestReview.
// The GraphQL type's documentation follows.
//
// A review object for a given pull request.
type PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview struct {
	// The actor who authored the comment.
	Author *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor `json:"-"`
	// Identifies the pull request review body.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body of this review rendered as plain text.
	BodyText string `json:"bodyText"`
	// Identifies the current state of the pull request review.
	State PullRequestReviewState `json:"state"`
	// Identifies when the Pull Request Review was submitted
	SubmittedAt *time.Time `json:"submittedAt"`
}

// GetAuthor returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.Author, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetAuthor() *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor {
	return v.Author
}

// GetBody returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.Body, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetBody() string {
	return v.Body
}

// GetBodyHTML returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.BodyHTML, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetBodyHTML() string {
	return v.BodyHTML
}

// GetBodyText returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.BodyText, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetBodyText() string {
	return v.BodyText
}

// GetState returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.State, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetState() PullRequestReviewState {
	return v.State
}

// GetSubmittedAt returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.SubmittedAt, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetSubmittedAt() *time.Time {
	return v.SubmittedAt
}

func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor)
			err = __unmarshalPullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalPullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview struct {
	Author json.RawMessage `json:"author"`

	Body string `json:"body"`

	BodyHTML string `json:"bodyHTML"`

	BodyText string `json:"bodyText"`

	State PullRequestReviewState `json:"state"`

	SubmittedAt *time.Time `json:"submittedAt"`
}

func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) __premarshalJSON() (*__premarshalPullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview, error) {
	var retval __premarshalPullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview

	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalPullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.Author: %w", err)
			}
		}
	}
	retval.Body = v.Body
	retval.BodyHTML = v.BodyHTML
	retval.BodyText = v.BodyText
	retval.State = v.State
	retval.SubmittedAt = v.SubmittedAt
	return &retval, nil
}

// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor includes the requested fields of the GraphQL interface Actor.
//
// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor is implemented by the following types:
// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot
// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount
// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin
// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization
// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
type PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor interface {
	implementsGraphQLInterfacePullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetLogin returns the interface-field "login" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The username of the actor.
	GetLogin() string
}

func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot) implementsGraphQLInterfacePullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor() {
}
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount) implementsGraphQLInterfacePullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor() {
}
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin) implementsGraphQLInterfacePullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor() {
}
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization) implementsGraphQLInterfacePullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor() {
}
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser) implementsGraphQLInterfacePullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor() {
}

func __unmarshalPullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor(b []byte, v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Bot":
		*v = new(PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot)
		return json.Unmarshal(b, *v)
	case "EnterpriseUserAccount":
		*v = new(PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount)
		return json.Unmarshal(b, *v)
	case "Mannequin":
		*v = new(PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Actor.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor: "%v"`, tn.TypeName)
	}
}

func __marshalPullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor(v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot:
		typename = "Bot"

		result := struct {
			TypeName string `json:"__typename"`
			*PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot
		}{typename, v}
		return json.Marshal(result)
	case *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount:
		typename = "EnterpriseUserAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount
		}{typename, v}
		return json.Marshal(result)
	case *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin:
		typename = "Mannequin"

		result := struct {
			TypeName string `json:"__typename"`
			*PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin
		}{typename, v}
		return json.Marshal(result)
	case *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization
		}{typename, v}
		return json.Marshal(result)
	case *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor: "%T"`, v)
	}
}

// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot includes the requested fields of the GraphQL type Bot.
// The GraphQL type's documentation follows.
//
// A special type of user which takes actions on behalf of GitHub Apps.
type PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot struct {
	Typename *string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot.Typename, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot) GetTypename() *string {
	return v.Typename
}

// GetLogin returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot.Login, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot) GetLogin() string {
	return v.Login
}

// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount includes the requested fields of the GraphQL type EnterpriseUserAccount.
// The GraphQL type's documentation follows.
//
// An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
type PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount struct {
	Typename *string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount.Typename, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount) GetTypename() *string {
	return v.Typename
}

// GetLogin returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount.Login, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount) GetLogin() string {
	return v.Login
}

// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin includes the requested fields of the GraphQL type Mannequin.
// The GraphQL type's documentation follows.
//
// A placeholder user for attribution of imported data on GitHub.
type PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin struct {
	Typename *string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin.Typename, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin) GetTypename() *string {
	return v.Typename
}

// GetLogin returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin.Login, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin) GetLogin() string {
	return v.Login
}

// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization struct {
	Typename *string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization.Typename, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization) GetTypename() *string {
	return v.Typename
}

// GetLogin returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization.Login, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization) GetLogin() string {
	return v.Login
}

// PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser struct {
	Typename *string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser.Typename, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser) GetTypename() *string {
	return v.Typename
}

// GetLogin returns PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser.Login, and is useful for accessing the field via an interface.
func (v *PullRequestsListRepositoryPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser) GetLogin() string {
	return v.Login
}

// PullRequestsListResponse is returned by PullRequestsList on success.
type PullRequestsListResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository *PullRequestsListRepository `json:"repository"`
}

// GetRepository returns PullRequestsListResponse.Repository, and is useful for accessing the field via an interface.
func (v *PullRequestsListResponse) GetRepository() *PullRequestsListRepository { return v.Repository }

// Emojis that can be attached to Issues, Pull Requests and Comments.
type ReactionContent string

const (
	// Represents the `:confused:` emoji.
	ReactionContentConfused ReactionContent = "CONFUSED"
	// Represents the `:eyes:` emoji.
	ReactionContentEyes ReactionContent = "EYES"
	// Represents the `:heart:` emoji.
	ReactionContentHeart ReactionContent = "HEART"
	// Represents the `:hooray:` emoji.
	ReactionContentHooray ReactionContent = "HOORAY"
	// Represents the `:laugh:` emoji.
	ReactionContentLaugh ReactionContent = "LAUGH"
	// Represents the `:rocket:` emoji.
	ReactionContentRocket ReactionContent = "ROCKET"
	// Represents the `:-1:` emoji.
	ReactionContentThumbsDown ReactionContent = "THUMBS_DOWN"
	// Represents the `:+1:` emoji.
	ReactionContentThumbsUp ReactionContent = "THUMBS_UP"
)

// ReactionsInfo includes the GraphQL fields of Reactable requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
//
// ReactionsInfo is implemented by the following types:
// ReactionsInfoCommitComment
// ReactionsInfoDiscussion
// ReactionsInfoDiscussionComment
// ReactionsInfoIssue
// ReactionsInfoIssueComment
// ReactionsInfoPullRequest
// ReactionsInfoPullRequestReview
// ReactionsInfoPullRequestReviewComment
// ReactionsInfoRelease
// ReactionsInfoTeamDiscussion
// ReactionsInfoTeamDiscussionComment
type ReactionsInfo interface {
	implementsGraphQLInterfaceReactionsInfo()
	// GetReactions returns the interface-field "reactions" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// A list of Reactions left on the Issue.
	GetReactions() ReactionsInfoReactionsReactionConnection
}

func (v *ReactionsInfoCommitComment) implementsGraphQLInterfaceReactionsInfo()            {}
func (v *ReactionsInfoDiscussion) implementsGraphQLInterfaceReactionsInfo()               {}
func (v *ReactionsInfoDiscussionComment) implementsGraphQLInterfaceReactionsInfo()        {}
func (v *ReactionsInfoIssue) implementsGraphQLInterfaceReactionsInfo()                    {}
func (v *ReactionsInfoIssueComment) implementsGraphQLInterfaceReactionsInfo()             {}
func (v *ReactionsInfoPullRequest) implementsGraphQLInterfaceReactionsInfo()              {}
func (v *ReactionsInfoPullRequestReview) implementsGraphQLInterfaceReactionsInfo()        {}
func (v *ReactionsInfoPullRequestReviewComment) implementsGraphQLInterfaceReactionsInfo() {}
func (v *ReactionsInfoRelease) implementsGraphQLInterfaceReactionsInfo()                  {}
func (v *ReactionsInfoTeamDiscussion) implementsGraphQLInterfaceReactionsInfo()           {}
func (v *ReactionsInfoTeamDiscussionComment) implementsGraphQLInterfaceReactionsInfo()    {}

func __unmarshalReactionsInfo(b []byte, v *ReactionsInfo) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CommitComment":
		*v = new(ReactionsInfoCommitComment)
		return json.Unmarshal(b, *v)
	case "Discussion":
		*v = new(ReactionsInfoDiscussion)
		return json.Unmarshal(b, *v)
	case "DiscussionComment":
		*v = new(ReactionsInfoDiscussionComment)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(ReactionsInfoIssue)
		return json.Unmarshal(b, *v)
	case "IssueComment":
		*v = new(ReactionsInfoIssueComment)
		return json.Unmarshal(b, *v)
	case "PullRequest":
		*v = new(ReactionsInfoPullRequest)
		return json.Unmarshal(b, *v)
	case "PullRequestReview":
		*v = new(ReactionsInfoPullRequestReview)
		return json.Unmarshal(b, *v)
	case "PullRequestReviewComment":
		*v = new(ReactionsInfoPullRequestReviewComment)
		return json.Unmarshal(b, *v)
	case "Release":
		*v = new(ReactionsInfoRelease)
		return json.Unmarshal(b, *v)
	case "TeamDiscussion":
		*v = new(ReactionsInfoTeamDiscussion)
		return json.Unmarshal(b, *v)
	case "TeamDiscussionComment":
		*v = new(ReactionsInfoTeamDiscussionComment)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Reactable.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ReactionsInfo: "%v"`, tn.TypeName)
	}
}

func __marshalReactionsInfo(v *ReactionsInfo) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ReactionsInfoCommitComment:
		typename = "CommitComment"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoCommitComment
		}{typename, v}
		return json.Marshal(result)
	case *ReactionsInfoDiscussion:
		typename = "Discussion"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *ReactionsInfoDiscussionComment:
		typename = "DiscussionComment"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoDiscussionComment
		}{typename, v}
		return json.Marshal(result)
	case *ReactionsInfoIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoIssue
		}{typename, v}
		return json.Marshal(result)
	case *ReactionsInfoIssueComment:
		typename = "IssueComment"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoIssueComment
		}{typename, v}
		return json.Marshal(result)
	case *ReactionsInfoPullRequest:
		typename = "PullRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoPullRequest
		}{typename, v}
		return json.Marshal(result)
	case *ReactionsInfoPullRequestReview:
		typename = "PullRequestReview"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoPullRequestReview
		}{typename, v}
		return json.Marshal(result)
	case *ReactionsInfoPullRequestReviewComment:
		typename = "PullRequestReviewComment"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoPullRequestReviewComment
		}{typename, v}
		return json.Marshal(result)
	case *ReactionsInfoRelease:
		typename = "Release"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoRelease
		}{typename, v}
		return json.Marshal(result)
	case *ReactionsInfoTeamDiscussion:
		typename = "TeamDiscussion"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoTeamDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *ReactionsInfoTeamDiscussionComment:
		typename = "TeamDiscussionComment"

		result := struct {
			TypeName string `json:"__typename"`
			*ReactionsInfoTeamDiscussionComment
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ReactionsInfo: "%T"`, v)
	}
}

// ReactionsInfo includes the GraphQL fields of CommitComment requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoCommitComment struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoCommitComment.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoCommitComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReactionsInfo includes the GraphQL fields of Discussion requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoDiscussion struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoDiscussion.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoDiscussion) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReactionsInfo includes the GraphQL fields of DiscussionComment requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoDiscussionComment struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoDiscussionComment.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoDiscussionComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReactionsInfo includes the GraphQL fields of Issue requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoIssue struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoIssue.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoIssue) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReactionsInfo includes the GraphQL fields of IssueComment requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoIssueComment struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoIssueComment.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoIssueComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReactionsInfo includes the GraphQL fields of PullRequest requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoPullRequest struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoPullRequest.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoPullRequest) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReactionsInfo includes the GraphQL fields of PullRequestReview requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoPullRequestReview struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoPullRequestReview.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoPullRequestReview) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReactionsInfo includes the GraphQL fields of PullRequestReviewComment requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoPullRequestReviewComment struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoPullRequestReviewComment.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoPullRequestReviewComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReactionsInfoReactionsReactionConnection includes the requested fields of the GraphQL type ReactionConnection.
// The GraphQL type's documentation follows.
//
// A list of reactions that have been left on the subject.
type ReactionsInfoReactionsReactionConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of nodes.
	Nodes []*ReactionsInfoReactionsReactionConnectionNodesReaction `json:"nodes"`
}

// GetTotalCount returns ReactionsInfoReactionsReactionConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ReactionsInfoReactionsReactionConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns ReactionsInfoReactionsReactionConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ReactionsInfoReactionsReactionConnection) GetNodes() []*ReactionsInfoReactionsReactionConnectionNodesReaction {
	return v.Nodes
}

// ReactionsInfoReactionsReactionConnectionNodesReaction includes the requested fields of the GraphQL type Reaction.
// The GraphQL type's documentation follows.
//
// An emoji reaction to a particular piece of content.
type ReactionsInfoReactionsReactionConnectionNodesReaction struct {
	// Identifies the emoji reaction.
	Content ReactionContent `json:"content"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
	// Identifies the user who created this reaction.
	User *ReactionsInfoReactionsReactionConnectionNodesReactionUser `json:"user"`
}

// GetContent returns ReactionsInfoReactionsReactionConnectionNodesReaction.Content, and is useful for accessing the field via an interface.
func (v *ReactionsInfoReactionsReactionConnectionNodesReaction) GetContent() ReactionContent {
	return v.Content
}

// GetCreatedAt returns ReactionsInfoReactionsReactionConnectionNodesReaction.CreatedAt, and is useful for accessing the field via an interface.
func (v *ReactionsInfoReactionsReactionConnectionNodesReaction) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUser returns ReactionsInfoReactionsReactionConnectionNodesReaction.User, and is useful for accessing the field via an interface.
func (v *ReactionsInfoReactionsReactionConnectionNodesReaction) GetUser() *ReactionsInfoReactionsReactionConnectionNodesReactionUser {
	return v.User
}

// ReactionsInfoReactionsReactionConnectionNodesReactionUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type ReactionsInfoReactionsReactionConnectionNodesReactionUser struct {
	UserInfoUser `json:"-"`
}

// GetDisplayName returns ReactionsInfoReactionsReactionConnectionNodesReactionUser.DisplayName, and is useful for accessing the field via an interface.
func (v *ReactionsInfoReactionsReactionConnectionNodesReactionUser) GetDisplayName() string {
	return v.UserInfoUser.DisplayName
}

func (v *ReactionsInfoReactionsReactionConnectionNodesReactionUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReactionsInfoReactionsReactionConnectionNodesReactionUser
		graphql.NoUnmarshalJSON
	}
	firstPass.ReactionsInfoReactionsReactionConnectionNodesReactionUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInfoUser)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReactionsInfoReactionsReactionConnectionNodesReactionUser struct {
	DisplayName string `json:"displayName"`
}

func (v *ReactionsInfoReactionsReactionConnectionNodesReactionUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReactionsInfoReactionsReactionConnectionNodesReactionUser) __premarshalJSON() (*__premarshalReactionsInfoReactionsReactionConnectionNodesReactionUser, error) {
	var retval __premarshalReactionsInfoReactionsReactionConnectionNodesReactionUser

	retval.DisplayName = v.UserInfoUser.DisplayName
	return &retval, nil
}

// ReactionsInfo includes the GraphQL fields of Release requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoRelease struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoRelease.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoRelease) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReactionsInfo includes the GraphQL fields of TeamDiscussion requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoTeamDiscussion struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoTeamDiscussion.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoTeamDiscussion) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReactionsInfo includes the GraphQL fields of TeamDiscussionComment requested by the fragment ReactionsInfo.
// The GraphQL type's documentation follows.
//
// Represents a subject that can be reacted on.
type ReactionsInfoTeamDiscussionComment struct {
	// A list of Reactions left on the Issue.
	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

// GetReactions returns ReactionsInfoTeamDiscussionComment.Reactions, and is useful for accessing the field via an interface.
func (v *ReactionsInfoTeamDiscussionComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.Reactions
}

// ReviewInfo includes the GraphQL fields of PullRequestReview requested by the fragment ReviewInfo.
// The GraphQL type's documentation follows.
//
// A review object for a given pull request.
type ReviewInfo struct {
	CommonCommentInfoPullRequestReview `json:"-"`
	// Identifies the current state of the pull request review.
	State PullRequestReviewState `json:"state"`
}

// GetState returns ReviewInfo.State, and is useful for accessing the field via an interface.
func (v *ReviewInfo) GetState() PullRequestReviewState { return v.State }

// GetId returns ReviewInfo.Id, and is useful for accessing the field via an interface.
func (v *ReviewInfo) GetId() string { return v.CommonCommentInfoPullRequestReview.Id }

// GetAuthor returns ReviewInfo.Author, and is useful for accessing the field via an interface.
func (v *ReviewInfo) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommonCommentInfoPullRequestReview.Author
}

// GetRaw returns ReviewInfo.Raw, and is useful for accessing the field via an interface.
func (v *ReviewInfo) GetRaw() string { return v.CommonCommentInfoPullRequestReview.Raw }

// GetBodyText returns ReviewInfo.BodyText, and is useful for accessing the field via an interface.
func (v *ReviewInfo) GetBodyText() string { return v.CommonCommentInfoPullRequestReview.BodyText }

// GetBodyHTML returns ReviewInfo.BodyHTML, and is useful for accessing the field via an interface.
func (v *ReviewInfo) GetBodyHTML() string { return v.CommonCommentInfoPullRequestReview.BodyHTML }

// GetCreatedAt returns ReviewInfo.CreatedAt, and is useful for accessing the field via an interface.
func (v *ReviewInfo) GetCreatedAt() time.Time { return v.CommonCommentInfoPullRequestReview.CreatedAt }

func (v *ReviewInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReviewInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.ReviewInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonCommentInfoPullRequestReview)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReviewInfo struct {
	State PullRequestReviewState `json:"state"`

	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *ReviewInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReviewInfo) __premarshalJSON() (*__premarshalReviewInfo, error) {
	var retval __premarshalReviewInfo

	retval.State = v.State
	retval.Id = v.CommonCommentInfoPullRequestReview.Id
	{

		dst := &retval.Author
		src := v.CommonCommentInfoPullRequestReview.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal ReviewInfo.CommonCommentInfoPullRequestReview.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommonCommentInfoPullRequestReview.Raw
	retval.BodyText = v.CommonCommentInfoPullRequestReview.BodyText
	retval.BodyHTML = v.CommonCommentInfoPullRequestReview.BodyHTML
	retval.CreatedAt = v.CommonCommentInfoPullRequestReview.CreatedAt
	return &retval, nil
}

// StatusContextCase includes the GraphQL fields of StatusContext requested by the fragment StatusContextCase.
// The GraphQL type's documentation follows.
//
// Represents an individual commit status context
type StatusContextCase struct {
	// The name of this status context.
	Context string `json:"context"`
	// The state of this status context.
	State StatusState `json:"state"`
	// The URL for this status context.
	TargetUrl *string `json:"targetUrl"`
}

// GetContext returns StatusContextCase.Context, and is useful for accessing the field via an interface.
func (v *StatusContextCase) GetContext() string { return v.Context }

// GetState returns StatusContextCase.State, and is useful for accessing the field via an interface.
func (v *StatusContextCase) GetState() StatusState { return v.State }

// GetTargetUrl returns StatusContextCase.TargetUrl, and is useful for accessing the field via an interface.
func (v *StatusContextCase) GetTargetUrl() *string { return v.TargetUrl }

// The possible commit status states.
type StatusState string

const (
	// Status is errored.
	StatusStateError StatusState = "ERROR"
	// Status is expected.
	StatusStateExpected StatusState = "EXPECTED"
	// Status is failing.
	StatusStateFailure StatusState = "FAILURE"
	// Status is pending.
	StatusStatePending StatusState = "PENDING"
	// Status is successful.
	StatusStateSuccess StatusState = "SUCCESS"
)

// UserInfo includes the GraphQL fields of Actor requested by the fragment UserInfo.
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
//
// UserInfo is implemented by the following types:
// UserInfoBot
// UserInfoEnterpriseUserAccount
// UserInfoMannequin
// UserInfoOrganization
// UserInfoUser
type UserInfo interface {
	implementsGraphQLInterfaceUserInfo()
	// GetDisplayName returns the interface-field "login" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The username of the actor.
	GetDisplayName() string
}

func (v *UserInfoBot) implementsGraphQLInterfaceUserInfo()                   {}
func (v *UserInfoEnterpriseUserAccount) implementsGraphQLInterfaceUserInfo() {}
func (v *UserInfoMannequin) implementsGraphQLInterfaceUserInfo()             {}
func (v *UserInfoOrganization) implementsGraphQLInterfaceUserInfo()          {}
func (v *UserInfoUser) implementsGraphQLInterfaceUserInfo()                  {}

func __unmarshalUserInfo(b []byte, v *UserInfo) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Bot":
		*v = new(UserInfoBot)
		return json.Unmarshal(b, *v)
	case "EnterpriseUserAccount":
		*v = new(UserInfoEnterpriseUserAccount)
		return json.Unmarshal(b, *v)
	case "Mannequin":
		*v = new(UserInfoMannequin)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(UserInfoOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(UserInfoUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Actor.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UserInfo: "%v"`, tn.TypeName)
	}
}

func __marshalUserInfo(v *UserInfo) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UserInfoBot:
		typename = "Bot"

		result := struct {
			TypeName string `json:"__typename"`
			*UserInfoBot
		}{typename, v}
		return json.Marshal(result)
	case *UserInfoEnterpriseUserAccount:
		typename = "EnterpriseUserAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*UserInfoEnterpriseUserAccount
		}{typename, v}
		return json.Marshal(result)
	case *UserInfoMannequin:
		typename = "Mannequin"

		result := struct {
			TypeName string `json:"__typename"`
			*UserInfoMannequin
		}{typename, v}
		return json.Marshal(result)
	case *UserInfoOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*UserInfoOrganization
		}{typename, v}
		return json.Marshal(result)
	case *UserInfoUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*UserInfoUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UserInfo: "%T"`, v)
	}
}

// UserInfo includes the GraphQL fields of Bot requested by the fragment UserInfo.
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
type UserInfoBot struct {
	// The username of the actor.
	DisplayName string `json:"displayName"`
}

// GetDisplayName returns UserInfoBot.DisplayName, and is useful for accessing the field via an interface.
func (v *UserInfoBot) GetDisplayName() string { return v.DisplayName }

// UserInfo includes the GraphQL fields of EnterpriseUserAccount requested by the fragment UserInfo.
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
type UserInfoEnterpriseUserAccount struct {
	// The username of the actor.
	DisplayName string `json:"displayName"`
}

// GetDisplayName returns UserInfoEnterpriseUserAccount.DisplayName, and is useful for accessing the field via an interface.
func (v *UserInfoEnterpriseUserAccount) GetDisplayName() string { return v.DisplayName }

// UserInfo includes the GraphQL fields of Mannequin requested by the fragment UserInfo.
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
type UserInfoMannequin struct {
	// The username of the actor.
	DisplayName string `json:"displayName"`
}

// GetDisplayName returns UserInfoMannequin.DisplayName, and is useful for accessing the field via an interface.
func (v *UserInfoMannequin) GetDisplayName() string { return v.DisplayName }

// UserInfo includes the GraphQL fields of Organization requested by the fragment UserInfo.
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
type UserInfoOrganization struct {
	// The username of the actor.
	DisplayName string `json:"displayName"`
}

// GetDisplayName returns UserInfoOrganization.DisplayName, and is useful for accessing the field via an interface.
func (v *UserInfoOrganization) GetDisplayName() string { return v.DisplayName }

// UserInfo includes the GraphQL fields of User requested by the fragment UserInfo.
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
type UserInfoUser struct {
	// The username of the actor.
	DisplayName string `json:"displayName"`
}

// GetDisplayName returns UserInfoUser.DisplayName, and is useful for accessing the field via an interface.
func (v *UserInfoUser) GetDisplayName() string { return v.DisplayName }

// __GetChecksAndStatusInput is used internally by genqlient
type __GetChecksAndStatusInput struct {
	Name   string `json:"name"`
	Owner  string `json:"owner"`
	Number int    `json:"number"`
}

// GetName returns __GetChecksAndStatusInput.Name, and is useful for accessing the field via an interface.
func (v *__GetChecksAndStatusInput) GetName() string { return v.Name }

// GetOwner returns __GetChecksAndStatusInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetChecksAndStatusInput) GetOwner() string { return v.Owner }

// GetNumber returns __GetChecksAndStatusInput.Number, and is useful for accessing the field via an interface.
func (v *__GetChecksAndStatusInput) GetNumber() int { return v.Number }

// __PullRequestsListInput is used internally by genqlient
type __PullRequestsListInput struct {
	Name   string `json:"name"`
	Owner  string `json:"owner"`
	Number int    `json:"number"`
}

// GetName returns __PullRequestsListInput.Name, and is useful for accessing the field via an interface.
func (v *__PullRequestsListInput) GetName() string { return v.Name }

// GetOwner returns __PullRequestsListInput.Owner, and is useful for accessing the field via an interface.
func (v *__PullRequestsListInput) GetOwner() string { return v.Owner }

// GetNumber returns __PullRequestsListInput.Number, and is useful for accessing the field via an interface.
func (v *__PullRequestsListInput) GetNumber() int { return v.Number }

// __cancelReviewInput is used internally by genqlient
type __cancelReviewInput struct {
	RevId string `json:"revId"`
}

// GetRevId returns __cancelReviewInput.RevId, and is useful for accessing the field via an interface.
func (v *__cancelReviewInput) GetRevId() string { return v.RevId }

// __closeReviewInput is used internally by genqlient
type __closeReviewInput struct {
	RevId string `json:"revId"`
}

// GetRevId returns __closeReviewInput.RevId, and is useful for accessing the field via an interface.
func (v *__closeReviewInput) GetRevId() string { return v.RevId }

// __closeReviewWithEventInput is used internally by genqlient
type __closeReviewWithEventInput struct {
	RevId   string                 `json:"revId"`
	Event   PullRequestReviewEvent `json:"event"`
	Comment *string                `json:"comment"`
}

// GetRevId returns __closeReviewWithEventInput.RevId, and is useful for accessing the field via an interface.
func (v *__closeReviewWithEventInput) GetRevId() string { return v.RevId }

// GetEvent returns __closeReviewWithEventInput.Event, and is useful for accessing the field via an interface.
func (v *__closeReviewWithEventInput) GetEvent() PullRequestReviewEvent { return v.Event }

// GetComment returns __closeReviewWithEventInput.Comment, and is useful for accessing the field via an interface.
func (v *__closeReviewWithEventInput) GetComment() *string { return v.Comment }

// __createLabelInput is used internally by genqlient
type __createLabelInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Color       string  `json:"color"`
	RepoId      string  `json:"repoId"`
}

// GetName returns __createLabelInput.Name, and is useful for accessing the field via an interface.
func (v *__createLabelInput) GetName() string { return v.Name }

// GetDescription returns __createLabelInput.Description, and is useful for accessing the field via an interface.
func (v *__createLabelInput) GetDescription() *string { return v.Description }

// GetColor returns __createLabelInput.Color, and is useful for accessing the field via an interface.
func (v *__createLabelInput) GetColor() string { return v.Color }

// GetRepoId returns __createLabelInput.RepoId, and is useful for accessing the field via an interface.
func (v *__createLabelInput) GetRepoId() string { return v.RepoId }

// __createPullRequestInput is used internally by genqlient
type __createPullRequestInput struct {
	RepoId      string  `json:"repoId"`
	BranchName  string  `json:"branchName"`
	BaseBranch  string  `json:"baseBranch"`
	Title       string  `json:"title"`
	Description *string `json:"description"`
}

// GetRepoId returns __createPullRequestInput.RepoId, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetRepoId() string { return v.RepoId }

// GetBranchName returns __createPullRequestInput.BranchName, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetBranchName() string { return v.BranchName }

// GetBaseBranch returns __createPullRequestInput.BaseBranch, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetBaseBranch() string { return v.BaseBranch }

// GetTitle returns __createPullRequestInput.Title, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetTitle() string { return v.Title }

// GetDescription returns __createPullRequestInput.Description, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetDescription() *string { return v.Description }

// __currentPendingReviewInput is used internally by genqlient
type __currentPendingReviewInput struct {
	PrId   string  `json:"prId"`
	Author *string `json:"author"`
}

// GetPrId returns __currentPendingReviewInput.PrId, and is useful for accessing the field via an interface.
func (v *__currentPendingReviewInput) GetPrId() string { return v.PrId }

// GetAuthor returns __currentPendingReviewInput.Author, and is useful for accessing the field via an interface.
func (v *__currentPendingReviewInput) GetAuthor() *string { return v.Author }

// __editPullRequestInput is used internally by genqlient
type __editPullRequestInput struct {
	Id     string   `json:"id"`
	Labels []string `json:"labels"`
}

// GetId returns __editPullRequestInput.Id, and is useful for accessing the field via an interface.
func (v *__editPullRequestInput) GetId() string { return v.Id }

// GetLabels returns __editPullRequestInput.Labels, and is useful for accessing the field via an interface.
func (v *__editPullRequestInput) GetLabels() []string { return v.Labels }

// __editPullRequestReviewersInput is used internally by genqlient
type __editPullRequestReviewersInput struct {
	Id        string   `json:"id"`
	Reviewers []string `json:"reviewers"`
}

// GetId returns __editPullRequestReviewersInput.Id, and is useful for accessing the field via an interface.
func (v *__editPullRequestReviewersInput) GetId() string { return v.Id }

// GetReviewers returns __editPullRequestReviewersInput.Reviewers, and is useful for accessing the field via an interface.
func (v *__editPullRequestReviewersInput) GetReviewers() []string { return v.Reviewers }

// __getLabelByNameInput is used internally by genqlient
type __getLabelByNameInput struct {
	Label string `json:"label"`
	Owner string `json:"owner"`
	Repo  string `json:"repo"`
}

// GetLabel returns __getLabelByNameInput.Label, and is useful for accessing the field via an interface.
func (v *__getLabelByNameInput) GetLabel() string { return v.Label }

// GetOwner returns __getLabelByNameInput.Owner, and is useful for accessing the field via an interface.
func (v *__getLabelByNameInput) GetOwner() string { return v.Owner }

// GetRepo returns __getLabelByNameInput.Repo, and is useful for accessing the field via an interface.
func (v *__getLabelByNameInput) GetRepo() string { return v.Repo }

// __getUserIdByLoginInput is used internally by genqlient
type __getUserIdByLoginInput struct {
	Login string `json:"login"`
}

// GetLogin returns __getUserIdByLoginInput.Login, and is useful for accessing the field via an interface.
func (v *__getUserIdByLoginInput) GetLogin() string { return v.Login }

// __mergePullRequestInput is used internally by genqlient
type __mergePullRequestInput struct {
	PrId string `json:"prId"`
}

// GetPrId returns __mergePullRequestInput.PrId, and is useful for accessing the field via an interface.
func (v *__mergePullRequestInput) GetPrId() string { return v.PrId }

// __newReviewInput is used internally by genqlient
type __newReviewInput struct {
	PrId string `json:"prId"`
}

// GetPrId returns __newReviewInput.PrId, and is useful for accessing the field via an interface.
func (v *__newReviewInput) GetPrId() string { return v.PrId }

// __pullRequestCommentsInput is used internally by genqlient
type __pullRequestCommentsInput struct {
	Number       int     `json:"number"`
	Owner        string  `json:"owner"`
	Name         string  `json:"name"`
	CommentAfter *string `json:"commentAfter"`
}

// GetNumber returns __pullRequestCommentsInput.Number, and is useful for accessing the field via an interface.
func (v *__pullRequestCommentsInput) GetNumber() int { return v.Number }

// GetOwner returns __pullRequestCommentsInput.Owner, and is useful for accessing the field via an interface.
func (v *__pullRequestCommentsInput) GetOwner() string { return v.Owner }

// GetName returns __pullRequestCommentsInput.Name, and is useful for accessing the field via an interface.
func (v *__pullRequestCommentsInput) GetName() string { return v.Name }

// GetCommentAfter returns __pullRequestCommentsInput.CommentAfter, and is useful for accessing the field via an interface.
func (v *__pullRequestCommentsInput) GetCommentAfter() *string { return v.CommentAfter }

// __pullRequestThreadsInput is used internally by genqlient
type __pullRequestThreadsInput struct {
	Number       int     `json:"number"`
	Owner        string  `json:"owner"`
	Name         string  `json:"name"`
	CommentAfter *string `json:"commentAfter"`
}

// GetNumber returns __pullRequestThreadsInput.Number, and is useful for accessing the field via an interface.
func (v *__pullRequestThreadsInput) GetNumber() int { return v.Number }

// GetOwner returns __pullRequestThreadsInput.Owner, and is useful for accessing the field via an interface.
func (v *__pullRequestThreadsInput) GetOwner() string { return v.Owner }

// GetName returns __pullRequestThreadsInput.Name, and is useful for accessing the field via an interface.
func (v *__pullRequestThreadsInput) GetName() string { return v.Name }

// GetCommentAfter returns __pullRequestThreadsInput.CommentAfter, and is useful for accessing the field via an interface.
func (v *__pullRequestThreadsInput) GetCommentAfter() *string { return v.CommentAfter }

// __replyToInput is used internally by genqlient
type __replyToInput struct {
	RevId     string `json:"revId"`
	CommentId string `json:"commentId"`
	Body      string `json:"body"`
}

// GetRevId returns __replyToInput.RevId, and is useful for accessing the field via an interface.
func (v *__replyToInput) GetRevId() string { return v.RevId }

// GetCommentId returns __replyToInput.CommentId, and is useful for accessing the field via an interface.
func (v *__replyToInput) GetCommentId() string { return v.CommentId }

// GetBody returns __replyToInput.Body, and is useful for accessing the field via an interface.
func (v *__replyToInput) GetBody() string { return v.Body }

// __repositoryIdInput is used internally by genqlient
type __repositoryIdInput struct {
	Owner string `json:"owner"`
	Name  string `json:"name"`
}

// GetOwner returns __repositoryIdInput.Owner, and is useful for accessing the field via an interface.
func (v *__repositoryIdInput) GetOwner() string { return v.Owner }

// GetName returns __repositoryIdInput.Name, and is useful for accessing the field via an interface.
func (v *__repositoryIdInput) GetName() string { return v.Name }

// __requestedReviewsInput is used internally by genqlient
type __requestedReviewsInput struct {
	PrQuery string  `json:"prQuery"`
	After   *string `json:"after"`
}

// GetPrQuery returns __requestedReviewsInput.PrQuery, and is useful for accessing the field via an interface.
func (v *__requestedReviewsInput) GetPrQuery() string { return v.PrQuery }

// GetAfter returns __requestedReviewsInput.After, and is useful for accessing the field via an interface.
func (v *__requestedReviewsInput) GetAfter() *string { return v.After }

// __searchLabelsInput is used internally by genqlient
type __searchLabelsInput struct {
	Query  string  `json:"query"`
	Owner  string  `json:"owner"`
	Repo   string  `json:"repo"`
	Cursor *string `json:"cursor"`
}

// GetQuery returns __searchLabelsInput.Query, and is useful for accessing the field via an interface.
func (v *__searchLabelsInput) GetQuery() string { return v.Query }

// GetOwner returns __searchLabelsInput.Owner, and is useful for accessing the field via an interface.
func (v *__searchLabelsInput) GetOwner() string { return v.Owner }

// GetRepo returns __searchLabelsInput.Repo, and is useful for accessing the field via an interface.
func (v *__searchLabelsInput) GetRepo() string { return v.Repo }

// GetCursor returns __searchLabelsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__searchLabelsInput) GetCursor() *string { return v.Cursor }

// __singleStatusInput is used internally by genqlient
type __singleStatusInput struct {
	Ids []string `json:"ids"`
}

// GetIds returns __singleStatusInput.Ids, and is useful for accessing the field via an interface.
func (v *__singleStatusInput) GetIds() []string { return v.Ids }

// cancelReviewDeletePullRequestReviewDeletePullRequestReviewPayload includes the requested fields of the GraphQL type DeletePullRequestReviewPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of DeletePullRequestReview
type cancelReviewDeletePullRequestReviewDeletePullRequestReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
}

// GetClientMutationId returns cancelReviewDeletePullRequestReviewDeletePullRequestReviewPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *cancelReviewDeletePullRequestReviewDeletePullRequestReviewPayload) GetClientMutationId() *string {
	return v.ClientMutationId
}

// cancelReviewResponse is returned by cancelReview on success.
type cancelReviewResponse struct {
	// Deletes a pull request review.
	DeletePullRequestReview *cancelReviewDeletePullRequestReviewDeletePullRequestReviewPayload `json:"deletePullRequestReview"`
}

// GetDeletePullRequestReview returns cancelReviewResponse.DeletePullRequestReview, and is useful for accessing the field via an interface.
func (v *cancelReviewResponse) GetDeletePullRequestReview() *cancelReviewDeletePullRequestReviewDeletePullRequestReviewPayload {
	return v.DeletePullRequestReview
}

// closeReviewResponse is returned by closeReview on success.
type closeReviewResponse struct {
	// Submits a pending pull request review.
	SubmitPullRequestReview *closeReviewSubmitPullRequestReviewSubmitPullRequestReviewPayload `json:"submitPullRequestReview"`
}

// GetSubmitPullRequestReview returns closeReviewResponse.SubmitPullRequestReview, and is useful for accessing the field via an interface.
func (v *closeReviewResponse) GetSubmitPullRequestReview() *closeReviewSubmitPullRequestReviewSubmitPullRequestReviewPayload {
	return v.SubmitPullRequestReview
}

// closeReviewSubmitPullRequestReviewSubmitPullRequestReviewPayload includes the requested fields of the GraphQL type SubmitPullRequestReviewPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of SubmitPullRequestReview
type closeReviewSubmitPullRequestReviewSubmitPullRequestReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
}

// GetClientMutationId returns closeReviewSubmitPullRequestReviewSubmitPullRequestReviewPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *closeReviewSubmitPullRequestReviewSubmitPullRequestReviewPayload) GetClientMutationId() *string {
	return v.ClientMutationId
}

// closeReviewWithEventResponse is returned by closeReviewWithEvent on success.
type closeReviewWithEventResponse struct {
	// Submits a pending pull request review.
	SubmitPullRequestReview *closeReviewWithEventSubmitPullRequestReviewSubmitPullRequestReviewPayload `json:"submitPullRequestReview"`
}

// GetSubmitPullRequestReview returns closeReviewWithEventResponse.SubmitPullRequestReview, and is useful for accessing the field via an interface.
func (v *closeReviewWithEventResponse) GetSubmitPullRequestReview() *closeReviewWithEventSubmitPullRequestReviewSubmitPullRequestReviewPayload {
	return v.SubmitPullRequestReview
}

// closeReviewWithEventSubmitPullRequestReviewSubmitPullRequestReviewPayload includes the requested fields of the GraphQL type SubmitPullRequestReviewPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of SubmitPullRequestReview
type closeReviewWithEventSubmitPullRequestReviewSubmitPullRequestReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
}

// GetClientMutationId returns closeReviewWithEventSubmitPullRequestReviewSubmitPullRequestReviewPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *closeReviewWithEventSubmitPullRequestReviewSubmitPullRequestReviewPayload) GetClientMutationId() *string {
	return v.ClientMutationId
}

// createLabelCreateLabelCreateLabelPayload includes the requested fields of the GraphQL type CreateLabelPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of CreateLabel
type createLabelCreateLabelCreateLabelPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
	// The new label.
	Label *createLabelCreateLabelCreateLabelPayloadLabel `json:"label"`
}

// GetClientMutationId returns createLabelCreateLabelCreateLabelPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayload) GetClientMutationId() *string {
	return v.ClientMutationId
}

// GetLabel returns createLabelCreateLabelCreateLabelPayload.Label, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayload) GetLabel() *createLabelCreateLabelCreateLabelPayloadLabel {
	return v.Label
}

// createLabelCreateLabelCreateLabelPayloadLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type createLabelCreateLabelCreateLabelPayloadLabel struct {
	LabelInfo `json:"-"`
}

// GetId returns createLabelCreateLabelCreateLabelPayloadLabel.Id, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayloadLabel) GetId() string { return v.LabelInfo.Id }

// GetColor returns createLabelCreateLabelCreateLabelPayloadLabel.Color, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayloadLabel) GetColor() string { return v.LabelInfo.Color }

// GetDescription returns createLabelCreateLabelCreateLabelPayloadLabel.Description, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayloadLabel) GetDescription() *string {
	return v.LabelInfo.Description
}

func (v *createLabelCreateLabelCreateLabelPayloadLabel) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createLabelCreateLabelCreateLabelPayloadLabel
		graphql.NoUnmarshalJSON
	}
	firstPass.createLabelCreateLabelCreateLabelPayloadLabel = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LabelInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateLabelCreateLabelCreateLabelPayloadLabel struct {
	Id string `json:"id"`

	Color string `json:"color"`

	Description *string `json:"description"`
}

func (v *createLabelCreateLabelCreateLabelPayloadLabel) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createLabelCreateLabelCreateLabelPayloadLabel) __premarshalJSON() (*__premarshalcreateLabelCreateLabelCreateLabelPayloadLabel, error) {
	var retval __premarshalcreateLabelCreateLabelCreateLabelPayloadLabel

	retval.Id = v.LabelInfo.Id
	retval.Color = v.LabelInfo.Color
	retval.Description = v.LabelInfo.Description
	return &retval, nil
}

// createLabelResponse is returned by createLabel on success.
type createLabelResponse struct {
	// Creates a new label.
	CreateLabel *createLabelCreateLabelCreateLabelPayload `json:"createLabel"`
}

// GetCreateLabel returns createLabelResponse.CreateLabel, and is useful for accessing the field via an interface.
func (v *createLabelResponse) GetCreateLabel() *createLabelCreateLabelCreateLabelPayload {
	return v.CreateLabel
}

// createPullRequestCreatePullRequestCreatePullRequestPayload includes the requested fields of the GraphQL type CreatePullRequestPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of CreatePullRequest
type createPullRequestCreatePullRequestCreatePullRequestPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
	// The new pull request.
	PullRequest *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest `json:"pullRequest"`
}

// GetClientMutationId returns createPullRequestCreatePullRequestCreatePullRequestPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayload) GetClientMutationId() *string {
	return v.ClientMutationId
}

// GetPullRequest returns createPullRequestCreatePullRequestCreatePullRequestPayload.PullRequest, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayload) GetPullRequest() *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest {
	return v.PullRequest
}

// createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest struct {
	singleStatusPullRequest `json:"-"`
}

// GetId returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.Id, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetId() string {
	return v.singleStatusPullRequest.Id
}

// GetNumber returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.Number, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetNumber() int {
	return v.singleStatusPullRequest.Number
}

// GetTitle returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.Title, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetTitle() string {
	return v.singleStatusPullRequest.Title
}

// GetState returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.State, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetState() PullRequestState {
	return v.singleStatusPullRequest.State
}

// GetRepository returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.Repository, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetRepository() singleStatusPullRequestRepository {
	return v.singleStatusPullRequest.Repository
}

// GetAuthor returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.Author, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetAuthor() *singleStatusPullRequestAuthorActor {
	return v.singleStatusPullRequest.Author
}

// GetBaseRefName returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.BaseRefName, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetBaseRefName() string {
	return v.singleStatusPullRequest.BaseRefName
}

// GetHeadRefName returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.HeadRefName, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetHeadRefName() string {
	return v.singleStatusPullRequest.HeadRefName
}

// GetReviews returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.Reviews, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetReviews() *singleStatusPullRequestReviewsPullRequestReviewConnection {
	return v.singleStatusPullRequest.Reviews
}

// GetReviewRequests returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.ReviewRequests, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetReviewRequests() *singleStatusPullRequestReviewRequestsReviewRequestConnection {
	return v.singleStatusPullRequest.ReviewRequests
}

// GetCommits returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.Commits, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetCommits() singleStatusPullRequestCommitsPullRequestCommitConnection {
	return v.singleStatusPullRequest.Commits
}

func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.singleStatusPullRequest)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreatePullRequestCreatePullRequestCreatePullRequestPayloadPullRequest struct {
	Id string `json:"id"`

	Number int `json:"number"`

	Title string `json:"title"`

	State PullRequestState `json:"state"`

	Repository singleStatusPullRequestRepository `json:"repository"`

	Author json.RawMessage `json:"author"`

	BaseRefName string `json:"baseRefName"`

	HeadRefName string `json:"headRefName"`

	Reviews *singleStatusPullRequestReviewsPullRequestReviewConnection `json:"reviews"`

	ReviewRequests *singleStatusPullRequestReviewRequestsReviewRequestConnection `json:"reviewRequests"`

	Commits singleStatusPullRequestCommitsPullRequestCommitConnection `json:"commits"`
}

func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) __premarshalJSON() (*__premarshalcreatePullRequestCreatePullRequestCreatePullRequestPayloadPullRequest, error) {
	var retval __premarshalcreatePullRequestCreatePullRequestCreatePullRequestPayloadPullRequest

	retval.Id = v.singleStatusPullRequest.Id
	retval.Number = v.singleStatusPullRequest.Number
	retval.Title = v.singleStatusPullRequest.Title
	retval.State = v.singleStatusPullRequest.State
	retval.Repository = v.singleStatusPullRequest.Repository
	{

		dst := &retval.Author
		src := v.singleStatusPullRequest.Author
		if src != nil {
			var err error
			*dst, err = __marshalsingleStatusPullRequestAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.singleStatusPullRequest.Author: %w", err)
			}
		}
	}
	retval.BaseRefName = v.singleStatusPullRequest.BaseRefName
	retval.HeadRefName = v.singleStatusPullRequest.HeadRefName
	retval.Reviews = v.singleStatusPullRequest.Reviews
	retval.ReviewRequests = v.singleStatusPullRequest.ReviewRequests
	retval.Commits = v.singleStatusPullRequest.Commits
	return &retval, nil
}

// createPullRequestResponse is returned by createPullRequest on success.
type createPullRequestResponse struct {
	// Create a new pull request
	CreatePullRequest *createPullRequestCreatePullRequestCreatePullRequestPayload `json:"createPullRequest"`
}

// GetCreatePullRequest returns createPullRequestResponse.CreatePullRequest, and is useful for accessing the field via an interface.
func (v *createPullRequestResponse) GetCreatePullRequest() *createPullRequestCreatePullRequestCreatePullRequestPayload {
	return v.CreatePullRequest
}

// currentPendingReviewNode includes the requested fields of the GraphQL interface Node.
//
// currentPendingReviewNode is implemented by the following types:
// currentPendingReviewNodeAddedToProjectEvent
// currentPendingReviewNodeApp
// currentPendingReviewNodeAssignedEvent
// currentPendingReviewNodeAutoMergeDisabledEvent
// currentPendingReviewNodeAutoMergeEnabledEvent
// currentPendingReviewNodeAutoRebaseEnabledEvent
// currentPendingReviewNodeAutoSquashEnabledEvent
// currentPendingReviewNodeAutomaticBaseChangeFailedEvent
// currentPendingReviewNodeAutomaticBaseChangeSucceededEvent
// currentPendingReviewNodeBaseRefChangedEvent
// currentPendingReviewNodeBaseRefDeletedEvent
// currentPendingReviewNodeBaseRefForcePushedEvent
// currentPendingReviewNodeBlob
// currentPendingReviewNodeBot
// currentPendingReviewNodeBranchProtectionRule
// currentPendingReviewNodeBypassForcePushAllowance
// currentPendingReviewNodeBypassPullRequestAllowance
// currentPendingReviewNodeCWE
// currentPendingReviewNodeCheckRun
// currentPendingReviewNodeCheckSuite
// currentPendingReviewNodeClosedEvent
// currentPendingReviewNodeCodeOfConduct
// currentPendingReviewNodeCommentDeletedEvent
// currentPendingReviewNodeCommit
// currentPendingReviewNodeCommitComment
// currentPendingReviewNodeCommitCommentThread
// currentPendingReviewNodeComparison
// currentPendingReviewNodeConnectedEvent
// currentPendingReviewNodeConvertToDraftEvent
// currentPendingReviewNodeConvertedNoteToIssueEvent
// currentPendingReviewNodeConvertedToDiscussionEvent
// currentPendingReviewNodeCrossReferencedEvent
// currentPendingReviewNodeDemilestonedEvent
// currentPendingReviewNodeDeployKey
// currentPendingReviewNodeDeployedEvent
// currentPendingReviewNodeDeployment
// currentPendingReviewNodeDeploymentEnvironmentChangedEvent
// currentPendingReviewNodeDeploymentReview
// currentPendingReviewNodeDeploymentStatus
// currentPendingReviewNodeDisconnectedEvent
// currentPendingReviewNodeDiscussion
// currentPendingReviewNodeDiscussionCategory
// currentPendingReviewNodeDiscussionComment
// currentPendingReviewNodeDiscussionPoll
// currentPendingReviewNodeDiscussionPollOption
// currentPendingReviewNodeDraftIssue
// currentPendingReviewNodeEnterprise
// currentPendingReviewNodeEnterpriseAdministratorInvitation
// currentPendingReviewNodeEnterpriseIdentityProvider
// currentPendingReviewNodeEnterpriseRepositoryInfo
// currentPendingReviewNodeEnterpriseServerInstallation
// currentPendingReviewNodeEnterpriseServerUserAccount
// currentPendingReviewNodeEnterpriseServerUserAccountEmail
// currentPendingReviewNodeEnterpriseServerUserAccountsUpload
// currentPendingReviewNodeEnterpriseUserAccount
// currentPendingReviewNodeEnvironment
// currentPendingReviewNodeExternalIdentity
// currentPendingReviewNodeGist
// currentPendingReviewNodeGistComment
// currentPendingReviewNodeHeadRefDeletedEvent
// currentPendingReviewNodeHeadRefForcePushedEvent
// currentPendingReviewNodeHeadRefRestoredEvent
// currentPendingReviewNodeIpAllowListEntry
// currentPendingReviewNodeIssue
// currentPendingReviewNodeIssueComment
// currentPendingReviewNodeLabel
// currentPendingReviewNodeLabeledEvent
// currentPendingReviewNodeLanguage
// currentPendingReviewNodeLicense
// currentPendingReviewNodeLinkedBranch
// currentPendingReviewNodeLockedEvent
// currentPendingReviewNodeMannequin
// currentPendingReviewNodeMarkedAsDuplicateEvent
// currentPendingReviewNodeMarketplaceCategory
// currentPendingReviewNodeMarketplaceListing
// currentPendingReviewNodeMembersCanDeleteReposClearAuditEntry
// currentPendingReviewNodeMembersCanDeleteReposDisableAuditEntry
// currentPendingReviewNodeMembersCanDeleteReposEnableAuditEntry
// currentPendingReviewNodeMentionedEvent
// currentPendingReviewNodeMergedEvent
// currentPendingReviewNodeMigrationSource
// currentPendingReviewNodeMilestone
// currentPendingReviewNodeMilestonedEvent
// currentPendingReviewNodeMovedColumnsInProjectEvent
// currentPendingReviewNodeOIDCProvider
// currentPendingReviewNodeOauthApplicationCreateAuditEntry
// currentPendingReviewNodeOrgAddBillingManagerAuditEntry
// currentPendingReviewNodeOrgAddMemberAuditEntry
// currentPendingReviewNodeOrgBlockUserAuditEntry
// currentPendingReviewNodeOrgConfigDisableCollaboratorsOnlyAuditEntry
// currentPendingReviewNodeOrgConfigEnableCollaboratorsOnlyAuditEntry
// currentPendingReviewNodeOrgCreateAuditEntry
// currentPendingReviewNodeOrgDisableOauthAppRestrictionsAuditEntry
// currentPendingReviewNodeOrgDisableSamlAuditEntry
// currentPendingReviewNodeOrgDisableTwoFactorRequirementAuditEntry
// currentPendingReviewNodeOrgEnableOauthAppRestrictionsAuditEntry
// currentPendingReviewNodeOrgEnableSamlAuditEntry
// currentPendingReviewNodeOrgEnableTwoFactorRequirementAuditEntry
// currentPendingReviewNodeOrgInviteMemberAuditEntry
// currentPendingReviewNodeOrgInviteToBusinessAuditEntry
// currentPendingReviewNodeOrgOauthAppAccessApprovedAuditEntry
// currentPendingReviewNodeOrgOauthAppAccessDeniedAuditEntry
// currentPendingReviewNodeOrgOauthAppAccessRequestedAuditEntry
// currentPendingReviewNodeOrgRemoveBillingManagerAuditEntry
// currentPendingReviewNodeOrgRemoveMemberAuditEntry
// currentPendingReviewNodeOrgRemoveOutsideCollaboratorAuditEntry
// currentPendingReviewNodeOrgRestoreMemberAuditEntry
// currentPendingReviewNodeOrgUnblockUserAuditEntry
// currentPendingReviewNodeOrgUpdateDefaultRepositoryPermissionAuditEntry
// currentPendingReviewNodeOrgUpdateMemberAuditEntry
// currentPendingReviewNodeOrgUpdateMemberRepositoryCreationPermissionAuditEntry
// currentPendingReviewNodeOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
// currentPendingReviewNodeOrganization
// currentPendingReviewNodeOrganizationIdentityProvider
// currentPendingReviewNodeOrganizationInvitation
// currentPendingReviewNodePackage
// currentPendingReviewNodePackageFile
// currentPendingReviewNodePackageTag
// currentPendingReviewNodePackageVersion
// currentPendingReviewNodePinnedDiscussion
// currentPendingReviewNodePinnedEvent
// currentPendingReviewNodePinnedIssue
// currentPendingReviewNodePrivateRepositoryForkingDisableAuditEntry
// currentPendingReviewNodePrivateRepositoryForkingEnableAuditEntry
// currentPendingReviewNodeProject
// currentPendingReviewNodeProjectCard
// currentPendingReviewNodeProjectColumn
// currentPendingReviewNodeProjectNext
// currentPendingReviewNodeProjectNextField
// currentPendingReviewNodeProjectNextItem
// currentPendingReviewNodeProjectNextItemFieldValue
// currentPendingReviewNodeProjectNextIterationField
// currentPendingReviewNodeProjectNextSingleSelectField
// currentPendingReviewNodeProjectV2
// currentPendingReviewNodeProjectV2Field
// currentPendingReviewNodeProjectV2Item
// currentPendingReviewNodeProjectV2ItemFieldDateValue
// currentPendingReviewNodeProjectV2ItemFieldIterationValue
// currentPendingReviewNodeProjectV2ItemFieldNumberValue
// currentPendingReviewNodeProjectV2ItemFieldSingleSelectValue
// currentPendingReviewNodeProjectV2ItemFieldTextValue
// currentPendingReviewNodeProjectV2IterationField
// currentPendingReviewNodeProjectV2SingleSelectField
// currentPendingReviewNodeProjectV2View
// currentPendingReviewNodeProjectView
// currentPendingReviewNodePublicKey
// currentPendingReviewNodePullRequest
// currentPendingReviewNodePullRequestCommit
// currentPendingReviewNodePullRequestCommitCommentThread
// currentPendingReviewNodePullRequestReview
// currentPendingReviewNodePullRequestReviewComment
// currentPendingReviewNodePullRequestReviewThread
// currentPendingReviewNodePullRequestThread
// currentPendingReviewNodePush
// currentPendingReviewNodePushAllowance
// currentPendingReviewNodeReaction
// currentPendingReviewNodeReadyForReviewEvent
// currentPendingReviewNodeRef
// currentPendingReviewNodeReferencedEvent
// currentPendingReviewNodeRelease
// currentPendingReviewNodeReleaseAsset
// currentPendingReviewNodeRemovedFromProjectEvent
// currentPendingReviewNodeRenamedTitleEvent
// currentPendingReviewNodeReopenedEvent
// currentPendingReviewNodeRepoAccessAuditEntry
// currentPendingReviewNodeRepoAddMemberAuditEntry
// currentPendingReviewNodeRepoAddTopicAuditEntry
// currentPendingReviewNodeRepoArchivedAuditEntry
// currentPendingReviewNodeRepoChangeMergeSettingAuditEntry
// currentPendingReviewNodeRepoConfigDisableAnonymousGitAccessAuditEntry
// currentPendingReviewNodeRepoConfigDisableCollaboratorsOnlyAuditEntry
// currentPendingReviewNodeRepoConfigDisableContributorsOnlyAuditEntry
// currentPendingReviewNodeRepoConfigDisableSockpuppetDisallowedAuditEntry
// currentPendingReviewNodeRepoConfigEnableAnonymousGitAccessAuditEntry
// currentPendingReviewNodeRepoConfigEnableCollaboratorsOnlyAuditEntry
// currentPendingReviewNodeRepoConfigEnableContributorsOnlyAuditEntry
// currentPendingReviewNodeRepoConfigEnableSockpuppetDisallowedAuditEntry
// currentPendingReviewNodeRepoConfigLockAnonymousGitAccessAuditEntry
// currentPendingReviewNodeRepoConfigUnlockAnonymousGitAccessAuditEntry
// currentPendingReviewNodeRepoCreateAuditEntry
// currentPendingReviewNodeRepoDestroyAuditEntry
// currentPendingReviewNodeRepoRemoveMemberAuditEntry
// currentPendingReviewNodeRepoRemoveTopicAuditEntry
// currentPendingReviewNodeRepository
// currentPendingReviewNodeRepositoryInvitation
// currentPendingReviewNodeRepositoryMigration
// currentPendingReviewNodeRepositoryTopic
// currentPendingReviewNodeRepositoryVisibilityChangeDisableAuditEntry
// currentPendingReviewNodeRepositoryVisibilityChangeEnableAuditEntry
// currentPendingReviewNodeRepositoryVulnerabilityAlert
// currentPendingReviewNodeReviewDismissalAllowance
// currentPendingReviewNodeReviewDismissedEvent
// currentPendingReviewNodeReviewRequest
// currentPendingReviewNodeReviewRequestRemovedEvent
// currentPendingReviewNodeReviewRequestedEvent
// currentPendingReviewNodeSavedReply
// currentPendingReviewNodeSecurityAdvisory
// currentPendingReviewNodeSponsorsActivity
// currentPendingReviewNodeSponsorsListing
// currentPendingReviewNodeSponsorsListingFeaturedItem
// currentPendingReviewNodeSponsorsTier
// currentPendingReviewNodeSponsorship
// currentPendingReviewNodeSponsorshipNewsletter
// currentPendingReviewNodeStatus
// currentPendingReviewNodeStatusCheckRollup
// currentPendingReviewNodeStatusContext
// currentPendingReviewNodeSubscribedEvent
// currentPendingReviewNodeTag
// currentPendingReviewNodeTeam
// currentPendingReviewNodeTeamAddMemberAuditEntry
// currentPendingReviewNodeTeamAddRepositoryAuditEntry
// currentPendingReviewNodeTeamChangeParentTeamAuditEntry
// currentPendingReviewNodeTeamDiscussion
// currentPendingReviewNodeTeamDiscussionComment
// currentPendingReviewNodeTeamRemoveMemberAuditEntry
// currentPendingReviewNodeTeamRemoveRepositoryAuditEntry
// currentPendingReviewNodeTopic
// currentPendingReviewNodeTransferredEvent
// currentPendingReviewNodeTree
// currentPendingReviewNodeUnassignedEvent
// currentPendingReviewNodeUnlabeledEvent
// currentPendingReviewNodeUnlockedEvent
// currentPendingReviewNodeUnmarkedAsDuplicateEvent
// currentPendingReviewNodeUnpinnedEvent
// currentPendingReviewNodeUnsubscribedEvent
// currentPendingReviewNodeUser
// currentPendingReviewNodeUserBlockedEvent
// currentPendingReviewNodeUserContentEdit
// currentPendingReviewNodeUserStatus
// currentPendingReviewNodeVerifiableDomain
// currentPendingReviewNodeWorkflow
// currentPendingReviewNodeWorkflowRun
// The GraphQL type's documentation follows.
//
// An object with an ID.
type currentPendingReviewNode interface {
	implementsGraphQLInterfacecurrentPendingReviewNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *currentPendingReviewNodeAddedToProjectEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeApp) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeAssignedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeAutoMergeDisabledEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeAutoMergeEnabledEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeAutoRebaseEnabledEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeAutoSquashEnabledEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeAutomaticBaseChangeFailedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeAutomaticBaseChangeSucceededEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeBaseRefChangedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeBaseRefDeletedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeBaseRefForcePushedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeBlob) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeBot) implementsGraphQLInterfacecurrentPendingReviewNode()  {}
func (v *currentPendingReviewNodeBranchProtectionRule) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeBypassForcePushAllowance) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeBypassPullRequestAllowance) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeCWE) implementsGraphQLInterfacecurrentPendingReviewNode()         {}
func (v *currentPendingReviewNodeCheckRun) implementsGraphQLInterfacecurrentPendingReviewNode()    {}
func (v *currentPendingReviewNodeCheckSuite) implementsGraphQLInterfacecurrentPendingReviewNode()  {}
func (v *currentPendingReviewNodeClosedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeCodeOfConduct) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeCommentDeletedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeCommit) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeCommitComment) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeCommitCommentThread) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeComparison) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeConnectedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeConvertToDraftEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeConvertedNoteToIssueEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeConvertedToDiscussionEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeCrossReferencedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDemilestonedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDeployKey) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeDeployedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDeployment) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeDeploymentEnvironmentChangedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDeploymentReview) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDeploymentStatus) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDisconnectedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDiscussion) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeDiscussionCategory) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDiscussionComment) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDiscussionPoll) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDiscussionPollOption) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeDraftIssue) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeEnterprise) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeEnterpriseAdministratorInvitation) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeEnterpriseIdentityProvider) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeEnterpriseRepositoryInfo) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeEnterpriseServerInstallation) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeEnterpriseServerUserAccount) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeEnterpriseServerUserAccountEmail) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeEnterpriseServerUserAccountsUpload) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeEnterpriseUserAccount) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeEnvironment) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeExternalIdentity) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeGist) implementsGraphQLInterfacecurrentPendingReviewNode()        {}
func (v *currentPendingReviewNodeGistComment) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeHeadRefDeletedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeHeadRefForcePushedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeHeadRefRestoredEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeIpAllowListEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeIssue) implementsGraphQLInterfacecurrentPendingReviewNode()        {}
func (v *currentPendingReviewNodeIssueComment) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeLabel) implementsGraphQLInterfacecurrentPendingReviewNode()        {}
func (v *currentPendingReviewNodeLabeledEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeLanguage) implementsGraphQLInterfacecurrentPendingReviewNode()     {}
func (v *currentPendingReviewNodeLicense) implementsGraphQLInterfacecurrentPendingReviewNode()      {}
func (v *currentPendingReviewNodeLinkedBranch) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeLockedEvent) implementsGraphQLInterfacecurrentPendingReviewNode()  {}
func (v *currentPendingReviewNodeMannequin) implementsGraphQLInterfacecurrentPendingReviewNode()    {}
func (v *currentPendingReviewNodeMarkedAsDuplicateEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeMarketplaceCategory) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeMarketplaceListing) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeMembersCanDeleteReposClearAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeMembersCanDeleteReposDisableAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeMembersCanDeleteReposEnableAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeMentionedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeMergedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeMigrationSource) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeMilestone) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeMilestonedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeMovedColumnsInProjectEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOIDCProvider) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeOauthApplicationCreateAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgAddBillingManagerAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgAddMemberAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgBlockUserAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgConfigDisableCollaboratorsOnlyAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgConfigEnableCollaboratorsOnlyAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgCreateAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgDisableOauthAppRestrictionsAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgDisableSamlAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgDisableTwoFactorRequirementAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgEnableOauthAppRestrictionsAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgEnableSamlAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgEnableTwoFactorRequirementAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgInviteMemberAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgInviteToBusinessAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgOauthAppAccessApprovedAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgOauthAppAccessDeniedAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgOauthAppAccessRequestedAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgRemoveBillingManagerAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgRemoveMemberAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgRemoveOutsideCollaboratorAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgRestoreMemberAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgUnblockUserAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgUpdateDefaultRepositoryPermissionAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgUpdateMemberAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgUpdateMemberRepositoryCreationPermissionAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrgUpdateMemberRepositoryInvitationPermissionAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrganization) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeOrganizationIdentityProvider) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeOrganizationInvitation) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodePackage) implementsGraphQLInterfacecurrentPendingReviewNode()     {}
func (v *currentPendingReviewNodePackageFile) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodePackageTag) implementsGraphQLInterfacecurrentPendingReviewNode()  {}
func (v *currentPendingReviewNodePackageVersion) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodePinnedDiscussion) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodePinnedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodePinnedIssue) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodePrivateRepositoryForkingDisableAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodePrivateRepositoryForkingEnableAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProject) implementsGraphQLInterfacecurrentPendingReviewNode()     {}
func (v *currentPendingReviewNodeProjectCard) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeProjectColumn) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectNext) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeProjectNextField) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectNextItem) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectNextItemFieldValue) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectNextIterationField) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectNextSingleSelectField) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectV2) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeProjectV2Field) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectV2Item) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectV2ItemFieldDateValue) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectV2ItemFieldIterationValue) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectV2ItemFieldNumberValue) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectV2ItemFieldSingleSelectValue) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectV2ItemFieldTextValue) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectV2IterationField) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectV2SingleSelectField) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectV2View) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeProjectView) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodePublicKey) implementsGraphQLInterfacecurrentPendingReviewNode()   {}
func (v *currentPendingReviewNodePullRequest) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodePullRequestCommit) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodePullRequestCommitCommentThread) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodePullRequestReview) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodePullRequestReviewComment) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodePullRequestReviewThread) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodePullRequestThread) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodePush) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodePushAllowance) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeReaction) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeReadyForReviewEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRef) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeReferencedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRelease) implementsGraphQLInterfacecurrentPendingReviewNode()      {}
func (v *currentPendingReviewNodeReleaseAsset) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeRemovedFromProjectEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRenamedTitleEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeReopenedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoAccessAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoAddMemberAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoAddTopicAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoArchivedAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoChangeMergeSettingAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoConfigDisableAnonymousGitAccessAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoConfigDisableCollaboratorsOnlyAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoConfigDisableContributorsOnlyAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoConfigDisableSockpuppetDisallowedAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoConfigEnableAnonymousGitAccessAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoConfigEnableCollaboratorsOnlyAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoConfigEnableContributorsOnlyAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoConfigEnableSockpuppetDisallowedAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoConfigLockAnonymousGitAccessAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoConfigUnlockAnonymousGitAccessAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoCreateAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoDestroyAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoRemoveMemberAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepoRemoveTopicAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepository) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeRepositoryInvitation) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepositoryMigration) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepositoryTopic) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepositoryVisibilityChangeDisableAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepositoryVisibilityChangeEnableAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeRepositoryVulnerabilityAlert) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeReviewDismissalAllowance) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeReviewDismissedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeReviewRequest) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeReviewRequestRemovedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeReviewRequestedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeSavedReply) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeSecurityAdvisory) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeSponsorsActivity) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeSponsorsListing) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeSponsorsListingFeaturedItem) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeSponsorsTier) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeSponsorship) implementsGraphQLInterfacecurrentPendingReviewNode()  {}
func (v *currentPendingReviewNodeSponsorshipNewsletter) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeStatus) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeStatusCheckRollup) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeStatusContext) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeSubscribedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeTag) implementsGraphQLInterfacecurrentPendingReviewNode()  {}
func (v *currentPendingReviewNodeTeam) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeTeamAddMemberAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeTeamAddRepositoryAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeTeamChangeParentTeamAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeTeamDiscussion) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeTeamDiscussionComment) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeTeamRemoveMemberAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeTeamRemoveRepositoryAuditEntry) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeTopic) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeTransferredEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeTree) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeUnassignedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeUnlabeledEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeUnlockedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeUnmarkedAsDuplicateEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeUnpinnedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeUnsubscribedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeUser) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeUserBlockedEvent) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeUserContentEdit) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeUserStatus) implementsGraphQLInterfacecurrentPendingReviewNode() {}
func (v *currentPendingReviewNodeVerifiableDomain) implementsGraphQLInterfacecurrentPendingReviewNode() {
}
func (v *currentPendingReviewNodeWorkflow) implementsGraphQLInterfacecurrentPendingReviewNode()    {}
func (v *currentPendingReviewNodeWorkflowRun) implementsGraphQLInterfacecurrentPendingReviewNode() {}

func __unmarshalcurrentPendingReviewNode(b []byte, v *currentPendingReviewNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddedToProjectEvent":
		*v = new(currentPendingReviewNodeAddedToProjectEvent)
		return json.Unmarshal(b, *v)
	case "App":
		*v = new(currentPendingReviewNodeApp)
		return json.Unmarshal(b, *v)
	case "AssignedEvent":
		*v = new(currentPendingReviewNodeAssignedEvent)
		return json.Unmarshal(b, *v)
	case "AutoMergeDisabledEvent":
		*v = new(currentPendingReviewNodeAutoMergeDisabledEvent)
		return json.Unmarshal(b, *v)
	case "AutoMergeEnabledEvent":
		*v = new(currentPendingReviewNodeAutoMergeEnabledEvent)
		return json.Unmarshal(b, *v)
	case "AutoRebaseEnabledEvent":
		*v = new(currentPendingReviewNodeAutoRebaseEnabledEvent)
		return json.Unmarshal(b, *v)
	case "AutoSquashEnabledEvent":
		*v = new(currentPendingReviewNodeAutoSquashEnabledEvent)
		return json.Unmarshal(b, *v)
	case "AutomaticBaseChangeFailedEvent":
		*v = new(currentPendingReviewNodeAutomaticBaseChangeFailedEvent)
		return json.Unmarshal(b, *v)
	case "AutomaticBaseChangeSucceededEvent":
		*v = new(currentPendingReviewNodeAutomaticBaseChangeSucceededEvent)
		return json.Unmarshal(b, *v)
	case "BaseRefChangedEvent":
		*v = new(currentPendingReviewNodeBaseRefChangedEvent)
		return json.Unmarshal(b, *v)
	case "BaseRefDeletedEvent":
		*v = new(currentPendingReviewNodeBaseRefDeletedEvent)
		return json.Unmarshal(b, *v)
	case "BaseRefForcePushedEvent":
		*v = new(currentPendingReviewNodeBaseRefForcePushedEvent)
		return json.Unmarshal(b, *v)
	case "Blob":
		*v = new(currentPendingReviewNodeBlob)
		return json.Unmarshal(b, *v)
	case "Bot":
		*v = new(currentPendingReviewNodeBot)
		return json.Unmarshal(b, *v)
	case "BranchProtectionRule":
		*v = new(currentPendingReviewNodeBranchProtectionRule)
		return json.Unmarshal(b, *v)
	case "BypassForcePushAllowance":
		*v = new(currentPendingReviewNodeBypassForcePushAllowance)
		return json.Unmarshal(b, *v)
	case "BypassPullRequestAllowance":
		*v = new(currentPendingReviewNodeBypassPullRequestAllowance)
		return json.Unmarshal(b, *v)
	case "CWE":
		*v = new(currentPendingReviewNodeCWE)
		return json.Unmarshal(b, *v)
	case "CheckRun":
		*v = new(currentPendingReviewNodeCheckRun)
		return json.Unmarshal(b, *v)
	case "CheckSuite":
		*v = new(currentPendingReviewNodeCheckSuite)
		return json.Unmarshal(b, *v)
	case "ClosedEvent":
		*v = new(currentPendingReviewNodeClosedEvent)
		return json.Unmarshal(b, *v)
	case "CodeOfConduct":
		*v = new(currentPendingReviewNodeCodeOfConduct)
		return json.Unmarshal(b, *v)
	case "CommentDeletedEvent":
		*v = new(currentPendingReviewNodeCommentDeletedEvent)
		return json.Unmarshal(b, *v)
	case "Commit":
		*v = new(currentPendingReviewNodeCommit)
		return json.Unmarshal(b, *v)
	case "CommitComment":
		*v = new(currentPendingReviewNodeCommitComment)
		return json.Unmarshal(b, *v)
	case "CommitCommentThread":
		*v = new(currentPendingReviewNodeCommitCommentThread)
		return json.Unmarshal(b, *v)
	case "Comparison":
		*v = new(currentPendingReviewNodeComparison)
		return json.Unmarshal(b, *v)
	case "ConnectedEvent":
		*v = new(currentPendingReviewNodeConnectedEvent)
		return json.Unmarshal(b, *v)
	case "ConvertToDraftEvent":
		*v = new(currentPendingReviewNodeConvertToDraftEvent)
		return json.Unmarshal(b, *v)
	case "ConvertedNoteToIssueEvent":
		*v = new(currentPendingReviewNodeConvertedNoteToIssueEvent)
		return json.Unmarshal(b, *v)
	case "ConvertedToDiscussionEvent":
		*v = new(currentPendingReviewNodeConvertedToDiscussionEvent)
		return json.Unmarshal(b, *v)
	case "CrossReferencedEvent":
		*v = new(currentPendingReviewNodeCrossReferencedEvent)
		return json.Unmarshal(b, *v)
	case "DemilestonedEvent":
		*v = new(currentPendingReviewNodeDemilestonedEvent)
		return json.Unmarshal(b, *v)
	case "DeployKey":
		*v = new(currentPendingReviewNodeDeployKey)
		return json.Unmarshal(b, *v)
	case "DeployedEvent":
		*v = new(currentPendingReviewNodeDeployedEvent)
		return json.Unmarshal(b, *v)
	case "Deployment":
		*v = new(currentPendingReviewNodeDeployment)
		return json.Unmarshal(b, *v)
	case "DeploymentEnvironmentChangedEvent":
		*v = new(currentPendingReviewNodeDeploymentEnvironmentChangedEvent)
		return json.Unmarshal(b, *v)
	case "DeploymentReview":
		*v = new(currentPendingReviewNodeDeploymentReview)
		return json.Unmarshal(b, *v)
	case "DeploymentStatus":
		*v = new(currentPendingReviewNodeDeploymentStatus)
		return json.Unmarshal(b, *v)
	case "DisconnectedEvent":
		*v = new(currentPendingReviewNodeDisconnectedEvent)
		return json.Unmarshal(b, *v)
	case "Discussion":
		*v = new(currentPendingReviewNodeDiscussion)
		return json.Unmarshal(b, *v)
	case "DiscussionCategory":
		*v = new(currentPendingReviewNodeDiscussionCategory)
		return json.Unmarshal(b, *v)
	case "DiscussionComment":
		*v = new(currentPendingReviewNodeDiscussionComment)
		return json.Unmarshal(b, *v)
	case "DiscussionPoll":
		*v = new(currentPendingReviewNodeDiscussionPoll)
		return json.Unmarshal(b, *v)
	case "DiscussionPollOption":
		*v = new(currentPendingReviewNodeDiscussionPollOption)
		return json.Unmarshal(b, *v)
	case "DraftIssue":
		*v = new(currentPendingReviewNodeDraftIssue)
		return json.Unmarshal(b, *v)
	case "Enterprise":
		*v = new(currentPendingReviewNodeEnterprise)
		return json.Unmarshal(b, *v)
	case "EnterpriseAdministratorInvitation":
		*v = new(currentPendingReviewNodeEnterpriseAdministratorInvitation)
		return json.Unmarshal(b, *v)
	case "EnterpriseIdentityProvider":
		*v = new(currentPendingReviewNodeEnterpriseIdentityProvider)
		return json.Unmarshal(b, *v)
	case "EnterpriseRepositoryInfo":
		*v = new(currentPendingReviewNodeEnterpriseRepositoryInfo)
		return json.Unmarshal(b, *v)
	case "EnterpriseServerInstallation":
		*v = new(currentPendingReviewNodeEnterpriseServerInstallation)
		return json.Unmarshal(b, *v)
	case "EnterpriseServerUserAccount":
		*v = new(currentPendingReviewNodeEnterpriseServerUserAccount)
		return json.Unmarshal(b, *v)
	case "EnterpriseServerUserAccountEmail":
		*v = new(currentPendingReviewNodeEnterpriseServerUserAccountEmail)
		return json.Unmarshal(b, *v)
	case "EnterpriseServerUserAccountsUpload":
		*v = new(currentPendingReviewNodeEnterpriseServerUserAccountsUpload)
		return json.Unmarshal(b, *v)
	case "EnterpriseUserAccount":
		*v = new(currentPendingReviewNodeEnterpriseUserAccount)
		return json.Unmarshal(b, *v)
	case "Environment":
		*v = new(currentPendingReviewNodeEnvironment)
		return json.Unmarshal(b, *v)
	case "ExternalIdentity":
		*v = new(currentPendingReviewNodeExternalIdentity)
		return json.Unmarshal(b, *v)
	case "Gist":
		*v = new(currentPendingReviewNodeGist)
		return json.Unmarshal(b, *v)
	case "GistComment":
		*v = new(currentPendingReviewNodeGistComment)
		return json.Unmarshal(b, *v)
	case "HeadRefDeletedEvent":
		*v = new(currentPendingReviewNodeHeadRefDeletedEvent)
		return json.Unmarshal(b, *v)
	case "HeadRefForcePushedEvent":
		*v = new(currentPendingReviewNodeHeadRefForcePushedEvent)
		return json.Unmarshal(b, *v)
	case "HeadRefRestoredEvent":
		*v = new(currentPendingReviewNodeHeadRefRestoredEvent)
		return json.Unmarshal(b, *v)
	case "IpAllowListEntry":
		*v = new(currentPendingReviewNodeIpAllowListEntry)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(currentPendingReviewNodeIssue)
		return json.Unmarshal(b, *v)
	case "IssueComment":
		*v = new(currentPendingReviewNodeIssueComment)
		return json.Unmarshal(b, *v)
	case "Label":
		*v = new(currentPendingReviewNodeLabel)
		return json.Unmarshal(b, *v)
	case "LabeledEvent":
		*v = new(currentPendingReviewNodeLabeledEvent)
		return json.Unmarshal(b, *v)
	case "Language":
		*v = new(currentPendingReviewNodeLanguage)
		return json.Unmarshal(b, *v)
	case "License":
		*v = new(currentPendingReviewNodeLicense)
		return json.Unmarshal(b, *v)
	case "LinkedBranch":
		*v = new(currentPendingReviewNodeLinkedBranch)
		return json.Unmarshal(b, *v)
	case "LockedEvent":
		*v = new(currentPendingReviewNodeLockedEvent)
		return json.Unmarshal(b, *v)
	case "Mannequin":
		*v = new(currentPendingReviewNodeMannequin)
		return json.Unmarshal(b, *v)
	case "MarkedAsDuplicateEvent":
		*v = new(currentPendingReviewNodeMarkedAsDuplicateEvent)
		return json.Unmarshal(b, *v)
	case "MarketplaceCategory":
		*v = new(currentPendingReviewNodeMarketplaceCategory)
		return json.Unmarshal(b, *v)
	case "MarketplaceListing":
		*v = new(currentPendingReviewNodeMarketplaceListing)
		return json.Unmarshal(b, *v)
	case "MembersCanDeleteReposClearAuditEntry":
		*v = new(currentPendingReviewNodeMembersCanDeleteReposClearAuditEntry)
		return json.Unmarshal(b, *v)
	case "MembersCanDeleteReposDisableAuditEntry":
		*v = new(currentPendingReviewNodeMembersCanDeleteReposDisableAuditEntry)
		return json.Unmarshal(b, *v)
	case "MembersCanDeleteReposEnableAuditEntry":
		*v = new(currentPendingReviewNodeMembersCanDeleteReposEnableAuditEntry)
		return json.Unmarshal(b, *v)
	case "MentionedEvent":
		*v = new(currentPendingReviewNodeMentionedEvent)
		return json.Unmarshal(b, *v)
	case "MergedEvent":
		*v = new(currentPendingReviewNodeMergedEvent)
		return json.Unmarshal(b, *v)
	case "MigrationSource":
		*v = new(currentPendingReviewNodeMigrationSource)
		return json.Unmarshal(b, *v)
	case "Milestone":
		*v = new(currentPendingReviewNodeMilestone)
		return json.Unmarshal(b, *v)
	case "MilestonedEvent":
		*v = new(currentPendingReviewNodeMilestonedEvent)
		return json.Unmarshal(b, *v)
	case "MovedColumnsInProjectEvent":
		*v = new(currentPendingReviewNodeMovedColumnsInProjectEvent)
		return json.Unmarshal(b, *v)
	case "OIDCProvider":
		*v = new(currentPendingReviewNodeOIDCProvider)
		return json.Unmarshal(b, *v)
	case "OauthApplicationCreateAuditEntry":
		*v = new(currentPendingReviewNodeOauthApplicationCreateAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgAddBillingManagerAuditEntry":
		*v = new(currentPendingReviewNodeOrgAddBillingManagerAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgAddMemberAuditEntry":
		*v = new(currentPendingReviewNodeOrgAddMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgBlockUserAuditEntry":
		*v = new(currentPendingReviewNodeOrgBlockUserAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgConfigDisableCollaboratorsOnlyAuditEntry":
		*v = new(currentPendingReviewNodeOrgConfigDisableCollaboratorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgConfigEnableCollaboratorsOnlyAuditEntry":
		*v = new(currentPendingReviewNodeOrgConfigEnableCollaboratorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgCreateAuditEntry":
		*v = new(currentPendingReviewNodeOrgCreateAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgDisableOauthAppRestrictionsAuditEntry":
		*v = new(currentPendingReviewNodeOrgDisableOauthAppRestrictionsAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgDisableSamlAuditEntry":
		*v = new(currentPendingReviewNodeOrgDisableSamlAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgDisableTwoFactorRequirementAuditEntry":
		*v = new(currentPendingReviewNodeOrgDisableTwoFactorRequirementAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgEnableOauthAppRestrictionsAuditEntry":
		*v = new(currentPendingReviewNodeOrgEnableOauthAppRestrictionsAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgEnableSamlAuditEntry":
		*v = new(currentPendingReviewNodeOrgEnableSamlAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgEnableTwoFactorRequirementAuditEntry":
		*v = new(currentPendingReviewNodeOrgEnableTwoFactorRequirementAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgInviteMemberAuditEntry":
		*v = new(currentPendingReviewNodeOrgInviteMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgInviteToBusinessAuditEntry":
		*v = new(currentPendingReviewNodeOrgInviteToBusinessAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgOauthAppAccessApprovedAuditEntry":
		*v = new(currentPendingReviewNodeOrgOauthAppAccessApprovedAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgOauthAppAccessDeniedAuditEntry":
		*v = new(currentPendingReviewNodeOrgOauthAppAccessDeniedAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgOauthAppAccessRequestedAuditEntry":
		*v = new(currentPendingReviewNodeOrgOauthAppAccessRequestedAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgRemoveBillingManagerAuditEntry":
		*v = new(currentPendingReviewNodeOrgRemoveBillingManagerAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgRemoveMemberAuditEntry":
		*v = new(currentPendingReviewNodeOrgRemoveMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgRemoveOutsideCollaboratorAuditEntry":
		*v = new(currentPendingReviewNodeOrgRemoveOutsideCollaboratorAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgRestoreMemberAuditEntry":
		*v = new(currentPendingReviewNodeOrgRestoreMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgUnblockUserAuditEntry":
		*v = new(currentPendingReviewNodeOrgUnblockUserAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgUpdateDefaultRepositoryPermissionAuditEntry":
		*v = new(currentPendingReviewNodeOrgUpdateDefaultRepositoryPermissionAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgUpdateMemberAuditEntry":
		*v = new(currentPendingReviewNodeOrgUpdateMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgUpdateMemberRepositoryCreationPermissionAuditEntry":
		*v = new(currentPendingReviewNodeOrgUpdateMemberRepositoryCreationPermissionAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry":
		*v = new(currentPendingReviewNodeOrgUpdateMemberRepositoryInvitationPermissionAuditEntry)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(currentPendingReviewNodeOrganization)
		return json.Unmarshal(b, *v)
	case "OrganizationIdentityProvider":
		*v = new(currentPendingReviewNodeOrganizationIdentityProvider)
		return json.Unmarshal(b, *v)
	case "OrganizationInvitation":
		*v = new(currentPendingReviewNodeOrganizationInvitation)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(currentPendingReviewNodePackage)
		return json.Unmarshal(b, *v)
	case "PackageFile":
		*v = new(currentPendingReviewNodePackageFile)
		return json.Unmarshal(b, *v)
	case "PackageTag":
		*v = new(currentPendingReviewNodePackageTag)
		return json.Unmarshal(b, *v)
	case "PackageVersion":
		*v = new(currentPendingReviewNodePackageVersion)
		return json.Unmarshal(b, *v)
	case "PinnedDiscussion":
		*v = new(currentPendingReviewNodePinnedDiscussion)
		return json.Unmarshal(b, *v)
	case "PinnedEvent":
		*v = new(currentPendingReviewNodePinnedEvent)
		return json.Unmarshal(b, *v)
	case "PinnedIssue":
		*v = new(currentPendingReviewNodePinnedIssue)
		return json.Unmarshal(b, *v)
	case "PrivateRepositoryForkingDisableAuditEntry":
		*v = new(currentPendingReviewNodePrivateRepositoryForkingDisableAuditEntry)
		return json.Unmarshal(b, *v)
	case "PrivateRepositoryForkingEnableAuditEntry":
		*v = new(currentPendingReviewNodePrivateRepositoryForkingEnableAuditEntry)
		return json.Unmarshal(b, *v)
	case "Project":
		*v = new(currentPendingReviewNodeProject)
		return json.Unmarshal(b, *v)
	case "ProjectCard":
		*v = new(currentPendingReviewNodeProjectCard)
		return json.Unmarshal(b, *v)
	case "ProjectColumn":
		*v = new(currentPendingReviewNodeProjectColumn)
		return json.Unmarshal(b, *v)
	case "ProjectNext":
		*v = new(currentPendingReviewNodeProjectNext)
		return json.Unmarshal(b, *v)
	case "ProjectNextField":
		*v = new(currentPendingReviewNodeProjectNextField)
		return json.Unmarshal(b, *v)
	case "ProjectNextItem":
		*v = new(currentPendingReviewNodeProjectNextItem)
		return json.Unmarshal(b, *v)
	case "ProjectNextItemFieldValue":
		*v = new(currentPendingReviewNodeProjectNextItemFieldValue)
		return json.Unmarshal(b, *v)
	case "ProjectNextIterationField":
		*v = new(currentPendingReviewNodeProjectNextIterationField)
		return json.Unmarshal(b, *v)
	case "ProjectNextSingleSelectField":
		*v = new(currentPendingReviewNodeProjectNextSingleSelectField)
		return json.Unmarshal(b, *v)
	case "ProjectV2":
		*v = new(currentPendingReviewNodeProjectV2)
		return json.Unmarshal(b, *v)
	case "ProjectV2Field":
		*v = new(currentPendingReviewNodeProjectV2Field)
		return json.Unmarshal(b, *v)
	case "ProjectV2Item":
		*v = new(currentPendingReviewNodeProjectV2Item)
		return json.Unmarshal(b, *v)
	case "ProjectV2ItemFieldDateValue":
		*v = new(currentPendingReviewNodeProjectV2ItemFieldDateValue)
		return json.Unmarshal(b, *v)
	case "ProjectV2ItemFieldIterationValue":
		*v = new(currentPendingReviewNodeProjectV2ItemFieldIterationValue)
		return json.Unmarshal(b, *v)
	case "ProjectV2ItemFieldNumberValue":
		*v = new(currentPendingReviewNodeProjectV2ItemFieldNumberValue)
		return json.Unmarshal(b, *v)
	case "ProjectV2ItemFieldSingleSelectValue":
		*v = new(currentPendingReviewNodeProjectV2ItemFieldSingleSelectValue)
		return json.Unmarshal(b, *v)
	case "ProjectV2ItemFieldTextValue":
		*v = new(currentPendingReviewNodeProjectV2ItemFieldTextValue)
		return json.Unmarshal(b, *v)
	case "ProjectV2IterationField":
		*v = new(currentPendingReviewNodeProjectV2IterationField)
		return json.Unmarshal(b, *v)
	case "ProjectV2SingleSelectField":
		*v = new(currentPendingReviewNodeProjectV2SingleSelectField)
		return json.Unmarshal(b, *v)
	case "ProjectV2View":
		*v = new(currentPendingReviewNodeProjectV2View)
		return json.Unmarshal(b, *v)
	case "ProjectView":
		*v = new(currentPendingReviewNodeProjectView)
		return json.Unmarshal(b, *v)
	case "PublicKey":
		*v = new(currentPendingReviewNodePublicKey)
		return json.Unmarshal(b, *v)
	case "PullRequest":
		*v = new(currentPendingReviewNodePullRequest)
		return json.Unmarshal(b, *v)
	case "PullRequestCommit":
		*v = new(currentPendingReviewNodePullRequestCommit)
		return json.Unmarshal(b, *v)
	case "PullRequestCommitCommentThread":
		*v = new(currentPendingReviewNodePullRequestCommitCommentThread)
		return json.Unmarshal(b, *v)
	case "PullRequestReview":
		*v = new(currentPendingReviewNodePullRequestReview)
		return json.Unmarshal(b, *v)
	case "PullRequestReviewComment":
		*v = new(currentPendingReviewNodePullRequestReviewComment)
		return json.Unmarshal(b, *v)
	case "PullRequestReviewThread":
		*v = new(currentPendingReviewNodePullRequestReviewThread)
		return json.Unmarshal(b, *v)
	case "PullRequestThread":
		*v = new(currentPendingReviewNodePullRequestThread)
		return json.Unmarshal(b, *v)
	case "Push":
		*v = new(currentPendingReviewNodePush)
		return json.Unmarshal(b, *v)
	case "PushAllowance":
		*v = new(currentPendingReviewNodePushAllowance)
		return json.Unmarshal(b, *v)
	case "Reaction":
		*v = new(currentPendingReviewNodeReaction)
		return json.Unmarshal(b, *v)
	case "ReadyForReviewEvent":
		*v = new(currentPendingReviewNodeReadyForReviewEvent)
		return json.Unmarshal(b, *v)
	case "Ref":
		*v = new(currentPendingReviewNodeRef)
		return json.Unmarshal(b, *v)
	case "ReferencedEvent":
		*v = new(currentPendingReviewNodeReferencedEvent)
		return json.Unmarshal(b, *v)
	case "Release":
		*v = new(currentPendingReviewNodeRelease)
		return json.Unmarshal(b, *v)
	case "ReleaseAsset":
		*v = new(currentPendingReviewNodeReleaseAsset)
		return json.Unmarshal(b, *v)
	case "RemovedFromProjectEvent":
		*v = new(currentPendingReviewNodeRemovedFromProjectEvent)
		return json.Unmarshal(b, *v)
	case "RenamedTitleEvent":
		*v = new(currentPendingReviewNodeRenamedTitleEvent)
		return json.Unmarshal(b, *v)
	case "ReopenedEvent":
		*v = new(currentPendingReviewNodeReopenedEvent)
		return json.Unmarshal(b, *v)
	case "RepoAccessAuditEntry":
		*v = new(currentPendingReviewNodeRepoAccessAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoAddMemberAuditEntry":
		*v = new(currentPendingReviewNodeRepoAddMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoAddTopicAuditEntry":
		*v = new(currentPendingReviewNodeRepoAddTopicAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoArchivedAuditEntry":
		*v = new(currentPendingReviewNodeRepoArchivedAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoChangeMergeSettingAuditEntry":
		*v = new(currentPendingReviewNodeRepoChangeMergeSettingAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigDisableAnonymousGitAccessAuditEntry":
		*v = new(currentPendingReviewNodeRepoConfigDisableAnonymousGitAccessAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigDisableCollaboratorsOnlyAuditEntry":
		*v = new(currentPendingReviewNodeRepoConfigDisableCollaboratorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigDisableContributorsOnlyAuditEntry":
		*v = new(currentPendingReviewNodeRepoConfigDisableContributorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigDisableSockpuppetDisallowedAuditEntry":
		*v = new(currentPendingReviewNodeRepoConfigDisableSockpuppetDisallowedAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigEnableAnonymousGitAccessAuditEntry":
		*v = new(currentPendingReviewNodeRepoConfigEnableAnonymousGitAccessAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigEnableCollaboratorsOnlyAuditEntry":
		*v = new(currentPendingReviewNodeRepoConfigEnableCollaboratorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigEnableContributorsOnlyAuditEntry":
		*v = new(currentPendingReviewNodeRepoConfigEnableContributorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigEnableSockpuppetDisallowedAuditEntry":
		*v = new(currentPendingReviewNodeRepoConfigEnableSockpuppetDisallowedAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigLockAnonymousGitAccessAuditEntry":
		*v = new(currentPendingReviewNodeRepoConfigLockAnonymousGitAccessAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigUnlockAnonymousGitAccessAuditEntry":
		*v = new(currentPendingReviewNodeRepoConfigUnlockAnonymousGitAccessAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoCreateAuditEntry":
		*v = new(currentPendingReviewNodeRepoCreateAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoDestroyAuditEntry":
		*v = new(currentPendingReviewNodeRepoDestroyAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoRemoveMemberAuditEntry":
		*v = new(currentPendingReviewNodeRepoRemoveMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoRemoveTopicAuditEntry":
		*v = new(currentPendingReviewNodeRepoRemoveTopicAuditEntry)
		return json.Unmarshal(b, *v)
	case "Repository":
		*v = new(currentPendingReviewNodeRepository)
		return json.Unmarshal(b, *v)
	case "RepositoryInvitation":
		*v = new(currentPendingReviewNodeRepositoryInvitation)
		return json.Unmarshal(b, *v)
	case "RepositoryMigration":
		*v = new(currentPendingReviewNodeRepositoryMigration)
		return json.Unmarshal(b, *v)
	case "RepositoryTopic":
		*v = new(currentPendingReviewNodeRepositoryTopic)
		return json.Unmarshal(b, *v)
	case "RepositoryVisibilityChangeDisableAuditEntry":
		*v = new(currentPendingReviewNodeRepositoryVisibilityChangeDisableAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepositoryVisibilityChangeEnableAuditEntry":
		*v = new(currentPendingReviewNodeRepositoryVisibilityChangeEnableAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepositoryVulnerabilityAlert":
		*v = new(currentPendingReviewNodeRepositoryVulnerabilityAlert)
		return json.Unmarshal(b, *v)
	case "ReviewDismissalAllowance":
		*v = new(currentPendingReviewNodeReviewDismissalAllowance)
		return json.Unmarshal(b, *v)
	case "ReviewDismissedEvent":
		*v = new(currentPendingReviewNodeReviewDismissedEvent)
		return json.Unmarshal(b, *v)
	case "ReviewRequest":
		*v = new(currentPendingReviewNodeReviewRequest)
		return json.Unmarshal(b, *v)
	case "ReviewRequestRemovedEvent":
		*v = new(currentPendingReviewNodeReviewRequestRemovedEvent)
		return json.Unmarshal(b, *v)
	case "ReviewRequestedEvent":
		*v = new(currentPendingReviewNodeReviewRequestedEvent)
		return json.Unmarshal(b, *v)
	case "SavedReply":
		*v = new(currentPendingReviewNodeSavedReply)
		return json.Unmarshal(b, *v)
	case "SecurityAdvisory":
		*v = new(currentPendingReviewNodeSecurityAdvisory)
		return json.Unmarshal(b, *v)
	case "SponsorsActivity":
		*v = new(currentPendingReviewNodeSponsorsActivity)
		return json.Unmarshal(b, *v)
	case "SponsorsListing":
		*v = new(currentPendingReviewNodeSponsorsListing)
		return json.Unmarshal(b, *v)
	case "SponsorsListingFeaturedItem":
		*v = new(currentPendingReviewNodeSponsorsListingFeaturedItem)
		return json.Unmarshal(b, *v)
	case "SponsorsTier":
		*v = new(currentPendingReviewNodeSponsorsTier)
		return json.Unmarshal(b, *v)
	case "Sponsorship":
		*v = new(currentPendingReviewNodeSponsorship)
		return json.Unmarshal(b, *v)
	case "SponsorshipNewsletter":
		*v = new(currentPendingReviewNodeSponsorshipNewsletter)
		return json.Unmarshal(b, *v)
	case "Status":
		*v = new(currentPendingReviewNodeStatus)
		return json.Unmarshal(b, *v)
	case "StatusCheckRollup":
		*v = new(currentPendingReviewNodeStatusCheckRollup)
		return json.Unmarshal(b, *v)
	case "StatusContext":
		*v = new(currentPendingReviewNodeStatusContext)
		return json.Unmarshal(b, *v)
	case "SubscribedEvent":
		*v = new(currentPendingReviewNodeSubscribedEvent)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(currentPendingReviewNodeTag)
		return json.Unmarshal(b, *v)
	case "Team":
		*v = new(currentPendingReviewNodeTeam)
		return json.Unmarshal(b, *v)
	case "TeamAddMemberAuditEntry":
		*v = new(currentPendingReviewNodeTeamAddMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "TeamAddRepositoryAuditEntry":
		*v = new(currentPendingReviewNodeTeamAddRepositoryAuditEntry)
		return json.Unmarshal(b, *v)
	case "TeamChangeParentTeamAuditEntry":
		*v = new(currentPendingReviewNodeTeamChangeParentTeamAuditEntry)
		return json.Unmarshal(b, *v)
	case "TeamDiscussion":
		*v = new(currentPendingReviewNodeTeamDiscussion)
		return json.Unmarshal(b, *v)
	case "TeamDiscussionComment":
		*v = new(currentPendingReviewNodeTeamDiscussionComment)
		return json.Unmarshal(b, *v)
	case "TeamRemoveMemberAuditEntry":
		*v = new(currentPendingReviewNodeTeamRemoveMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "TeamRemoveRepositoryAuditEntry":
		*v = new(currentPendingReviewNodeTeamRemoveRepositoryAuditEntry)
		return json.Unmarshal(b, *v)
	case "Topic":
		*v = new(currentPendingReviewNodeTopic)
		return json.Unmarshal(b, *v)
	case "TransferredEvent":
		*v = new(currentPendingReviewNodeTransferredEvent)
		return json.Unmarshal(b, *v)
	case "Tree":
		*v = new(currentPendingReviewNodeTree)
		return json.Unmarshal(b, *v)
	case "UnassignedEvent":
		*v = new(currentPendingReviewNodeUnassignedEvent)
		return json.Unmarshal(b, *v)
	case "UnlabeledEvent":
		*v = new(currentPendingReviewNodeUnlabeledEvent)
		return json.Unmarshal(b, *v)
	case "UnlockedEvent":
		*v = new(currentPendingReviewNodeUnlockedEvent)
		return json.Unmarshal(b, *v)
	case "UnmarkedAsDuplicateEvent":
		*v = new(currentPendingReviewNodeUnmarkedAsDuplicateEvent)
		return json.Unmarshal(b, *v)
	case "UnpinnedEvent":
		*v = new(currentPendingReviewNodeUnpinnedEvent)
		return json.Unmarshal(b, *v)
	case "UnsubscribedEvent":
		*v = new(currentPendingReviewNodeUnsubscribedEvent)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(currentPendingReviewNodeUser)
		return json.Unmarshal(b, *v)
	case "UserBlockedEvent":
		*v = new(currentPendingReviewNodeUserBlockedEvent)
		return json.Unmarshal(b, *v)
	case "UserContentEdit":
		*v = new(currentPendingReviewNodeUserContentEdit)
		return json.Unmarshal(b, *v)
	case "UserStatus":
		*v = new(currentPendingReviewNodeUserStatus)
		return json.Unmarshal(b, *v)
	case "VerifiableDomain":
		*v = new(currentPendingReviewNodeVerifiableDomain)
		return json.Unmarshal(b, *v)
	case "Workflow":
		*v = new(currentPendingReviewNodeWorkflow)
		return json.Unmarshal(b, *v)
	case "WorkflowRun":
		*v = new(currentPendingReviewNodeWorkflowRun)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for currentPendingReviewNode: "%v"`, tn.TypeName)
	}
}

func __marshalcurrentPendingReviewNode(v *currentPendingReviewNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *currentPendingReviewNodeAddedToProjectEvent:
		typename = "AddedToProjectEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeAddedToProjectEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeApp:
		typename = "App"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeApp
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeAssignedEvent:
		typename = "AssignedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeAssignedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeAutoMergeDisabledEvent:
		typename = "AutoMergeDisabledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeAutoMergeDisabledEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeAutoMergeEnabledEvent:
		typename = "AutoMergeEnabledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeAutoMergeEnabledEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeAutoRebaseEnabledEvent:
		typename = "AutoRebaseEnabledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeAutoRebaseEnabledEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeAutoSquashEnabledEvent:
		typename = "AutoSquashEnabledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeAutoSquashEnabledEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeAutomaticBaseChangeFailedEvent:
		typename = "AutomaticBaseChangeFailedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeAutomaticBaseChangeFailedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeAutomaticBaseChangeSucceededEvent:
		typename = "AutomaticBaseChangeSucceededEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeAutomaticBaseChangeSucceededEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeBaseRefChangedEvent:
		typename = "BaseRefChangedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeBaseRefChangedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeBaseRefDeletedEvent:
		typename = "BaseRefDeletedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeBaseRefDeletedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeBaseRefForcePushedEvent:
		typename = "BaseRefForcePushedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeBaseRefForcePushedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeBlob:
		typename = "Blob"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeBlob
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeBot:
		typename = "Bot"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeBot
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeBranchProtectionRule:
		typename = "BranchProtectionRule"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeBranchProtectionRule
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeBypassForcePushAllowance:
		typename = "BypassForcePushAllowance"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeBypassForcePushAllowance
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeBypassPullRequestAllowance:
		typename = "BypassPullRequestAllowance"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeBypassPullRequestAllowance
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeCWE:
		typename = "CWE"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeCWE
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeCheckRun:
		typename = "CheckRun"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeCheckRun
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeCheckSuite:
		typename = "CheckSuite"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeCheckSuite
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeClosedEvent:
		typename = "ClosedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeClosedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeCodeOfConduct:
		typename = "CodeOfConduct"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeCodeOfConduct
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeCommentDeletedEvent:
		typename = "CommentDeletedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeCommentDeletedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeCommit:
		typename = "Commit"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeCommit
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeCommitComment:
		typename = "CommitComment"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeCommitComment
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeCommitCommentThread:
		typename = "CommitCommentThread"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeCommitCommentThread
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeComparison:
		typename = "Comparison"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeComparison
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeConnectedEvent:
		typename = "ConnectedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeConnectedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeConvertToDraftEvent:
		typename = "ConvertToDraftEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeConvertToDraftEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeConvertedNoteToIssueEvent:
		typename = "ConvertedNoteToIssueEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeConvertedNoteToIssueEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeConvertedToDiscussionEvent:
		typename = "ConvertedToDiscussionEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeConvertedToDiscussionEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeCrossReferencedEvent:
		typename = "CrossReferencedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeCrossReferencedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDemilestonedEvent:
		typename = "DemilestonedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDemilestonedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDeployKey:
		typename = "DeployKey"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDeployKey
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDeployedEvent:
		typename = "DeployedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDeployedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDeployment:
		typename = "Deployment"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDeployment
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDeploymentEnvironmentChangedEvent:
		typename = "DeploymentEnvironmentChangedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDeploymentEnvironmentChangedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDeploymentReview:
		typename = "DeploymentReview"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDeploymentReview
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDeploymentStatus:
		typename = "DeploymentStatus"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDeploymentStatus
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDisconnectedEvent:
		typename = "DisconnectedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDisconnectedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDiscussion:
		typename = "Discussion"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDiscussionCategory:
		typename = "DiscussionCategory"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDiscussionCategory
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDiscussionComment:
		typename = "DiscussionComment"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDiscussionComment
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDiscussionPoll:
		typename = "DiscussionPoll"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDiscussionPoll
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDiscussionPollOption:
		typename = "DiscussionPollOption"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDiscussionPollOption
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeDraftIssue:
		typename = "DraftIssue"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeDraftIssue
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeEnterprise:
		typename = "Enterprise"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeEnterprise
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeEnterpriseAdministratorInvitation:
		typename = "EnterpriseAdministratorInvitation"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeEnterpriseAdministratorInvitation
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeEnterpriseIdentityProvider:
		typename = "EnterpriseIdentityProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeEnterpriseIdentityProvider
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeEnterpriseRepositoryInfo:
		typename = "EnterpriseRepositoryInfo"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeEnterpriseRepositoryInfo
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeEnterpriseServerInstallation:
		typename = "EnterpriseServerInstallation"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeEnterpriseServerInstallation
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeEnterpriseServerUserAccount:
		typename = "EnterpriseServerUserAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeEnterpriseServerUserAccount
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeEnterpriseServerUserAccountEmail:
		typename = "EnterpriseServerUserAccountEmail"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeEnterpriseServerUserAccountEmail
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeEnterpriseServerUserAccountsUpload:
		typename = "EnterpriseServerUserAccountsUpload"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeEnterpriseServerUserAccountsUpload
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeEnterpriseUserAccount:
		typename = "EnterpriseUserAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeEnterpriseUserAccount
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeEnvironment:
		typename = "Environment"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeEnvironment
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeExternalIdentity:
		typename = "ExternalIdentity"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeExternalIdentity
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeGist:
		typename = "Gist"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeGist
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeGistComment:
		typename = "GistComment"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeGistComment
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeHeadRefDeletedEvent:
		typename = "HeadRefDeletedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeHeadRefDeletedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeHeadRefForcePushedEvent:
		typename = "HeadRefForcePushedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeHeadRefForcePushedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeHeadRefRestoredEvent:
		typename = "HeadRefRestoredEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeHeadRefRestoredEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeIpAllowListEntry:
		typename = "IpAllowListEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeIpAllowListEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeIssueComment:
		typename = "IssueComment"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeIssueComment
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeLabel:
		typename = "Label"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeLabel
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeLabeledEvent:
		typename = "LabeledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeLabeledEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeLanguage:
		typename = "Language"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeLanguage
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeLicense:
		typename = "License"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeLicense
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeLinkedBranch:
		typename = "LinkedBranch"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeLinkedBranch
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeLockedEvent:
		typename = "LockedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeLockedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMannequin:
		typename = "Mannequin"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMannequin
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMarkedAsDuplicateEvent:
		typename = "MarkedAsDuplicateEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMarkedAsDuplicateEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMarketplaceCategory:
		typename = "MarketplaceCategory"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMarketplaceCategory
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMarketplaceListing:
		typename = "MarketplaceListing"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMarketplaceListing
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMembersCanDeleteReposClearAuditEntry:
		typename = "MembersCanDeleteReposClearAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMembersCanDeleteReposClearAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMembersCanDeleteReposDisableAuditEntry:
		typename = "MembersCanDeleteReposDisableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMembersCanDeleteReposDisableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMembersCanDeleteReposEnableAuditEntry:
		typename = "MembersCanDeleteReposEnableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMembersCanDeleteReposEnableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMentionedEvent:
		typename = "MentionedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMentionedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMergedEvent:
		typename = "MergedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMergedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMigrationSource:
		typename = "MigrationSource"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMigrationSource
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMilestone:
		typename = "Milestone"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMilestone
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMilestonedEvent:
		typename = "MilestonedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMilestonedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeMovedColumnsInProjectEvent:
		typename = "MovedColumnsInProjectEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeMovedColumnsInProjectEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOIDCProvider:
		typename = "OIDCProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOIDCProvider
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOauthApplicationCreateAuditEntry:
		typename = "OauthApplicationCreateAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOauthApplicationCreateAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgAddBillingManagerAuditEntry:
		typename = "OrgAddBillingManagerAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgAddBillingManagerAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgAddMemberAuditEntry:
		typename = "OrgAddMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgAddMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgBlockUserAuditEntry:
		typename = "OrgBlockUserAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgBlockUserAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgConfigDisableCollaboratorsOnlyAuditEntry:
		typename = "OrgConfigDisableCollaboratorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgConfigDisableCollaboratorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgConfigEnableCollaboratorsOnlyAuditEntry:
		typename = "OrgConfigEnableCollaboratorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgConfigEnableCollaboratorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgCreateAuditEntry:
		typename = "OrgCreateAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgCreateAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgDisableOauthAppRestrictionsAuditEntry:
		typename = "OrgDisableOauthAppRestrictionsAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgDisableOauthAppRestrictionsAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgDisableSamlAuditEntry:
		typename = "OrgDisableSamlAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgDisableSamlAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgDisableTwoFactorRequirementAuditEntry:
		typename = "OrgDisableTwoFactorRequirementAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgDisableTwoFactorRequirementAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgEnableOauthAppRestrictionsAuditEntry:
		typename = "OrgEnableOauthAppRestrictionsAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgEnableOauthAppRestrictionsAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgEnableSamlAuditEntry:
		typename = "OrgEnableSamlAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgEnableSamlAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgEnableTwoFactorRequirementAuditEntry:
		typename = "OrgEnableTwoFactorRequirementAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgEnableTwoFactorRequirementAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgInviteMemberAuditEntry:
		typename = "OrgInviteMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgInviteMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgInviteToBusinessAuditEntry:
		typename = "OrgInviteToBusinessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgInviteToBusinessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgOauthAppAccessApprovedAuditEntry:
		typename = "OrgOauthAppAccessApprovedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgOauthAppAccessApprovedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgOauthAppAccessDeniedAuditEntry:
		typename = "OrgOauthAppAccessDeniedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgOauthAppAccessDeniedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgOauthAppAccessRequestedAuditEntry:
		typename = "OrgOauthAppAccessRequestedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgOauthAppAccessRequestedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgRemoveBillingManagerAuditEntry:
		typename = "OrgRemoveBillingManagerAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgRemoveBillingManagerAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgRemoveMemberAuditEntry:
		typename = "OrgRemoveMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgRemoveMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgRemoveOutsideCollaboratorAuditEntry:
		typename = "OrgRemoveOutsideCollaboratorAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgRemoveOutsideCollaboratorAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgRestoreMemberAuditEntry:
		typename = "OrgRestoreMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgRestoreMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgUnblockUserAuditEntry:
		typename = "OrgUnblockUserAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgUnblockUserAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgUpdateDefaultRepositoryPermissionAuditEntry:
		typename = "OrgUpdateDefaultRepositoryPermissionAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgUpdateDefaultRepositoryPermissionAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgUpdateMemberAuditEntry:
		typename = "OrgUpdateMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgUpdateMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgUpdateMemberRepositoryCreationPermissionAuditEntry:
		typename = "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgUpdateMemberRepositoryCreationPermissionAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrgUpdateMemberRepositoryInvitationPermissionAuditEntry:
		typename = "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrganization
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrganizationIdentityProvider:
		typename = "OrganizationIdentityProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrganizationIdentityProvider
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeOrganizationInvitation:
		typename = "OrganizationInvitation"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeOrganizationInvitation
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePackage:
		typename = "Package"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePackage
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePackageFile:
		typename = "PackageFile"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePackageFile
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePackageTag:
		typename = "PackageTag"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePackageTag
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePackageVersion:
		typename = "PackageVersion"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePackageVersion
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePinnedDiscussion:
		typename = "PinnedDiscussion"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePinnedDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePinnedEvent:
		typename = "PinnedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePinnedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePinnedIssue:
		typename = "PinnedIssue"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePinnedIssue
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePrivateRepositoryForkingDisableAuditEntry:
		typename = "PrivateRepositoryForkingDisableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePrivateRepositoryForkingDisableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePrivateRepositoryForkingEnableAuditEntry:
		typename = "PrivateRepositoryForkingEnableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePrivateRepositoryForkingEnableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProject:
		typename = "Project"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProject
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectCard:
		typename = "ProjectCard"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectCard
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectColumn:
		typename = "ProjectColumn"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectColumn
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectNext:
		typename = "ProjectNext"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectNext
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectNextField:
		typename = "ProjectNextField"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectNextField
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectNextItem:
		typename = "ProjectNextItem"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectNextItem
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectNextItemFieldValue:
		typename = "ProjectNextItemFieldValue"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectNextItemFieldValue
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectNextIterationField:
		typename = "ProjectNextIterationField"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectNextIterationField
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectNextSingleSelectField:
		typename = "ProjectNextSingleSelectField"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectNextSingleSelectField
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2:
		typename = "ProjectV2"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2Field:
		typename = "ProjectV2Field"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2Field
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2Item:
		typename = "ProjectV2Item"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2Item
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2ItemFieldDateValue:
		typename = "ProjectV2ItemFieldDateValue"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2ItemFieldDateValue
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2ItemFieldIterationValue:
		typename = "ProjectV2ItemFieldIterationValue"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2ItemFieldIterationValue
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2ItemFieldNumberValue:
		typename = "ProjectV2ItemFieldNumberValue"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2ItemFieldNumberValue
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2ItemFieldSingleSelectValue:
		typename = "ProjectV2ItemFieldSingleSelectValue"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2ItemFieldSingleSelectValue
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2ItemFieldTextValue:
		typename = "ProjectV2ItemFieldTextValue"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2ItemFieldTextValue
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2IterationField:
		typename = "ProjectV2IterationField"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2IterationField
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2SingleSelectField:
		typename = "ProjectV2SingleSelectField"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2SingleSelectField
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectV2View:
		typename = "ProjectV2View"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectV2View
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeProjectView:
		typename = "ProjectView"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeProjectView
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePublicKey:
		typename = "PublicKey"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePublicKey
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePullRequest:
		typename = "PullRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePullRequest
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePullRequestCommit:
		typename = "PullRequestCommit"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePullRequestCommit
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePullRequestCommitCommentThread:
		typename = "PullRequestCommitCommentThread"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePullRequestCommitCommentThread
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePullRequestReview:
		typename = "PullRequestReview"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePullRequestReview
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePullRequestReviewComment:
		typename = "PullRequestReviewComment"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePullRequestReviewComment
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePullRequestReviewThread:
		typename = "PullRequestReviewThread"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePullRequestReviewThread
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePullRequestThread:
		typename = "PullRequestThread"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePullRequestThread
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePush:
		typename = "Push"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePush
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodePushAllowance:
		typename = "PushAllowance"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodePushAllowance
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeReaction:
		typename = "Reaction"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeReaction
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeReadyForReviewEvent:
		typename = "ReadyForReviewEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeReadyForReviewEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRef:
		typename = "Ref"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRef
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeReferencedEvent:
		typename = "ReferencedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeReferencedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRelease:
		typename = "Release"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRelease
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeReleaseAsset:
		typename = "ReleaseAsset"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeReleaseAsset
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRemovedFromProjectEvent:
		typename = "RemovedFromProjectEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRemovedFromProjectEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRenamedTitleEvent:
		typename = "RenamedTitleEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRenamedTitleEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeReopenedEvent:
		typename = "ReopenedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeReopenedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoAccessAuditEntry:
		typename = "RepoAccessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoAccessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoAddMemberAuditEntry:
		typename = "RepoAddMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoAddMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoAddTopicAuditEntry:
		typename = "RepoAddTopicAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoAddTopicAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoArchivedAuditEntry:
		typename = "RepoArchivedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoArchivedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoChangeMergeSettingAuditEntry:
		typename = "RepoChangeMergeSettingAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoChangeMergeSettingAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoConfigDisableAnonymousGitAccessAuditEntry:
		typename = "RepoConfigDisableAnonymousGitAccessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoConfigDisableAnonymousGitAccessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoConfigDisableCollaboratorsOnlyAuditEntry:
		typename = "RepoConfigDisableCollaboratorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoConfigDisableCollaboratorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoConfigDisableContributorsOnlyAuditEntry:
		typename = "RepoConfigDisableContributorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoConfigDisableContributorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoConfigDisableSockpuppetDisallowedAuditEntry:
		typename = "RepoConfigDisableSockpuppetDisallowedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoConfigDisableSockpuppetDisallowedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoConfigEnableAnonymousGitAccessAuditEntry:
		typename = "RepoConfigEnableAnonymousGitAccessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoConfigEnableAnonymousGitAccessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoConfigEnableCollaboratorsOnlyAuditEntry:
		typename = "RepoConfigEnableCollaboratorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoConfigEnableCollaboratorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoConfigEnableContributorsOnlyAuditEntry:
		typename = "RepoConfigEnableContributorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoConfigEnableContributorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoConfigEnableSockpuppetDisallowedAuditEntry:
		typename = "RepoConfigEnableSockpuppetDisallowedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoConfigEnableSockpuppetDisallowedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoConfigLockAnonymousGitAccessAuditEntry:
		typename = "RepoConfigLockAnonymousGitAccessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoConfigLockAnonymousGitAccessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoConfigUnlockAnonymousGitAccessAuditEntry:
		typename = "RepoConfigUnlockAnonymousGitAccessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoConfigUnlockAnonymousGitAccessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoCreateAuditEntry:
		typename = "RepoCreateAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoCreateAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoDestroyAuditEntry:
		typename = "RepoDestroyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoDestroyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoRemoveMemberAuditEntry:
		typename = "RepoRemoveMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoRemoveMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepoRemoveTopicAuditEntry:
		typename = "RepoRemoveTopicAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepoRemoveTopicAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepository
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepositoryInvitation:
		typename = "RepositoryInvitation"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepositoryInvitation
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepositoryMigration:
		typename = "RepositoryMigration"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepositoryMigration
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepositoryTopic:
		typename = "RepositoryTopic"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepositoryTopic
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepositoryVisibilityChangeDisableAuditEntry:
		typename = "RepositoryVisibilityChangeDisableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepositoryVisibilityChangeDisableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepositoryVisibilityChangeEnableAuditEntry:
		typename = "RepositoryVisibilityChangeEnableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepositoryVisibilityChangeEnableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeRepositoryVulnerabilityAlert:
		typename = "RepositoryVulnerabilityAlert"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeRepositoryVulnerabilityAlert
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeReviewDismissalAllowance:
		typename = "ReviewDismissalAllowance"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeReviewDismissalAllowance
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeReviewDismissedEvent:
		typename = "ReviewDismissedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeReviewDismissedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeReviewRequest:
		typename = "ReviewRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeReviewRequest
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeReviewRequestRemovedEvent:
		typename = "ReviewRequestRemovedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeReviewRequestRemovedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeReviewRequestedEvent:
		typename = "ReviewRequestedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeReviewRequestedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeSavedReply:
		typename = "SavedReply"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeSavedReply
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeSecurityAdvisory:
		typename = "SecurityAdvisory"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeSecurityAdvisory
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeSponsorsActivity:
		typename = "SponsorsActivity"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeSponsorsActivity
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeSponsorsListing:
		typename = "SponsorsListing"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeSponsorsListing
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeSponsorsListingFeaturedItem:
		typename = "SponsorsListingFeaturedItem"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeSponsorsListingFeaturedItem
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeSponsorsTier:
		typename = "SponsorsTier"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeSponsorsTier
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeSponsorship:
		typename = "Sponsorship"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeSponsorship
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeSponsorshipNewsletter:
		typename = "SponsorshipNewsletter"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeSponsorshipNewsletter
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeStatus:
		typename = "Status"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeStatus
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeStatusCheckRollup:
		typename = "StatusCheckRollup"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeStatusCheckRollup
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeStatusContext:
		typename = "StatusContext"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeStatusContext
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeSubscribedEvent:
		typename = "SubscribedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeSubscribedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTeam:
		typename = "Team"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTeam
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTeamAddMemberAuditEntry:
		typename = "TeamAddMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTeamAddMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTeamAddRepositoryAuditEntry:
		typename = "TeamAddRepositoryAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTeamAddRepositoryAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTeamChangeParentTeamAuditEntry:
		typename = "TeamChangeParentTeamAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTeamChangeParentTeamAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTeamDiscussion:
		typename = "TeamDiscussion"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTeamDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTeamDiscussionComment:
		typename = "TeamDiscussionComment"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTeamDiscussionComment
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTeamRemoveMemberAuditEntry:
		typename = "TeamRemoveMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTeamRemoveMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTeamRemoveRepositoryAuditEntry:
		typename = "TeamRemoveRepositoryAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTeamRemoveRepositoryAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTopic:
		typename = "Topic"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTopic
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTransferredEvent:
		typename = "TransferredEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTransferredEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeTree:
		typename = "Tree"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeTree
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeUnassignedEvent:
		typename = "UnassignedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeUnassignedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeUnlabeledEvent:
		typename = "UnlabeledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeUnlabeledEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeUnlockedEvent:
		typename = "UnlockedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeUnlockedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeUnmarkedAsDuplicateEvent:
		typename = "UnmarkedAsDuplicateEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeUnmarkedAsDuplicateEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeUnpinnedEvent:
		typename = "UnpinnedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeUnpinnedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeUnsubscribedEvent:
		typename = "UnsubscribedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeUnsubscribedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeUserBlockedEvent:
		typename = "UserBlockedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeUserBlockedEvent
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeUserContentEdit:
		typename = "UserContentEdit"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeUserContentEdit
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeUserStatus:
		typename = "UserStatus"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeUserStatus
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeVerifiableDomain:
		typename = "VerifiableDomain"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeVerifiableDomain
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeWorkflow:
		typename = "Workflow"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeWorkflow
		}{typename, v}
		return json.Marshal(result)
	case *currentPendingReviewNodeWorkflowRun:
		typename = "WorkflowRun"

		result := struct {
			TypeName string `json:"__typename"`
			*currentPendingReviewNodeWorkflowRun
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for currentPendingReviewNode: "%T"`, v)
	}
}

// currentPendingReviewNodeAddedToProjectEvent includes the requested fields of the GraphQL type AddedToProjectEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'added_to_project' event on a given issue or pull request.
type currentPendingReviewNodeAddedToProjectEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeAddedToProjectEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeAddedToProjectEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// A GitHub App.
type currentPendingReviewNodeApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeApp.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeApp) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeAssignedEvent includes the requested fields of the GraphQL type AssignedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'assigned' event on any assignable object.
type currentPendingReviewNodeAssignedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeAssignedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeAssignedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeAutoMergeDisabledEvent includes the requested fields of the GraphQL type AutoMergeDisabledEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'auto_merge_disabled' event on a given pull request.
type currentPendingReviewNodeAutoMergeDisabledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeAutoMergeDisabledEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeAutoMergeDisabledEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeAutoMergeEnabledEvent includes the requested fields of the GraphQL type AutoMergeEnabledEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'auto_merge_enabled' event on a given pull request.
type currentPendingReviewNodeAutoMergeEnabledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeAutoMergeEnabledEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeAutoMergeEnabledEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeAutoRebaseEnabledEvent includes the requested fields of the GraphQL type AutoRebaseEnabledEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'auto_rebase_enabled' event on a given pull request.
type currentPendingReviewNodeAutoRebaseEnabledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeAutoRebaseEnabledEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeAutoRebaseEnabledEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeAutoSquashEnabledEvent includes the requested fields of the GraphQL type AutoSquashEnabledEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'auto_squash_enabled' event on a given pull request.
type currentPendingReviewNodeAutoSquashEnabledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeAutoSquashEnabledEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeAutoSquashEnabledEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeAutomaticBaseChangeFailedEvent includes the requested fields of the GraphQL type AutomaticBaseChangeFailedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'automatic_base_change_failed' event on a given pull request.
type currentPendingReviewNodeAutomaticBaseChangeFailedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeAutomaticBaseChangeFailedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeAutomaticBaseChangeFailedEvent) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeAutomaticBaseChangeSucceededEvent includes the requested fields of the GraphQL type AutomaticBaseChangeSucceededEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'automatic_base_change_succeeded' event on a given pull request.
type currentPendingReviewNodeAutomaticBaseChangeSucceededEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeAutomaticBaseChangeSucceededEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeAutomaticBaseChangeSucceededEvent) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeBaseRefChangedEvent includes the requested fields of the GraphQL type BaseRefChangedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'base_ref_changed' event on a given issue or pull request.
type currentPendingReviewNodeBaseRefChangedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeBaseRefChangedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeBaseRefChangedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeBaseRefDeletedEvent includes the requested fields of the GraphQL type BaseRefDeletedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'base_ref_deleted' event on a given pull request.
type currentPendingReviewNodeBaseRefDeletedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeBaseRefDeletedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeBaseRefDeletedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeBaseRefForcePushedEvent includes the requested fields of the GraphQL type BaseRefForcePushedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'base_ref_force_pushed' event on a given pull request.
type currentPendingReviewNodeBaseRefForcePushedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeBaseRefForcePushedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeBaseRefForcePushedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeBlob includes the requested fields of the GraphQL type Blob.
// The GraphQL type's documentation follows.
//
// Represents a Git blob.
type currentPendingReviewNodeBlob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeBlob.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeBlob) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeBot includes the requested fields of the GraphQL type Bot.
// The GraphQL type's documentation follows.
//
// A special type of user which takes actions on behalf of GitHub Apps.
type currentPendingReviewNodeBot struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeBot.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeBot) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeBranchProtectionRule includes the requested fields of the GraphQL type BranchProtectionRule.
// The GraphQL type's documentation follows.
//
// A branch protection rule.
type currentPendingReviewNodeBranchProtectionRule struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeBranchProtectionRule.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeBranchProtectionRule) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeBypassForcePushAllowance includes the requested fields of the GraphQL type BypassForcePushAllowance.
// The GraphQL type's documentation follows.
//
// A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
type currentPendingReviewNodeBypassForcePushAllowance struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeBypassForcePushAllowance.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeBypassForcePushAllowance) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeBypassPullRequestAllowance includes the requested fields of the GraphQL type BypassPullRequestAllowance.
// The GraphQL type's documentation follows.
//
// A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
type currentPendingReviewNodeBypassPullRequestAllowance struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeBypassPullRequestAllowance.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeBypassPullRequestAllowance) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeCWE includes the requested fields of the GraphQL type CWE.
// The GraphQL type's documentation follows.
//
// A common weakness enumeration
type currentPendingReviewNodeCWE struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeCWE.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeCWE) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeCheckRun includes the requested fields of the GraphQL type CheckRun.
// The GraphQL type's documentation follows.
//
// A check run.
type currentPendingReviewNodeCheckRun struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeCheckRun.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeCheckRun) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeCheckSuite includes the requested fields of the GraphQL type CheckSuite.
// The GraphQL type's documentation follows.
//
// A check suite.
type currentPendingReviewNodeCheckSuite struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeCheckSuite.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeCheckSuite) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeClosedEvent includes the requested fields of the GraphQL type ClosedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'closed' event on any `Closable`.
type currentPendingReviewNodeClosedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeClosedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeClosedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeCodeOfConduct includes the requested fields of the GraphQL type CodeOfConduct.
// The GraphQL type's documentation follows.
//
// The Code of Conduct for a repository
type currentPendingReviewNodeCodeOfConduct struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeCodeOfConduct.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeCodeOfConduct) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeCommentDeletedEvent includes the requested fields of the GraphQL type CommentDeletedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'comment_deleted' event on a given issue or pull request.
type currentPendingReviewNodeCommentDeletedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeCommentDeletedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeCommentDeletedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type currentPendingReviewNodeCommit struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeCommit.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeCommit) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeCommitComment includes the requested fields of the GraphQL type CommitComment.
// The GraphQL type's documentation follows.
//
// Represents a comment on a given Commit.
type currentPendingReviewNodeCommitComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeCommitComment.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeCommitComment) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeCommitCommentThread includes the requested fields of the GraphQL type CommitCommentThread.
// The GraphQL type's documentation follows.
//
// A thread of comments on a commit.
type currentPendingReviewNodeCommitCommentThread struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeCommitCommentThread.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeCommitCommentThread) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeComparison includes the requested fields of the GraphQL type Comparison.
// The GraphQL type's documentation follows.
//
// Represents a comparison between two commit revisions.
type currentPendingReviewNodeComparison struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeComparison.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeComparison) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeConnectedEvent includes the requested fields of the GraphQL type ConnectedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'connected' event on a given issue or pull request.
type currentPendingReviewNodeConnectedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeConnectedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeConnectedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeConvertToDraftEvent includes the requested fields of the GraphQL type ConvertToDraftEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'convert_to_draft' event on a given pull request.
type currentPendingReviewNodeConvertToDraftEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeConvertToDraftEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeConvertToDraftEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeConvertedNoteToIssueEvent includes the requested fields of the GraphQL type ConvertedNoteToIssueEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'converted_note_to_issue' event on a given issue or pull request.
type currentPendingReviewNodeConvertedNoteToIssueEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeConvertedNoteToIssueEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeConvertedNoteToIssueEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeConvertedToDiscussionEvent includes the requested fields of the GraphQL type ConvertedToDiscussionEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'converted_to_discussion' event on a given issue.
type currentPendingReviewNodeConvertedToDiscussionEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeConvertedToDiscussionEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeConvertedToDiscussionEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeCrossReferencedEvent includes the requested fields of the GraphQL type CrossReferencedEvent.
// The GraphQL type's documentation follows.
//
// Represents a mention made by one issue or pull request to another.
type currentPendingReviewNodeCrossReferencedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeCrossReferencedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeCrossReferencedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDemilestonedEvent includes the requested fields of the GraphQL type DemilestonedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'demilestoned' event on a given issue or pull request.
type currentPendingReviewNodeDemilestonedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDemilestonedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDemilestonedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDeployKey includes the requested fields of the GraphQL type DeployKey.
// The GraphQL type's documentation follows.
//
// A repository deploy key.
type currentPendingReviewNodeDeployKey struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDeployKey.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDeployKey) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDeployedEvent includes the requested fields of the GraphQL type DeployedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'deployed' event on a given pull request.
type currentPendingReviewNodeDeployedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDeployedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDeployedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDeployment includes the requested fields of the GraphQL type Deployment.
// The GraphQL type's documentation follows.
//
// Represents triggered deployment instance.
type currentPendingReviewNodeDeployment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDeployment.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDeployment) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDeploymentEnvironmentChangedEvent includes the requested fields of the GraphQL type DeploymentEnvironmentChangedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'deployment_environment_changed' event on a given pull request.
type currentPendingReviewNodeDeploymentEnvironmentChangedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDeploymentEnvironmentChangedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDeploymentEnvironmentChangedEvent) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeDeploymentReview includes the requested fields of the GraphQL type DeploymentReview.
// The GraphQL type's documentation follows.
//
// A deployment review.
type currentPendingReviewNodeDeploymentReview struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDeploymentReview.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDeploymentReview) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDeploymentStatus includes the requested fields of the GraphQL type DeploymentStatus.
// The GraphQL type's documentation follows.
//
// Describes the status of a given deployment attempt.
type currentPendingReviewNodeDeploymentStatus struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDeploymentStatus.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDeploymentStatus) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDisconnectedEvent includes the requested fields of the GraphQL type DisconnectedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'disconnected' event on a given issue or pull request.
type currentPendingReviewNodeDisconnectedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDisconnectedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDisconnectedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDiscussion includes the requested fields of the GraphQL type Discussion.
// The GraphQL type's documentation follows.
//
// A discussion in a repository.
type currentPendingReviewNodeDiscussion struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDiscussion.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDiscussion) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDiscussionCategory includes the requested fields of the GraphQL type DiscussionCategory.
// The GraphQL type's documentation follows.
//
// A category for discussions in a repository.
type currentPendingReviewNodeDiscussionCategory struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDiscussionCategory.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDiscussionCategory) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDiscussionComment includes the requested fields of the GraphQL type DiscussionComment.
// The GraphQL type's documentation follows.
//
// A comment on a discussion.
type currentPendingReviewNodeDiscussionComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDiscussionComment.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDiscussionComment) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDiscussionPoll includes the requested fields of the GraphQL type DiscussionPoll.
// The GraphQL type's documentation follows.
//
// A poll for a discussion.
type currentPendingReviewNodeDiscussionPoll struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDiscussionPoll.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDiscussionPoll) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDiscussionPollOption includes the requested fields of the GraphQL type DiscussionPollOption.
// The GraphQL type's documentation follows.
//
// An option for a discussion poll.
type currentPendingReviewNodeDiscussionPollOption struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDiscussionPollOption.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDiscussionPollOption) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeDraftIssue includes the requested fields of the GraphQL type DraftIssue.
// The GraphQL type's documentation follows.
//
// A draft issue within a project.
type currentPendingReviewNodeDraftIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeDraftIssue.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeDraftIssue) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeEnterprise includes the requested fields of the GraphQL type Enterprise.
// The GraphQL type's documentation follows.
//
// An account to manage multiple organizations with consolidated policy and billing.
type currentPendingReviewNodeEnterprise struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeEnterprise.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeEnterprise) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeEnterpriseAdministratorInvitation includes the requested fields of the GraphQL type EnterpriseAdministratorInvitation.
// The GraphQL type's documentation follows.
//
// An invitation for a user to become an owner or billing manager of an enterprise.
type currentPendingReviewNodeEnterpriseAdministratorInvitation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeEnterpriseAdministratorInvitation.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeEnterpriseAdministratorInvitation) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeEnterpriseIdentityProvider includes the requested fields of the GraphQL type EnterpriseIdentityProvider.
// The GraphQL type's documentation follows.
//
// An identity provider configured to provision identities for an enterprise.
type currentPendingReviewNodeEnterpriseIdentityProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeEnterpriseIdentityProvider.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeEnterpriseIdentityProvider) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeEnterpriseRepositoryInfo includes the requested fields of the GraphQL type EnterpriseRepositoryInfo.
// The GraphQL type's documentation follows.
//
// A subset of repository information queryable from an enterprise.
type currentPendingReviewNodeEnterpriseRepositoryInfo struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeEnterpriseRepositoryInfo.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeEnterpriseRepositoryInfo) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeEnterpriseServerInstallation includes the requested fields of the GraphQL type EnterpriseServerInstallation.
// The GraphQL type's documentation follows.
//
// An Enterprise Server installation.
type currentPendingReviewNodeEnterpriseServerInstallation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeEnterpriseServerInstallation.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeEnterpriseServerInstallation) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeEnterpriseServerUserAccount includes the requested fields of the GraphQL type EnterpriseServerUserAccount.
// The GraphQL type's documentation follows.
//
// A user account on an Enterprise Server installation.
type currentPendingReviewNodeEnterpriseServerUserAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeEnterpriseServerUserAccount.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeEnterpriseServerUserAccount) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeEnterpriseServerUserAccountEmail includes the requested fields of the GraphQL type EnterpriseServerUserAccountEmail.
// The GraphQL type's documentation follows.
//
// An email belonging to a user account on an Enterprise Server installation.
type currentPendingReviewNodeEnterpriseServerUserAccountEmail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeEnterpriseServerUserAccountEmail.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeEnterpriseServerUserAccountEmail) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeEnterpriseServerUserAccountsUpload includes the requested fields of the GraphQL type EnterpriseServerUserAccountsUpload.
// The GraphQL type's documentation follows.
//
// A user accounts upload from an Enterprise Server installation.
type currentPendingReviewNodeEnterpriseServerUserAccountsUpload struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeEnterpriseServerUserAccountsUpload.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeEnterpriseServerUserAccountsUpload) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeEnterpriseUserAccount includes the requested fields of the GraphQL type EnterpriseUserAccount.
// The GraphQL type's documentation follows.
//
// An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
type currentPendingReviewNodeEnterpriseUserAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeEnterpriseUserAccount.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeEnterpriseUserAccount) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeEnvironment includes the requested fields of the GraphQL type Environment.
// The GraphQL type's documentation follows.
//
// An environment.
type currentPendingReviewNodeEnvironment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeEnvironment.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeEnvironment) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeExternalIdentity includes the requested fields of the GraphQL type ExternalIdentity.
// The GraphQL type's documentation follows.
//
// An external identity provisioned by SAML SSO or SCIM.
type currentPendingReviewNodeExternalIdentity struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeExternalIdentity.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeExternalIdentity) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeGist includes the requested fields of the GraphQL type Gist.
// The GraphQL type's documentation follows.
//
// A Gist.
type currentPendingReviewNodeGist struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeGist.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeGist) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeGistComment includes the requested fields of the GraphQL type GistComment.
// The GraphQL type's documentation follows.
//
// Represents a comment on an Gist.
type currentPendingReviewNodeGistComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeGistComment.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeGistComment) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeHeadRefDeletedEvent includes the requested fields of the GraphQL type HeadRefDeletedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'head_ref_deleted' event on a given pull request.
type currentPendingReviewNodeHeadRefDeletedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeHeadRefDeletedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeHeadRefDeletedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeHeadRefForcePushedEvent includes the requested fields of the GraphQL type HeadRefForcePushedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'head_ref_force_pushed' event on a given pull request.
type currentPendingReviewNodeHeadRefForcePushedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeHeadRefForcePushedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeHeadRefForcePushedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeHeadRefRestoredEvent includes the requested fields of the GraphQL type HeadRefRestoredEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'head_ref_restored' event on a given pull request.
type currentPendingReviewNodeHeadRefRestoredEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeHeadRefRestoredEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeHeadRefRestoredEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeIpAllowListEntry includes the requested fields of the GraphQL type IpAllowListEntry.
// The GraphQL type's documentation follows.
//
// An IP address or range of addresses that is allowed to access an owner's resources.
type currentPendingReviewNodeIpAllowListEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeIpAllowListEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeIpAllowListEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type currentPendingReviewNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeIssue) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeIssueComment includes the requested fields of the GraphQL type IssueComment.
// The GraphQL type's documentation follows.
//
// Represents a comment on an Issue.
type currentPendingReviewNodeIssueComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeIssueComment.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeIssueComment) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type currentPendingReviewNodeLabel struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeLabel.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeLabel) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeLabeledEvent includes the requested fields of the GraphQL type LabeledEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'labeled' event on a given issue or pull request.
type currentPendingReviewNodeLabeledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeLabeledEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeLabeledEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeLanguage includes the requested fields of the GraphQL type Language.
// The GraphQL type's documentation follows.
//
// Represents a given language found in repositories.
type currentPendingReviewNodeLanguage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeLanguage.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeLanguage) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeLicense includes the requested fields of the GraphQL type License.
// The GraphQL type's documentation follows.
//
// A repository's open source license
type currentPendingReviewNodeLicense struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeLicense.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeLicense) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeLinkedBranch includes the requested fields of the GraphQL type LinkedBranch.
// The GraphQL type's documentation follows.
//
// A branch linked to an issue.
type currentPendingReviewNodeLinkedBranch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeLinkedBranch.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeLinkedBranch) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeLockedEvent includes the requested fields of the GraphQL type LockedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'locked' event on a given issue or pull request.
type currentPendingReviewNodeLockedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeLockedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeLockedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeMannequin includes the requested fields of the GraphQL type Mannequin.
// The GraphQL type's documentation follows.
//
// A placeholder user for attribution of imported data on GitHub.
type currentPendingReviewNodeMannequin struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMannequin.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMannequin) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeMarkedAsDuplicateEvent includes the requested fields of the GraphQL type MarkedAsDuplicateEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'marked_as_duplicate' event on a given issue or pull request.
type currentPendingReviewNodeMarkedAsDuplicateEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMarkedAsDuplicateEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMarkedAsDuplicateEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeMarketplaceCategory includes the requested fields of the GraphQL type MarketplaceCategory.
// The GraphQL type's documentation follows.
//
// A public description of a Marketplace category.
type currentPendingReviewNodeMarketplaceCategory struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMarketplaceCategory.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMarketplaceCategory) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeMarketplaceListing includes the requested fields of the GraphQL type MarketplaceListing.
// The GraphQL type's documentation follows.
//
// A listing in the GitHub integration marketplace.
type currentPendingReviewNodeMarketplaceListing struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMarketplaceListing.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMarketplaceListing) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeMembersCanDeleteReposClearAuditEntry includes the requested fields of the GraphQL type MembersCanDeleteReposClearAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a members_can_delete_repos.clear event.
type currentPendingReviewNodeMembersCanDeleteReposClearAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMembersCanDeleteReposClearAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMembersCanDeleteReposClearAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeMembersCanDeleteReposDisableAuditEntry includes the requested fields of the GraphQL type MembersCanDeleteReposDisableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a members_can_delete_repos.disable event.
type currentPendingReviewNodeMembersCanDeleteReposDisableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMembersCanDeleteReposDisableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMembersCanDeleteReposDisableAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeMembersCanDeleteReposEnableAuditEntry includes the requested fields of the GraphQL type MembersCanDeleteReposEnableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a members_can_delete_repos.enable event.
type currentPendingReviewNodeMembersCanDeleteReposEnableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMembersCanDeleteReposEnableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMembersCanDeleteReposEnableAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeMentionedEvent includes the requested fields of the GraphQL type MentionedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'mentioned' event on a given issue or pull request.
type currentPendingReviewNodeMentionedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMentionedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMentionedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeMergedEvent includes the requested fields of the GraphQL type MergedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'merged' event on a given pull request.
type currentPendingReviewNodeMergedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMergedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMergedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeMigrationSource includes the requested fields of the GraphQL type MigrationSource.
// The GraphQL type's documentation follows.
//
// A GitHub Enterprise Importer (GEI) migration source.
type currentPendingReviewNodeMigrationSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMigrationSource.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMigrationSource) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeMilestone includes the requested fields of the GraphQL type Milestone.
// The GraphQL type's documentation follows.
//
// Represents a Milestone object on a given repository.
type currentPendingReviewNodeMilestone struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMilestone.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMilestone) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeMilestonedEvent includes the requested fields of the GraphQL type MilestonedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'milestoned' event on a given issue or pull request.
type currentPendingReviewNodeMilestonedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMilestonedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMilestonedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeMovedColumnsInProjectEvent includes the requested fields of the GraphQL type MovedColumnsInProjectEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'moved_columns_in_project' event on a given issue or pull request.
type currentPendingReviewNodeMovedColumnsInProjectEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeMovedColumnsInProjectEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeMovedColumnsInProjectEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOIDCProvider includes the requested fields of the GraphQL type OIDCProvider.
// The GraphQL type's documentation follows.
//
// An OIDC identity provider configured to provision identities for an enterprise.
type currentPendingReviewNodeOIDCProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOIDCProvider.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOIDCProvider) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOauthApplicationCreateAuditEntry includes the requested fields of the GraphQL type OauthApplicationCreateAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a oauth_application.create event.
type currentPendingReviewNodeOauthApplicationCreateAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOauthApplicationCreateAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOauthApplicationCreateAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgAddBillingManagerAuditEntry includes the requested fields of the GraphQL type OrgAddBillingManagerAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.add_billing_manager
type currentPendingReviewNodeOrgAddBillingManagerAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgAddBillingManagerAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgAddBillingManagerAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgAddMemberAuditEntry includes the requested fields of the GraphQL type OrgAddMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.add_member
type currentPendingReviewNodeOrgAddMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgAddMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgAddMemberAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrgBlockUserAuditEntry includes the requested fields of the GraphQL type OrgBlockUserAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.block_user
type currentPendingReviewNodeOrgBlockUserAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgBlockUserAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgBlockUserAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrgConfigDisableCollaboratorsOnlyAuditEntry includes the requested fields of the GraphQL type OrgConfigDisableCollaboratorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.config.disable_collaborators_only event.
type currentPendingReviewNodeOrgConfigDisableCollaboratorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgConfigDisableCollaboratorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgConfigDisableCollaboratorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgConfigEnableCollaboratorsOnlyAuditEntry includes the requested fields of the GraphQL type OrgConfigEnableCollaboratorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.config.enable_collaborators_only event.
type currentPendingReviewNodeOrgConfigEnableCollaboratorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgConfigEnableCollaboratorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgConfigEnableCollaboratorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgCreateAuditEntry includes the requested fields of the GraphQL type OrgCreateAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.create event.
type currentPendingReviewNodeOrgCreateAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgCreateAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgCreateAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrgDisableOauthAppRestrictionsAuditEntry includes the requested fields of the GraphQL type OrgDisableOauthAppRestrictionsAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.disable_oauth_app_restrictions event.
type currentPendingReviewNodeOrgDisableOauthAppRestrictionsAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgDisableOauthAppRestrictionsAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgDisableOauthAppRestrictionsAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgDisableSamlAuditEntry includes the requested fields of the GraphQL type OrgDisableSamlAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.disable_saml event.
type currentPendingReviewNodeOrgDisableSamlAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgDisableSamlAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgDisableSamlAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrgDisableTwoFactorRequirementAuditEntry includes the requested fields of the GraphQL type OrgDisableTwoFactorRequirementAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.disable_two_factor_requirement event.
type currentPendingReviewNodeOrgDisableTwoFactorRequirementAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgDisableTwoFactorRequirementAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgDisableTwoFactorRequirementAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgEnableOauthAppRestrictionsAuditEntry includes the requested fields of the GraphQL type OrgEnableOauthAppRestrictionsAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.enable_oauth_app_restrictions event.
type currentPendingReviewNodeOrgEnableOauthAppRestrictionsAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgEnableOauthAppRestrictionsAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgEnableOauthAppRestrictionsAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgEnableSamlAuditEntry includes the requested fields of the GraphQL type OrgEnableSamlAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.enable_saml event.
type currentPendingReviewNodeOrgEnableSamlAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgEnableSamlAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgEnableSamlAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrgEnableTwoFactorRequirementAuditEntry includes the requested fields of the GraphQL type OrgEnableTwoFactorRequirementAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.enable_two_factor_requirement event.
type currentPendingReviewNodeOrgEnableTwoFactorRequirementAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgEnableTwoFactorRequirementAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgEnableTwoFactorRequirementAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgInviteMemberAuditEntry includes the requested fields of the GraphQL type OrgInviteMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.invite_member event.
type currentPendingReviewNodeOrgInviteMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgInviteMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgInviteMemberAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrgInviteToBusinessAuditEntry includes the requested fields of the GraphQL type OrgInviteToBusinessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.invite_to_business event.
type currentPendingReviewNodeOrgInviteToBusinessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgInviteToBusinessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgInviteToBusinessAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgOauthAppAccessApprovedAuditEntry includes the requested fields of the GraphQL type OrgOauthAppAccessApprovedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.oauth_app_access_approved event.
type currentPendingReviewNodeOrgOauthAppAccessApprovedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgOauthAppAccessApprovedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgOauthAppAccessApprovedAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgOauthAppAccessDeniedAuditEntry includes the requested fields of the GraphQL type OrgOauthAppAccessDeniedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.oauth_app_access_denied event.
type currentPendingReviewNodeOrgOauthAppAccessDeniedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgOauthAppAccessDeniedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgOauthAppAccessDeniedAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgOauthAppAccessRequestedAuditEntry includes the requested fields of the GraphQL type OrgOauthAppAccessRequestedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.oauth_app_access_requested event.
type currentPendingReviewNodeOrgOauthAppAccessRequestedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgOauthAppAccessRequestedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgOauthAppAccessRequestedAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgRemoveBillingManagerAuditEntry includes the requested fields of the GraphQL type OrgRemoveBillingManagerAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.remove_billing_manager event.
type currentPendingReviewNodeOrgRemoveBillingManagerAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgRemoveBillingManagerAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgRemoveBillingManagerAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgRemoveMemberAuditEntry includes the requested fields of the GraphQL type OrgRemoveMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.remove_member event.
type currentPendingReviewNodeOrgRemoveMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgRemoveMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgRemoveMemberAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrgRemoveOutsideCollaboratorAuditEntry includes the requested fields of the GraphQL type OrgRemoveOutsideCollaboratorAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.remove_outside_collaborator event.
type currentPendingReviewNodeOrgRemoveOutsideCollaboratorAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgRemoveOutsideCollaboratorAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgRemoveOutsideCollaboratorAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgRestoreMemberAuditEntry includes the requested fields of the GraphQL type OrgRestoreMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.restore_member event.
type currentPendingReviewNodeOrgRestoreMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgRestoreMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgRestoreMemberAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrgUnblockUserAuditEntry includes the requested fields of the GraphQL type OrgUnblockUserAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.unblock_user
type currentPendingReviewNodeOrgUnblockUserAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgUnblockUserAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgUnblockUserAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrgUpdateDefaultRepositoryPermissionAuditEntry includes the requested fields of the GraphQL type OrgUpdateDefaultRepositoryPermissionAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.update_default_repository_permission
type currentPendingReviewNodeOrgUpdateDefaultRepositoryPermissionAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgUpdateDefaultRepositoryPermissionAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgUpdateDefaultRepositoryPermissionAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgUpdateMemberAuditEntry includes the requested fields of the GraphQL type OrgUpdateMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.update_member event.
type currentPendingReviewNodeOrgUpdateMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgUpdateMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgUpdateMemberAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrgUpdateMemberRepositoryCreationPermissionAuditEntry includes the requested fields of the GraphQL type OrgUpdateMemberRepositoryCreationPermissionAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.update_member_repository_creation_permission event.
type currentPendingReviewNodeOrgUpdateMemberRepositoryCreationPermissionAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgUpdateMemberRepositoryCreationPermissionAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrgUpdateMemberRepositoryInvitationPermissionAuditEntry includes the requested fields of the GraphQL type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.update_member_repository_invitation_permission event.
type currentPendingReviewNodeOrgUpdateMemberRepositoryInvitationPermissionAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrgUpdateMemberRepositoryInvitationPermissionAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type currentPendingReviewNodeOrganization struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrganization.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrganization) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeOrganizationIdentityProvider includes the requested fields of the GraphQL type OrganizationIdentityProvider.
// The GraphQL type's documentation follows.
//
// An Identity Provider configured to provision SAML and SCIM identities for Organizations
type currentPendingReviewNodeOrganizationIdentityProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrganizationIdentityProvider.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrganizationIdentityProvider) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeOrganizationInvitation includes the requested fields of the GraphQL type OrganizationInvitation.
// The GraphQL type's documentation follows.
//
// An Invitation for a user to an organization.
type currentPendingReviewNodeOrganizationInvitation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeOrganizationInvitation.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeOrganizationInvitation) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Information for an uploaded package.
type currentPendingReviewNodePackage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePackage.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePackage) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePackageFile includes the requested fields of the GraphQL type PackageFile.
// The GraphQL type's documentation follows.
//
// A file in a package version.
type currentPendingReviewNodePackageFile struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePackageFile.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePackageFile) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePackageTag includes the requested fields of the GraphQL type PackageTag.
// The GraphQL type's documentation follows.
//
// A version tag contains the mapping between a tag name and a version.
type currentPendingReviewNodePackageTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePackageTag.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePackageTag) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePackageVersion includes the requested fields of the GraphQL type PackageVersion.
// The GraphQL type's documentation follows.
//
// Information about a specific package version.
type currentPendingReviewNodePackageVersion struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePackageVersion.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePackageVersion) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePinnedDiscussion includes the requested fields of the GraphQL type PinnedDiscussion.
// The GraphQL type's documentation follows.
//
// A Pinned Discussion is a discussion pinned to a repository's index page.
type currentPendingReviewNodePinnedDiscussion struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePinnedDiscussion.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePinnedDiscussion) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePinnedEvent includes the requested fields of the GraphQL type PinnedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'pinned' event on a given issue or pull request.
type currentPendingReviewNodePinnedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePinnedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePinnedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePinnedIssue includes the requested fields of the GraphQL type PinnedIssue.
// The GraphQL type's documentation follows.
//
// A Pinned Issue is a issue pinned to a repository's index page.
type currentPendingReviewNodePinnedIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePinnedIssue.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePinnedIssue) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePrivateRepositoryForkingDisableAuditEntry includes the requested fields of the GraphQL type PrivateRepositoryForkingDisableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a private_repository_forking.disable event.
type currentPendingReviewNodePrivateRepositoryForkingDisableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePrivateRepositoryForkingDisableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePrivateRepositoryForkingDisableAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodePrivateRepositoryForkingEnableAuditEntry includes the requested fields of the GraphQL type PrivateRepositoryForkingEnableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a private_repository_forking.enable event.
type currentPendingReviewNodePrivateRepositoryForkingEnableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePrivateRepositoryForkingEnableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePrivateRepositoryForkingEnableAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Projects manage issues, pull requests and notes within a project owner.
type currentPendingReviewNodeProject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProject.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProject) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectCard includes the requested fields of the GraphQL type ProjectCard.
// The GraphQL type's documentation follows.
//
// A card in a project.
type currentPendingReviewNodeProjectCard struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectCard.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectCard) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectColumn includes the requested fields of the GraphQL type ProjectColumn.
// The GraphQL type's documentation follows.
//
// A column inside a project.
type currentPendingReviewNodeProjectColumn struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectColumn.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectColumn) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectNext includes the requested fields of the GraphQL type ProjectNext.
// The GraphQL type's documentation follows.
//
// New projects that manage issues, pull requests and drafts using tables and boards.
type currentPendingReviewNodeProjectNext struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectNext.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectNext) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectNextField includes the requested fields of the GraphQL type ProjectNextField.
// The GraphQL type's documentation follows.
//
// A field inside a project.
type currentPendingReviewNodeProjectNextField struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectNextField.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectNextField) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectNextItem includes the requested fields of the GraphQL type ProjectNextItem.
// The GraphQL type's documentation follows.
//
// An item within a new Project.
type currentPendingReviewNodeProjectNextItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectNextItem.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectNextItem) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectNextItemFieldValue includes the requested fields of the GraphQL type ProjectNextItemFieldValue.
// The GraphQL type's documentation follows.
//
// An value of a field in an item of a new Project.
type currentPendingReviewNodeProjectNextItemFieldValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectNextItemFieldValue.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectNextItemFieldValue) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectNextIterationField includes the requested fields of the GraphQL type ProjectNextIterationField.
// The GraphQL type's documentation follows.
//
// An iteration field inside a project.
type currentPendingReviewNodeProjectNextIterationField struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectNextIterationField.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectNextIterationField) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectNextSingleSelectField includes the requested fields of the GraphQL type ProjectNextSingleSelectField.
// The GraphQL type's documentation follows.
//
// A single select field inside a project.
type currentPendingReviewNodeProjectNextSingleSelectField struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectNextSingleSelectField.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectNextSingleSelectField) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeProjectV2 includes the requested fields of the GraphQL type ProjectV2.
// The GraphQL type's documentation follows.
//
// New projects that manage issues, pull requests and drafts using tables and boards.
type currentPendingReviewNodeProjectV2 struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectV2Field includes the requested fields of the GraphQL type ProjectV2Field.
// The GraphQL type's documentation follows.
//
// A field inside a project.
type currentPendingReviewNodeProjectV2Field struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2Field.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2Field) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectV2Item includes the requested fields of the GraphQL type ProjectV2Item.
// The GraphQL type's documentation follows.
//
// An item within a Project.
type currentPendingReviewNodeProjectV2Item struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2Item.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2Item) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectV2ItemFieldDateValue includes the requested fields of the GraphQL type ProjectV2ItemFieldDateValue.
// The GraphQL type's documentation follows.
//
// The value of a date field in a Project item.
type currentPendingReviewNodeProjectV2ItemFieldDateValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2ItemFieldDateValue.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2ItemFieldDateValue) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeProjectV2ItemFieldIterationValue includes the requested fields of the GraphQL type ProjectV2ItemFieldIterationValue.
// The GraphQL type's documentation follows.
//
// The value of an iteration field in a Project item.
type currentPendingReviewNodeProjectV2ItemFieldIterationValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2ItemFieldIterationValue.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2ItemFieldIterationValue) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeProjectV2ItemFieldNumberValue includes the requested fields of the GraphQL type ProjectV2ItemFieldNumberValue.
// The GraphQL type's documentation follows.
//
// The value of a number field in a Project item.
type currentPendingReviewNodeProjectV2ItemFieldNumberValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2ItemFieldNumberValue.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2ItemFieldNumberValue) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeProjectV2ItemFieldSingleSelectValue includes the requested fields of the GraphQL type ProjectV2ItemFieldSingleSelectValue.
// The GraphQL type's documentation follows.
//
// The value of a single select field in a Project item.
type currentPendingReviewNodeProjectV2ItemFieldSingleSelectValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2ItemFieldSingleSelectValue.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2ItemFieldSingleSelectValue) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeProjectV2ItemFieldTextValue includes the requested fields of the GraphQL type ProjectV2ItemFieldTextValue.
// The GraphQL type's documentation follows.
//
// The value of a text field in a Project item.
type currentPendingReviewNodeProjectV2ItemFieldTextValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2ItemFieldTextValue.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2ItemFieldTextValue) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeProjectV2IterationField includes the requested fields of the GraphQL type ProjectV2IterationField.
// The GraphQL type's documentation follows.
//
// An iteration field inside a project.
type currentPendingReviewNodeProjectV2IterationField struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2IterationField.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2IterationField) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectV2SingleSelectField includes the requested fields of the GraphQL type ProjectV2SingleSelectField.
// The GraphQL type's documentation follows.
//
// A single select field inside a project.
type currentPendingReviewNodeProjectV2SingleSelectField struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2SingleSelectField.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2SingleSelectField) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectV2View includes the requested fields of the GraphQL type ProjectV2View.
// The GraphQL type's documentation follows.
//
// A view within a ProjectV2.
type currentPendingReviewNodeProjectV2View struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectV2View.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectV2View) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeProjectView includes the requested fields of the GraphQL type ProjectView.
// The GraphQL type's documentation follows.
//
// A view within a Project.
type currentPendingReviewNodeProjectView struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeProjectView.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeProjectView) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePublicKey includes the requested fields of the GraphQL type PublicKey.
// The GraphQL type's documentation follows.
//
// A user's public key.
type currentPendingReviewNodePublicKey struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePublicKey.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePublicKey) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type currentPendingReviewNodePullRequest struct {
	Typename *string `json:"__typename"`
	// A list of reviews associated with the pull request.
	Reviews *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnection `json:"reviews"`
}

// GetTypename returns currentPendingReviewNodePullRequest.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequest) GetTypename() *string { return v.Typename }

// GetReviews returns currentPendingReviewNodePullRequest.Reviews, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequest) GetReviews() *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnection {
	return v.Reviews
}

// currentPendingReviewNodePullRequestCommit includes the requested fields of the GraphQL type PullRequestCommit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit part of a pull request.
type currentPendingReviewNodePullRequestCommit struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePullRequestCommit.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestCommit) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePullRequestCommitCommentThread includes the requested fields of the GraphQL type PullRequestCommitCommentThread.
// The GraphQL type's documentation follows.
//
// Represents a commit comment thread part of a pull request.
type currentPendingReviewNodePullRequestCommitCommentThread struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePullRequestCommitCommentThread.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestCommitCommentThread) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodePullRequestReview includes the requested fields of the GraphQL type PullRequestReview.
// The GraphQL type's documentation follows.
//
// A review object for a given pull request.
type currentPendingReviewNodePullRequestReview struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePullRequestReview.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReview) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePullRequestReviewComment includes the requested fields of the GraphQL type PullRequestReviewComment.
// The GraphQL type's documentation follows.
//
// A review comment associated with a given repository pull request.
type currentPendingReviewNodePullRequestReviewComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePullRequestReviewComment.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReviewComment) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePullRequestReviewThread includes the requested fields of the GraphQL type PullRequestReviewThread.
// The GraphQL type's documentation follows.
//
// A threaded list of comments for a given pull request.
type currentPendingReviewNodePullRequestReviewThread struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePullRequestReviewThread.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReviewThread) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePullRequestReviewsPullRequestReviewConnection includes the requested fields of the GraphQL type PullRequestReviewConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequestReview.
type currentPendingReviewNodePullRequestReviewsPullRequestReviewConnection struct {
	// A list of nodes.
	Nodes []*currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview `json:"nodes"`
}

// GetNodes returns currentPendingReviewNodePullRequestReviewsPullRequestReviewConnection.Nodes, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnection) GetNodes() []*currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview {
	return v.Nodes
}

// currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview includes the requested fields of the GraphQL type PullRequestReview.
// The GraphQL type's documentation follows.
//
// A review object for a given pull request.
type currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview struct {
	ReviewInfo `json:"-"`
}

// GetState returns currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.State, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetState() PullRequestReviewState {
	return v.ReviewInfo.State
}

// GetId returns currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.Id, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetId() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.Id
}

// GetAuthor returns currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.Author, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.Author
}

// GetRaw returns currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.Raw, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetRaw() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.Raw
}

// GetBodyText returns currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.BodyText, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetBodyText() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyText
}

// GetBodyHTML returns currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.BodyHTML, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetBodyHTML() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyHTML
}

// GetCreatedAt returns currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.CreatedAt, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetCreatedAt() time.Time {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.CreatedAt
}

func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview
		graphql.NoUnmarshalJSON
	}
	firstPass.currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ReviewInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcurrentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview struct {
	State PullRequestReviewState `json:"state"`

	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) __premarshalJSON() (*__premarshalcurrentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview, error) {
	var retval __premarshalcurrentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview

	retval.State = v.ReviewInfo.State
	retval.Id = v.ReviewInfo.CommonCommentInfoPullRequestReview.Id
	{

		dst := &retval.Author
		src := v.ReviewInfo.CommonCommentInfoPullRequestReview.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal currentPendingReviewNodePullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.ReviewInfo.CommonCommentInfoPullRequestReview.Author: %w", err)
			}
		}
	}
	retval.Raw = v.ReviewInfo.CommonCommentInfoPullRequestReview.Raw
	retval.BodyText = v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyText
	retval.BodyHTML = v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyHTML
	retval.CreatedAt = v.ReviewInfo.CommonCommentInfoPullRequestReview.CreatedAt
	return &retval, nil
}

// currentPendingReviewNodePullRequestThread includes the requested fields of the GraphQL type PullRequestThread.
// The GraphQL type's documentation follows.
//
// A threaded list of comments for a given pull request.
type currentPendingReviewNodePullRequestThread struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePullRequestThread.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePullRequestThread) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePush includes the requested fields of the GraphQL type Push.
// The GraphQL type's documentation follows.
//
// A Git push.
type currentPendingReviewNodePush struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePush.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePush) GetTypename() *string { return v.Typename }

// currentPendingReviewNodePushAllowance includes the requested fields of the GraphQL type PushAllowance.
// The GraphQL type's documentation follows.
//
// A team, user, or app who has the ability to push to a protected branch.
type currentPendingReviewNodePushAllowance struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodePushAllowance.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodePushAllowance) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeReaction includes the requested fields of the GraphQL type Reaction.
// The GraphQL type's documentation follows.
//
// An emoji reaction to a particular piece of content.
type currentPendingReviewNodeReaction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeReaction.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeReaction) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeReadyForReviewEvent includes the requested fields of the GraphQL type ReadyForReviewEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'ready_for_review' event on a given pull request.
type currentPendingReviewNodeReadyForReviewEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeReadyForReviewEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeReadyForReviewEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type currentPendingReviewNodeRef struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRef.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRef) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeReferencedEvent includes the requested fields of the GraphQL type ReferencedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'referenced' event on a given `ReferencedSubject`.
type currentPendingReviewNodeReferencedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeReferencedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeReferencedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRelease includes the requested fields of the GraphQL type Release.
// The GraphQL type's documentation follows.
//
// A release contains the content for a release.
type currentPendingReviewNodeRelease struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRelease.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRelease) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeReleaseAsset includes the requested fields of the GraphQL type ReleaseAsset.
// The GraphQL type's documentation follows.
//
// A release asset contains the content for a release asset.
type currentPendingReviewNodeReleaseAsset struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeReleaseAsset.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeReleaseAsset) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRemovedFromProjectEvent includes the requested fields of the GraphQL type RemovedFromProjectEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'removed_from_project' event on a given issue or pull request.
type currentPendingReviewNodeRemovedFromProjectEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRemovedFromProjectEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRemovedFromProjectEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRenamedTitleEvent includes the requested fields of the GraphQL type RenamedTitleEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'renamed' event on a given issue or pull request
type currentPendingReviewNodeRenamedTitleEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRenamedTitleEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRenamedTitleEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeReopenedEvent includes the requested fields of the GraphQL type ReopenedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'reopened' event on any `Closable`.
type currentPendingReviewNodeReopenedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeReopenedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeReopenedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepoAccessAuditEntry includes the requested fields of the GraphQL type RepoAccessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.access event.
type currentPendingReviewNodeRepoAccessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoAccessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoAccessAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepoAddMemberAuditEntry includes the requested fields of the GraphQL type RepoAddMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.add_member event.
type currentPendingReviewNodeRepoAddMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoAddMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoAddMemberAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepoAddTopicAuditEntry includes the requested fields of the GraphQL type RepoAddTopicAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.add_topic event.
type currentPendingReviewNodeRepoAddTopicAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoAddTopicAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoAddTopicAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepoArchivedAuditEntry includes the requested fields of the GraphQL type RepoArchivedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.archived event.
type currentPendingReviewNodeRepoArchivedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoArchivedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoArchivedAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepoChangeMergeSettingAuditEntry includes the requested fields of the GraphQL type RepoChangeMergeSettingAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.change_merge_setting event.
type currentPendingReviewNodeRepoChangeMergeSettingAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoChangeMergeSettingAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoChangeMergeSettingAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoConfigDisableAnonymousGitAccessAuditEntry includes the requested fields of the GraphQL type RepoConfigDisableAnonymousGitAccessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.disable_anonymous_git_access event.
type currentPendingReviewNodeRepoConfigDisableAnonymousGitAccessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoConfigDisableAnonymousGitAccessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoConfigDisableAnonymousGitAccessAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoConfigDisableCollaboratorsOnlyAuditEntry includes the requested fields of the GraphQL type RepoConfigDisableCollaboratorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.disable_collaborators_only event.
type currentPendingReviewNodeRepoConfigDisableCollaboratorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoConfigDisableCollaboratorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoConfigDisableCollaboratorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoConfigDisableContributorsOnlyAuditEntry includes the requested fields of the GraphQL type RepoConfigDisableContributorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.disable_contributors_only event.
type currentPendingReviewNodeRepoConfigDisableContributorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoConfigDisableContributorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoConfigDisableContributorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoConfigDisableSockpuppetDisallowedAuditEntry includes the requested fields of the GraphQL type RepoConfigDisableSockpuppetDisallowedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
type currentPendingReviewNodeRepoConfigDisableSockpuppetDisallowedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoConfigDisableSockpuppetDisallowedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoConfigDisableSockpuppetDisallowedAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoConfigEnableAnonymousGitAccessAuditEntry includes the requested fields of the GraphQL type RepoConfigEnableAnonymousGitAccessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.enable_anonymous_git_access event.
type currentPendingReviewNodeRepoConfigEnableAnonymousGitAccessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoConfigEnableAnonymousGitAccessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoConfigEnableAnonymousGitAccessAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoConfigEnableCollaboratorsOnlyAuditEntry includes the requested fields of the GraphQL type RepoConfigEnableCollaboratorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.enable_collaborators_only event.
type currentPendingReviewNodeRepoConfigEnableCollaboratorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoConfigEnableCollaboratorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoConfigEnableCollaboratorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoConfigEnableContributorsOnlyAuditEntry includes the requested fields of the GraphQL type RepoConfigEnableContributorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.enable_contributors_only event.
type currentPendingReviewNodeRepoConfigEnableContributorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoConfigEnableContributorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoConfigEnableContributorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoConfigEnableSockpuppetDisallowedAuditEntry includes the requested fields of the GraphQL type RepoConfigEnableSockpuppetDisallowedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
type currentPendingReviewNodeRepoConfigEnableSockpuppetDisallowedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoConfigEnableSockpuppetDisallowedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoConfigEnableSockpuppetDisallowedAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoConfigLockAnonymousGitAccessAuditEntry includes the requested fields of the GraphQL type RepoConfigLockAnonymousGitAccessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.lock_anonymous_git_access event.
type currentPendingReviewNodeRepoConfigLockAnonymousGitAccessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoConfigLockAnonymousGitAccessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoConfigLockAnonymousGitAccessAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoConfigUnlockAnonymousGitAccessAuditEntry includes the requested fields of the GraphQL type RepoConfigUnlockAnonymousGitAccessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.unlock_anonymous_git_access event.
type currentPendingReviewNodeRepoConfigUnlockAnonymousGitAccessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoConfigUnlockAnonymousGitAccessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoConfigUnlockAnonymousGitAccessAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepoCreateAuditEntry includes the requested fields of the GraphQL type RepoCreateAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.create event.
type currentPendingReviewNodeRepoCreateAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoCreateAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoCreateAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepoDestroyAuditEntry includes the requested fields of the GraphQL type RepoDestroyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.destroy event.
type currentPendingReviewNodeRepoDestroyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoDestroyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoDestroyAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepoRemoveMemberAuditEntry includes the requested fields of the GraphQL type RepoRemoveMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.remove_member event.
type currentPendingReviewNodeRepoRemoveMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoRemoveMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoRemoveMemberAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepoRemoveTopicAuditEntry includes the requested fields of the GraphQL type RepoRemoveTopicAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.remove_topic event.
type currentPendingReviewNodeRepoRemoveTopicAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepoRemoveTopicAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepoRemoveTopicAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type currentPendingReviewNodeRepository struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepository.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepository) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepositoryInvitation includes the requested fields of the GraphQL type RepositoryInvitation.
// The GraphQL type's documentation follows.
//
// An invitation for a user to be added to a repository.
type currentPendingReviewNodeRepositoryInvitation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepositoryInvitation.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepositoryInvitation) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepositoryMigration includes the requested fields of the GraphQL type RepositoryMigration.
// The GraphQL type's documentation follows.
//
// A GitHub Enterprise Importer (GEI) repository migration.
type currentPendingReviewNodeRepositoryMigration struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepositoryMigration.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepositoryMigration) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepositoryTopic includes the requested fields of the GraphQL type RepositoryTopic.
// The GraphQL type's documentation follows.
//
// A repository-topic connects a repository to a topic.
type currentPendingReviewNodeRepositoryTopic struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepositoryTopic.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepositoryTopic) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeRepositoryVisibilityChangeDisableAuditEntry includes the requested fields of the GraphQL type RepositoryVisibilityChangeDisableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repository_visibility_change.disable event.
type currentPendingReviewNodeRepositoryVisibilityChangeDisableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepositoryVisibilityChangeDisableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepositoryVisibilityChangeDisableAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepositoryVisibilityChangeEnableAuditEntry includes the requested fields of the GraphQL type RepositoryVisibilityChangeEnableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repository_visibility_change.enable event.
type currentPendingReviewNodeRepositoryVisibilityChangeEnableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepositoryVisibilityChangeEnableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepositoryVisibilityChangeEnableAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeRepositoryVulnerabilityAlert includes the requested fields of the GraphQL type RepositoryVulnerabilityAlert.
// The GraphQL type's documentation follows.
//
// A Dependabot alert for a repository with a dependency affected by a security vulnerability.
type currentPendingReviewNodeRepositoryVulnerabilityAlert struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeRepositoryVulnerabilityAlert.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeRepositoryVulnerabilityAlert) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeReviewDismissalAllowance includes the requested fields of the GraphQL type ReviewDismissalAllowance.
// The GraphQL type's documentation follows.
//
// A user, team, or app who has the ability to dismiss a review on a protected branch.
type currentPendingReviewNodeReviewDismissalAllowance struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeReviewDismissalAllowance.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeReviewDismissalAllowance) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeReviewDismissedEvent includes the requested fields of the GraphQL type ReviewDismissedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'review_dismissed' event on a given issue or pull request.
type currentPendingReviewNodeReviewDismissedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeReviewDismissedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeReviewDismissedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeReviewRequest includes the requested fields of the GraphQL type ReviewRequest.
// The GraphQL type's documentation follows.
//
// A request for a user to review a pull request.
type currentPendingReviewNodeReviewRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeReviewRequest.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeReviewRequest) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeReviewRequestRemovedEvent includes the requested fields of the GraphQL type ReviewRequestRemovedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'review_request_removed' event on a given pull request.
type currentPendingReviewNodeReviewRequestRemovedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeReviewRequestRemovedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeReviewRequestRemovedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeReviewRequestedEvent includes the requested fields of the GraphQL type ReviewRequestedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'review_requested' event on a given pull request.
type currentPendingReviewNodeReviewRequestedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeReviewRequestedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeReviewRequestedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeSavedReply includes the requested fields of the GraphQL type SavedReply.
// The GraphQL type's documentation follows.
//
// A Saved Reply is text a user can use to reply quickly.
type currentPendingReviewNodeSavedReply struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeSavedReply.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeSavedReply) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeSecurityAdvisory includes the requested fields of the GraphQL type SecurityAdvisory.
// The GraphQL type's documentation follows.
//
// A GitHub Security Advisory
type currentPendingReviewNodeSecurityAdvisory struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeSecurityAdvisory.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeSecurityAdvisory) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeSponsorsActivity includes the requested fields of the GraphQL type SponsorsActivity.
// The GraphQL type's documentation follows.
//
// An event related to sponsorship activity.
type currentPendingReviewNodeSponsorsActivity struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeSponsorsActivity.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeSponsorsActivity) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeSponsorsListing includes the requested fields of the GraphQL type SponsorsListing.
// The GraphQL type's documentation follows.
//
// A GitHub Sponsors listing.
type currentPendingReviewNodeSponsorsListing struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeSponsorsListing.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeSponsorsListing) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeSponsorsListingFeaturedItem includes the requested fields of the GraphQL type SponsorsListingFeaturedItem.
// The GraphQL type's documentation follows.
//
// A record that is promoted on a GitHub Sponsors profile.
type currentPendingReviewNodeSponsorsListingFeaturedItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeSponsorsListingFeaturedItem.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeSponsorsListingFeaturedItem) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeSponsorsTier includes the requested fields of the GraphQL type SponsorsTier.
// The GraphQL type's documentation follows.
//
// A GitHub Sponsors tier associated with a GitHub Sponsors listing.
type currentPendingReviewNodeSponsorsTier struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeSponsorsTier.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeSponsorsTier) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeSponsorship includes the requested fields of the GraphQL type Sponsorship.
// The GraphQL type's documentation follows.
//
// A sponsorship relationship between a sponsor and a maintainer
type currentPendingReviewNodeSponsorship struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeSponsorship.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeSponsorship) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeSponsorshipNewsletter includes the requested fields of the GraphQL type SponsorshipNewsletter.
// The GraphQL type's documentation follows.
//
// An update sent to sponsors of a user or organization on GitHub Sponsors.
type currentPendingReviewNodeSponsorshipNewsletter struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeSponsorshipNewsletter.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeSponsorshipNewsletter) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeStatus includes the requested fields of the GraphQL type Status.
// The GraphQL type's documentation follows.
//
// Represents a commit status.
type currentPendingReviewNodeStatus struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeStatus.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeStatus) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeStatusCheckRollup includes the requested fields of the GraphQL type StatusCheckRollup.
// The GraphQL type's documentation follows.
//
// Represents the rollup for both the check runs and status for a commit.
type currentPendingReviewNodeStatusCheckRollup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeStatusCheckRollup.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeStatusCheckRollup) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeStatusContext includes the requested fields of the GraphQL type StatusContext.
// The GraphQL type's documentation follows.
//
// Represents an individual commit status context
type currentPendingReviewNodeStatusContext struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeStatusContext.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeStatusContext) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeSubscribedEvent includes the requested fields of the GraphQL type SubscribedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'subscribed' event on a given `Subscribable`.
type currentPendingReviewNodeSubscribedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeSubscribedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeSubscribedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Represents a Git tag.
type currentPendingReviewNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTag) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users in an organization.
type currentPendingReviewNodeTeam struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTeam.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTeam) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeTeamAddMemberAuditEntry includes the requested fields of the GraphQL type TeamAddMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a team.add_member event.
type currentPendingReviewNodeTeamAddMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTeamAddMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTeamAddMemberAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeTeamAddRepositoryAuditEntry includes the requested fields of the GraphQL type TeamAddRepositoryAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a team.add_repository event.
type currentPendingReviewNodeTeamAddRepositoryAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTeamAddRepositoryAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTeamAddRepositoryAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeTeamChangeParentTeamAuditEntry includes the requested fields of the GraphQL type TeamChangeParentTeamAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a team.change_parent_team event.
type currentPendingReviewNodeTeamChangeParentTeamAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTeamChangeParentTeamAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTeamChangeParentTeamAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeTeamDiscussion includes the requested fields of the GraphQL type TeamDiscussion.
// The GraphQL type's documentation follows.
//
// A team discussion.
type currentPendingReviewNodeTeamDiscussion struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTeamDiscussion.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTeamDiscussion) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeTeamDiscussionComment includes the requested fields of the GraphQL type TeamDiscussionComment.
// The GraphQL type's documentation follows.
//
// A comment on a team discussion.
type currentPendingReviewNodeTeamDiscussionComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTeamDiscussionComment.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTeamDiscussionComment) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeTeamRemoveMemberAuditEntry includes the requested fields of the GraphQL type TeamRemoveMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a team.remove_member event.
type currentPendingReviewNodeTeamRemoveMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTeamRemoveMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTeamRemoveMemberAuditEntry) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeTeamRemoveRepositoryAuditEntry includes the requested fields of the GraphQL type TeamRemoveRepositoryAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a team.remove_repository event.
type currentPendingReviewNodeTeamRemoveRepositoryAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTeamRemoveRepositoryAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTeamRemoveRepositoryAuditEntry) GetTypename() *string {
	return v.Typename
}

// currentPendingReviewNodeTopic includes the requested fields of the GraphQL type Topic.
// The GraphQL type's documentation follows.
//
// A topic aggregates entities that are related to a subject.
type currentPendingReviewNodeTopic struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTopic.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTopic) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeTransferredEvent includes the requested fields of the GraphQL type TransferredEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'transferred' event on a given issue or pull request.
type currentPendingReviewNodeTransferredEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTransferredEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTransferredEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeTree includes the requested fields of the GraphQL type Tree.
// The GraphQL type's documentation follows.
//
// Represents a Git tree.
type currentPendingReviewNodeTree struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeTree.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeTree) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeUnassignedEvent includes the requested fields of the GraphQL type UnassignedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unassigned' event on any assignable object.
type currentPendingReviewNodeUnassignedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeUnassignedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeUnassignedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeUnlabeledEvent includes the requested fields of the GraphQL type UnlabeledEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unlabeled' event on a given issue or pull request.
type currentPendingReviewNodeUnlabeledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeUnlabeledEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeUnlabeledEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeUnlockedEvent includes the requested fields of the GraphQL type UnlockedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unlocked' event on a given issue or pull request.
type currentPendingReviewNodeUnlockedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeUnlockedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeUnlockedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeUnmarkedAsDuplicateEvent includes the requested fields of the GraphQL type UnmarkedAsDuplicateEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
type currentPendingReviewNodeUnmarkedAsDuplicateEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeUnmarkedAsDuplicateEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeUnmarkedAsDuplicateEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeUnpinnedEvent includes the requested fields of the GraphQL type UnpinnedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unpinned' event on a given issue or pull request.
type currentPendingReviewNodeUnpinnedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeUnpinnedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeUnpinnedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeUnsubscribedEvent includes the requested fields of the GraphQL type UnsubscribedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unsubscribed' event on a given `Subscribable`.
type currentPendingReviewNodeUnsubscribedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeUnsubscribedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeUnsubscribedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type currentPendingReviewNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeUser) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeUserBlockedEvent includes the requested fields of the GraphQL type UserBlockedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'user_blocked' event on a given user.
type currentPendingReviewNodeUserBlockedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeUserBlockedEvent.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeUserBlockedEvent) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeUserContentEdit includes the requested fields of the GraphQL type UserContentEdit.
// The GraphQL type's documentation follows.
//
// An edit on user content
type currentPendingReviewNodeUserContentEdit struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeUserContentEdit.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeUserContentEdit) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeUserStatus includes the requested fields of the GraphQL type UserStatus.
// The GraphQL type's documentation follows.
//
// The user's description of what they're currently doing.
type currentPendingReviewNodeUserStatus struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeUserStatus.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeUserStatus) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeVerifiableDomain includes the requested fields of the GraphQL type VerifiableDomain.
// The GraphQL type's documentation follows.
//
// A domain that can be verified or approved for an organization or an enterprise.
type currentPendingReviewNodeVerifiableDomain struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeVerifiableDomain.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeVerifiableDomain) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeWorkflow includes the requested fields of the GraphQL type Workflow.
// The GraphQL type's documentation follows.
//
// A workflow contains meta information about an Actions workflow file.
type currentPendingReviewNodeWorkflow struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeWorkflow.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeWorkflow) GetTypename() *string { return v.Typename }

// currentPendingReviewNodeWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
// The GraphQL type's documentation follows.
//
// A workflow run.
type currentPendingReviewNodeWorkflowRun struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns currentPendingReviewNodeWorkflowRun.Typename, and is useful for accessing the field via an interface.
func (v *currentPendingReviewNodeWorkflowRun) GetTypename() *string { return v.Typename }

// currentPendingReviewResponse is returned by currentPendingReview on success.
type currentPendingReviewResponse struct {
	// Fetches an object given its ID.
	Node *currentPendingReviewNode `json:"-"`
}

// GetNode returns currentPendingReviewResponse.Node, and is useful for accessing the field via an interface.
func (v *currentPendingReviewResponse) GetNode() *currentPendingReviewNode { return v.Node }

func (v *currentPendingReviewResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*currentPendingReviewResponse
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.currentPendingReviewResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(currentPendingReviewNode)
			err = __unmarshalcurrentPendingReviewNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal currentPendingReviewResponse.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcurrentPendingReviewResponse struct {
	Node json.RawMessage `json:"node"`
}

func (v *currentPendingReviewResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *currentPendingReviewResponse) __premarshalJSON() (*__premarshalcurrentPendingReviewResponse, error) {
	var retval __premarshalcurrentPendingReviewResponse

	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalcurrentPendingReviewNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal currentPendingReviewResponse.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// editPullRequestResponse is returned by editPullRequest on success.
type editPullRequestResponse struct {
	// Update a pull request
	UpdatePullRequest *editPullRequestUpdatePullRequestUpdatePullRequestPayload `json:"updatePullRequest"`
}

// GetUpdatePullRequest returns editPullRequestResponse.UpdatePullRequest, and is useful for accessing the field via an interface.
func (v *editPullRequestResponse) GetUpdatePullRequest() *editPullRequestUpdatePullRequestUpdatePullRequestPayload {
	return v.UpdatePullRequest
}

// editPullRequestReviewersRequestReviewsRequestReviewsPayload includes the requested fields of the GraphQL type RequestReviewsPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of RequestReviews
type editPullRequestReviewersRequestReviewsRequestReviewsPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
	// The pull request that is getting requests.
	PullRequest *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest `json:"pullRequest"`
}

// GetClientMutationId returns editPullRequestReviewersRequestReviewsRequestReviewsPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayload) GetClientMutationId() *string {
	return v.ClientMutationId
}

// GetPullRequest returns editPullRequestReviewersRequestReviewsRequestReviewsPayload.PullRequest, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayload) GetPullRequest() *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest {
	return v.PullRequest
}

// editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest struct {
	singleStatusPullRequest `json:"-"`
}

// GetId returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.Id, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetId() string {
	return v.singleStatusPullRequest.Id
}

// GetNumber returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.Number, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetNumber() int {
	return v.singleStatusPullRequest.Number
}

// GetTitle returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.Title, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetTitle() string {
	return v.singleStatusPullRequest.Title
}

// GetState returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.State, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetState() PullRequestState {
	return v.singleStatusPullRequest.State
}

// GetRepository returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.Repository, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetRepository() singleStatusPullRequestRepository {
	return v.singleStatusPullRequest.Repository
}

// GetAuthor returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.Author, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetAuthor() *singleStatusPullRequestAuthorActor {
	return v.singleStatusPullRequest.Author
}

// GetBaseRefName returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.BaseRefName, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetBaseRefName() string {
	return v.singleStatusPullRequest.BaseRefName
}

// GetHeadRefName returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.HeadRefName, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetHeadRefName() string {
	return v.singleStatusPullRequest.HeadRefName
}

// GetReviews returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.Reviews, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetReviews() *singleStatusPullRequestReviewsPullRequestReviewConnection {
	return v.singleStatusPullRequest.Reviews
}

// GetReviewRequests returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.ReviewRequests, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetReviewRequests() *singleStatusPullRequestReviewRequestsReviewRequestConnection {
	return v.singleStatusPullRequest.ReviewRequests
}

// GetCommits returns editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.Commits, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) GetCommits() singleStatusPullRequestCommitsPullRequestCommitConnection {
	return v.singleStatusPullRequest.Commits
}

func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.singleStatusPullRequest)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaleditPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest struct {
	Id string `json:"id"`

	Number int `json:"number"`

	Title string `json:"title"`

	State PullRequestState `json:"state"`

	Repository singleStatusPullRequestRepository `json:"repository"`

	Author json.RawMessage `json:"author"`

	BaseRefName string `json:"baseRefName"`

	HeadRefName string `json:"headRefName"`

	Reviews *singleStatusPullRequestReviewsPullRequestReviewConnection `json:"reviews"`

	ReviewRequests *singleStatusPullRequestReviewRequestsReviewRequestConnection `json:"reviewRequests"`

	Commits singleStatusPullRequestCommitsPullRequestCommitConnection `json:"commits"`
}

func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest) __premarshalJSON() (*__premarshaleditPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest, error) {
	var retval __premarshaleditPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest

	retval.Id = v.singleStatusPullRequest.Id
	retval.Number = v.singleStatusPullRequest.Number
	retval.Title = v.singleStatusPullRequest.Title
	retval.State = v.singleStatusPullRequest.State
	retval.Repository = v.singleStatusPullRequest.Repository
	{

		dst := &retval.Author
		src := v.singleStatusPullRequest.Author
		if src != nil {
			var err error
			*dst, err = __marshalsingleStatusPullRequestAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal editPullRequestReviewersRequestReviewsRequestReviewsPayloadPullRequest.singleStatusPullRequest.Author: %w", err)
			}
		}
	}
	retval.BaseRefName = v.singleStatusPullRequest.BaseRefName
	retval.HeadRefName = v.singleStatusPullRequest.HeadRefName
	retval.Reviews = v.singleStatusPullRequest.Reviews
	retval.ReviewRequests = v.singleStatusPullRequest.ReviewRequests
	retval.Commits = v.singleStatusPullRequest.Commits
	return &retval, nil
}

// editPullRequestReviewersResponse is returned by editPullRequestReviewers on success.
type editPullRequestReviewersResponse struct {
	// Set review requests on a pull request.
	RequestReviews *editPullRequestReviewersRequestReviewsRequestReviewsPayload `json:"requestReviews"`
}

// GetRequestReviews returns editPullRequestReviewersResponse.RequestReviews, and is useful for accessing the field via an interface.
func (v *editPullRequestReviewersResponse) GetRequestReviews() *editPullRequestReviewersRequestReviewsRequestReviewsPayload {
	return v.RequestReviews
}

// editPullRequestUpdatePullRequestUpdatePullRequestPayload includes the requested fields of the GraphQL type UpdatePullRequestPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of UpdatePullRequest
type editPullRequestUpdatePullRequestUpdatePullRequestPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
	// The updated pull request.
	PullRequest *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest `json:"pullRequest"`
}

// GetClientMutationId returns editPullRequestUpdatePullRequestUpdatePullRequestPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayload) GetClientMutationId() *string {
	return v.ClientMutationId
}

// GetPullRequest returns editPullRequestUpdatePullRequestUpdatePullRequestPayload.PullRequest, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayload) GetPullRequest() *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest {
	return v.PullRequest
}

// editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest struct {
	singleStatusPullRequest `json:"-"`
}

// GetId returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.Id, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetId() string {
	return v.singleStatusPullRequest.Id
}

// GetNumber returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.Number, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetNumber() int {
	return v.singleStatusPullRequest.Number
}

// GetTitle returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.Title, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetTitle() string {
	return v.singleStatusPullRequest.Title
}

// GetState returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.State, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetState() PullRequestState {
	return v.singleStatusPullRequest.State
}

// GetRepository returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.Repository, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetRepository() singleStatusPullRequestRepository {
	return v.singleStatusPullRequest.Repository
}

// GetAuthor returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.Author, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetAuthor() *singleStatusPullRequestAuthorActor {
	return v.singleStatusPullRequest.Author
}

// GetBaseRefName returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.BaseRefName, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetBaseRefName() string {
	return v.singleStatusPullRequest.BaseRefName
}

// GetHeadRefName returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.HeadRefName, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetHeadRefName() string {
	return v.singleStatusPullRequest.HeadRefName
}

// GetReviews returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.Reviews, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetReviews() *singleStatusPullRequestReviewsPullRequestReviewConnection {
	return v.singleStatusPullRequest.Reviews
}

// GetReviewRequests returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.ReviewRequests, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetReviewRequests() *singleStatusPullRequestReviewRequestsReviewRequestConnection {
	return v.singleStatusPullRequest.ReviewRequests
}

// GetCommits returns editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.Commits, and is useful for accessing the field via an interface.
func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) GetCommits() singleStatusPullRequestCommitsPullRequestCommitConnection {
	return v.singleStatusPullRequest.Commits
}

func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.singleStatusPullRequest)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaleditPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest struct {
	Id string `json:"id"`

	Number int `json:"number"`

	Title string `json:"title"`

	State PullRequestState `json:"state"`

	Repository singleStatusPullRequestRepository `json:"repository"`

	Author json.RawMessage `json:"author"`

	BaseRefName string `json:"baseRefName"`

	HeadRefName string `json:"headRefName"`

	Reviews *singleStatusPullRequestReviewsPullRequestReviewConnection `json:"reviews"`

	ReviewRequests *singleStatusPullRequestReviewRequestsReviewRequestConnection `json:"reviewRequests"`

	Commits singleStatusPullRequestCommitsPullRequestCommitConnection `json:"commits"`
}

func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest) __premarshalJSON() (*__premarshaleditPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest, error) {
	var retval __premarshaleditPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest

	retval.Id = v.singleStatusPullRequest.Id
	retval.Number = v.singleStatusPullRequest.Number
	retval.Title = v.singleStatusPullRequest.Title
	retval.State = v.singleStatusPullRequest.State
	retval.Repository = v.singleStatusPullRequest.Repository
	{

		dst := &retval.Author
		src := v.singleStatusPullRequest.Author
		if src != nil {
			var err error
			*dst, err = __marshalsingleStatusPullRequestAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal editPullRequestUpdatePullRequestUpdatePullRequestPayloadPullRequest.singleStatusPullRequest.Author: %w", err)
			}
		}
	}
	retval.BaseRefName = v.singleStatusPullRequest.BaseRefName
	retval.HeadRefName = v.singleStatusPullRequest.HeadRefName
	retval.Reviews = v.singleStatusPullRequest.Reviews
	retval.ReviewRequests = v.singleStatusPullRequest.ReviewRequests
	retval.Commits = v.singleStatusPullRequest.Commits
	return &retval, nil
}

// getLabelByNameRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getLabelByNameRepository struct {
	// Returns a single label by name
	Label *getLabelByNameRepositoryLabel `json:"label"`
}

// GetLabel returns getLabelByNameRepository.Label, and is useful for accessing the field via an interface.
func (v *getLabelByNameRepository) GetLabel() *getLabelByNameRepositoryLabel { return v.Label }

// getLabelByNameRepositoryLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type getLabelByNameRepositoryLabel struct {
	LabelInfo `json:"-"`
}

// GetId returns getLabelByNameRepositoryLabel.Id, and is useful for accessing the field via an interface.
func (v *getLabelByNameRepositoryLabel) GetId() string { return v.LabelInfo.Id }

// GetColor returns getLabelByNameRepositoryLabel.Color, and is useful for accessing the field via an interface.
func (v *getLabelByNameRepositoryLabel) GetColor() string { return v.LabelInfo.Color }

// GetDescription returns getLabelByNameRepositoryLabel.Description, and is useful for accessing the field via an interface.
func (v *getLabelByNameRepositoryLabel) GetDescription() *string { return v.LabelInfo.Description }

func (v *getLabelByNameRepositoryLabel) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getLabelByNameRepositoryLabel
		graphql.NoUnmarshalJSON
	}
	firstPass.getLabelByNameRepositoryLabel = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LabelInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetLabelByNameRepositoryLabel struct {
	Id string `json:"id"`

	Color string `json:"color"`

	Description *string `json:"description"`
}

func (v *getLabelByNameRepositoryLabel) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getLabelByNameRepositoryLabel) __premarshalJSON() (*__premarshalgetLabelByNameRepositoryLabel, error) {
	var retval __premarshalgetLabelByNameRepositoryLabel

	retval.Id = v.LabelInfo.Id
	retval.Color = v.LabelInfo.Color
	retval.Description = v.LabelInfo.Description
	return &retval, nil
}

// getLabelByNameResponse is returned by getLabelByName on success.
type getLabelByNameResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository *getLabelByNameRepository `json:"repository"`
}

// GetRepository returns getLabelByNameResponse.Repository, and is useful for accessing the field via an interface.
func (v *getLabelByNameResponse) GetRepository() *getLabelByNameRepository { return v.Repository }

// getUserIdByLoginResponse is returned by getUserIdByLogin on success.
type getUserIdByLoginResponse struct {
	// Lookup a user by login.
	User *getUserIdByLoginUser `json:"user"`
}

// GetUser returns getUserIdByLoginResponse.User, and is useful for accessing the field via an interface.
func (v *getUserIdByLoginResponse) GetUser() *getUserIdByLoginUser { return v.User }

// getUserIdByLoginUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getUserIdByLoginUser struct {
	Id string `json:"id"`
}

// GetId returns getUserIdByLoginUser.Id, and is useful for accessing the field via an interface.
func (v *getUserIdByLoginUser) GetId() string { return v.Id }

// mergePullRequestMergePullRequestMergePullRequestPayload includes the requested fields of the GraphQL type MergePullRequestPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of MergePullRequest
type mergePullRequestMergePullRequestMergePullRequestPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
}

// GetClientMutationId returns mergePullRequestMergePullRequestMergePullRequestPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *mergePullRequestMergePullRequestMergePullRequestPayload) GetClientMutationId() *string {
	return v.ClientMutationId
}

// mergePullRequestResponse is returned by mergePullRequest on success.
type mergePullRequestResponse struct {
	// Merge a pull request.
	MergePullRequest *mergePullRequestMergePullRequestMergePullRequestPayload `json:"mergePullRequest"`
}

// GetMergePullRequest returns mergePullRequestResponse.MergePullRequest, and is useful for accessing the field via an interface.
func (v *mergePullRequestResponse) GetMergePullRequest() *mergePullRequestMergePullRequestMergePullRequestPayload {
	return v.MergePullRequest
}

// myLoginResponse is returned by myLogin on success.
type myLoginResponse struct {
	// The currently authenticated user.
	Viewer myLoginViewerUser `json:"viewer"`
}

// GetViewer returns myLoginResponse.Viewer, and is useful for accessing the field via an interface.
func (v *myLoginResponse) GetViewer() myLoginViewerUser { return v.Viewer }

// myLoginViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type myLoginViewerUser struct {
	// The username used to login.
	Login string `json:"login"`
}

// GetLogin returns myLoginViewerUser.Login, and is useful for accessing the field via an interface.
func (v *myLoginViewerUser) GetLogin() string { return v.Login }

// newReviewAddPullRequestReviewAddPullRequestReviewPayload includes the requested fields of the GraphQL type AddPullRequestReviewPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of AddPullRequestReview
type newReviewAddPullRequestReviewAddPullRequestReviewPayload struct {
	// The newly created pull request review.
	PullRequestReview *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview `json:"pullRequestReview"`
}

// GetPullRequestReview returns newReviewAddPullRequestReviewAddPullRequestReviewPayload.PullRequestReview, and is useful for accessing the field via an interface.
func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayload) GetPullRequestReview() *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview {
	return v.PullRequestReview
}

// newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview includes the requested fields of the GraphQL type PullRequestReview.
// The GraphQL type's documentation follows.
//
// A review object for a given pull request.
type newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview struct {
	ReviewInfo `json:"-"`
}

// GetState returns newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview.State, and is useful for accessing the field via an interface.
func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview) GetState() PullRequestReviewState {
	return v.ReviewInfo.State
}

// GetId returns newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview.Id, and is useful for accessing the field via an interface.
func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview) GetId() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.Id
}

// GetAuthor returns newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview.Author, and is useful for accessing the field via an interface.
func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.Author
}

// GetRaw returns newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview.Raw, and is useful for accessing the field via an interface.
func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview) GetRaw() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.Raw
}

// GetBodyText returns newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview.BodyText, and is useful for accessing the field via an interface.
func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview) GetBodyText() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyText
}

// GetBodyHTML returns newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview.BodyHTML, and is useful for accessing the field via an interface.
func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview) GetBodyHTML() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyHTML
}

// GetCreatedAt returns newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview.CreatedAt, and is useful for accessing the field via an interface.
func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview) GetCreatedAt() time.Time {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.CreatedAt
}

func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview
		graphql.NoUnmarshalJSON
	}
	firstPass.newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ReviewInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalnewReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview struct {
	State PullRequestReviewState `json:"state"`

	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview) __premarshalJSON() (*__premarshalnewReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview, error) {
	var retval __premarshalnewReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview

	retval.State = v.ReviewInfo.State
	retval.Id = v.ReviewInfo.CommonCommentInfoPullRequestReview.Id
	{

		dst := &retval.Author
		src := v.ReviewInfo.CommonCommentInfoPullRequestReview.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal newReviewAddPullRequestReviewAddPullRequestReviewPayloadPullRequestReview.ReviewInfo.CommonCommentInfoPullRequestReview.Author: %w", err)
			}
		}
	}
	retval.Raw = v.ReviewInfo.CommonCommentInfoPullRequestReview.Raw
	retval.BodyText = v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyText
	retval.BodyHTML = v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyHTML
	retval.CreatedAt = v.ReviewInfo.CommonCommentInfoPullRequestReview.CreatedAt
	return &retval, nil
}

// newReviewResponse is returned by newReview on success.
type newReviewResponse struct {
	// Adds a review to a Pull Request.
	AddPullRequestReview *newReviewAddPullRequestReviewAddPullRequestReviewPayload `json:"addPullRequestReview"`
}

// GetAddPullRequestReview returns newReviewResponse.AddPullRequestReview, and is useful for accessing the field via an interface.
func (v *newReviewResponse) GetAddPullRequestReview() *newReviewAddPullRequestReviewAddPullRequestReviewPayload {
	return v.AddPullRequestReview
}

// pullRequestCommentsRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type pullRequestCommentsRepository struct {
	// Returns a single pull request from the current repository by number.
	PullRequest *pullRequestCommentsRepositoryPullRequest `json:"pullRequest"`
}

// GetPullRequest returns pullRequestCommentsRepository.PullRequest, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepository) GetPullRequest() *pullRequestCommentsRepositoryPullRequest {
	return v.PullRequest
}

// pullRequestCommentsRepositoryPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type pullRequestCommentsRepositoryPullRequest struct {
	// A list of comments associated with the pull request.
	Comments pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnection `json:"comments"`
}

// GetComments returns pullRequestCommentsRepositoryPullRequest.Comments, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequest) GetComments() pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnection {
	return v.Comments
}

// pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnection includes the requested fields of the GraphQL type IssueCommentConnection.
// The GraphQL type's documentation follows.
//
// The connection type for IssueComment.
type pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnection struct {
	// Information to aid in pagination.
	PageInfo pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of nodes.
	Nodes []*pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment `json:"nodes"`
}

// GetPageInfo returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnection) GetPageInfo() pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo {
	return v.PageInfo
}

// GetTotalCount returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnection) GetNodes() []*pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment {
	return v.Nodes
}

// pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment includes the requested fields of the GraphQL type IssueComment.
// The GraphQL type's documentation follows.
//
// Represents a comment on an Issue.
type pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment struct {
	CommentInfoIssueComment `json:"-"`
}

// GetId returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment.Id, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment) GetId() string {
	return v.CommentInfoIssueComment.CommonCommentInfoIssueComment.Id
}

// GetAuthor returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment.Author, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommentInfoIssueComment.CommonCommentInfoIssueComment.Author
}

// GetRaw returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment.Raw, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment) GetRaw() string {
	return v.CommentInfoIssueComment.CommonCommentInfoIssueComment.Raw
}

// GetBodyText returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment.BodyText, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment) GetBodyText() string {
	return v.CommentInfoIssueComment.CommonCommentInfoIssueComment.BodyText
}

// GetBodyHTML returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment) GetBodyHTML() string {
	return v.CommentInfoIssueComment.CommonCommentInfoIssueComment.BodyHTML
}

// GetCreatedAt returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment) GetCreatedAt() time.Time {
	return v.CommentInfoIssueComment.CommonCommentInfoIssueComment.CreatedAt
}

// GetReactions returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment.Reactions, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.CommentInfoIssueComment.ReactionsInfoIssueComment.Reactions
}

func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment
		graphql.NoUnmarshalJSON
	}
	firstPass.pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommentInfoIssueComment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment struct {
	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment) __premarshalJSON() (*__premarshalpullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment, error) {
	var retval __premarshalpullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment

	retval.Id = v.CommentInfoIssueComment.CommonCommentInfoIssueComment.Id
	{

		dst := &retval.Author
		src := v.CommentInfoIssueComment.CommonCommentInfoIssueComment.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionNodesIssueComment.CommentInfoIssueComment.CommonCommentInfoIssueComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommentInfoIssueComment.CommonCommentInfoIssueComment.Raw
	retval.BodyText = v.CommentInfoIssueComment.CommonCommentInfoIssueComment.BodyText
	retval.BodyHTML = v.CommentInfoIssueComment.CommonCommentInfoIssueComment.BodyHTML
	retval.CreatedAt = v.CommentInfoIssueComment.CommonCommentInfoIssueComment.CreatedAt
	retval.Reactions = v.CommentInfoIssueComment.ReactionsInfoIssueComment.Reactions
	return &retval, nil
}

// pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo struct {
	NextPageInfo `json:"-"`
}

// GetHasNextPage returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo) GetHasNextPage() bool {
	return v.NextPageInfo.HasNextPage
}

// GetEndCursor returns pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo) GetEndCursor() *string {
	return v.NextPageInfo.EndCursor
}

func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NextPageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *pullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo) __premarshalJSON() (*__premarshalpullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo, error) {
	var retval __premarshalpullRequestCommentsRepositoryPullRequestCommentsIssueCommentConnectionPageInfo

	retval.HasNextPage = v.NextPageInfo.HasNextPage
	retval.EndCursor = v.NextPageInfo.EndCursor
	return &retval, nil
}

// pullRequestCommentsResponse is returned by pullRequestComments on success.
type pullRequestCommentsResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository *pullRequestCommentsRepository `json:"repository"`
}

// GetRepository returns pullRequestCommentsResponse.Repository, and is useful for accessing the field via an interface.
func (v *pullRequestCommentsResponse) GetRepository() *pullRequestCommentsRepository {
	return v.Repository
}

// pullRequestThreadsRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type pullRequestThreadsRepository struct {
	// Returns a single pull request from the current repository by number.
	PullRequest *pullRequestThreadsRepositoryPullRequest `json:"pullRequest"`
}

// GetPullRequest returns pullRequestThreadsRepository.PullRequest, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepository) GetPullRequest() *pullRequestThreadsRepositoryPullRequest {
	return v.PullRequest
}

// pullRequestThreadsRepositoryPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type pullRequestThreadsRepositoryPullRequest struct {
	// The list of all review threads for this pull request.
	ReviewThreads pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnection `json:"reviewThreads"`
}

// GetReviewThreads returns pullRequestThreadsRepositoryPullRequest.ReviewThreads, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequest) GetReviewThreads() pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnection {
	return v.ReviewThreads
}

// pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnection includes the requested fields of the GraphQL type PullRequestReviewThreadConnection.
// The GraphQL type's documentation follows.
//
// Review comment threads for a pull request review.
type pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnection struct {
	// Information to aid in pagination.
	PageInfo pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionPageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of nodes.
	Nodes []*pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread `json:"nodes"`
}

// GetPageInfo returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnection) GetPageInfo() pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionPageInfo {
	return v.PageInfo
}

// GetTotalCount returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnection.Nodes, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnection) GetNodes() []*pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread {
	return v.Nodes
}

// pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread includes the requested fields of the GraphQL type PullRequestReviewThread.
// The GraphQL type's documentation follows.
//
// A threaded list of comments for a given pull request.
type pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread struct {
	// The line in the file to which this thread refers
	Line *int `json:"line"`
	// The original line in the file to which this thread refers.
	OriginalLine *int `json:"originalLine"`
	// Identifies the file path of this thread.
	Path string `json:"path"`
	// The side of the diff on which this thread was placed.
	DiffSide DiffSide `json:"diffSide"`
	// The start line in the file to which this thread refers (multi-line only)
	StartLine *int `json:"startLine"`
	// The side of the diff that the first line of the thread starts on (multi-line only)
	StartDiffSide *DiffSide `json:"startDiffSide"`
	// The original start line in the file to which this thread refers (multi-line only).
	OriginalStartLine *int `json:"originalStartLine"`
	// Indicates whether this thread was outdated by newer changes.
	IsOutdated bool `json:"isOutdated"`
	// A list of pull request comments associated with the thread.
	Comments pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnection `json:"comments"`
}

// GetLine returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread.Line, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread) GetLine() *int {
	return v.Line
}

// GetOriginalLine returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread.OriginalLine, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread) GetOriginalLine() *int {
	return v.OriginalLine
}

// GetPath returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread.Path, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread) GetPath() string {
	return v.Path
}

// GetDiffSide returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread.DiffSide, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread) GetDiffSide() DiffSide {
	return v.DiffSide
}

// GetStartLine returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread.StartLine, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread) GetStartLine() *int {
	return v.StartLine
}

// GetStartDiffSide returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread.StartDiffSide, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread) GetStartDiffSide() *DiffSide {
	return v.StartDiffSide
}

// GetOriginalStartLine returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread.OriginalStartLine, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread) GetOriginalStartLine() *int {
	return v.OriginalStartLine
}

// GetIsOutdated returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread.IsOutdated, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread) GetIsOutdated() bool {
	return v.IsOutdated
}

// GetComments returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread.Comments, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThread) GetComments() pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnection {
	return v.Comments
}

// pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnection includes the requested fields of the GraphQL type PullRequestReviewCommentConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequestReviewComment.
type pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnection struct {
	// Information to aid in pagination.
	PageInfo pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionPageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of nodes.
	Nodes []*pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment `json:"nodes"`
}

// GetPageInfo returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnection) GetPageInfo() pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionPageInfo {
	return v.PageInfo
}

// GetTotalCount returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnection) GetNodes() []*pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment {
	return v.Nodes
}

// pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment includes the requested fields of the GraphQL type PullRequestReviewComment.
// The GraphQL type's documentation follows.
//
// A review comment associated with a given repository pull request.
type pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment struct {
	// The comment this is a reply to.
	ReplyTo                             *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewCommentReplyToPullRequestReviewComment `json:"replyTo"`
	CommentInfoPullRequestReviewComment `json:"-"`
}

// GetReplyTo returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment.ReplyTo, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) GetReplyTo() *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewCommentReplyToPullRequestReviewComment {
	return v.ReplyTo
}

// GetId returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment.Id, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) GetId() string {
	return v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.Id
}

// GetAuthor returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment.Author, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.Author
}

// GetRaw returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment.Raw, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) GetRaw() string {
	return v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.Raw
}

// GetBodyText returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment.BodyText, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) GetBodyText() string {
	return v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.BodyText
}

// GetBodyHTML returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment.BodyHTML, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) GetBodyHTML() string {
	return v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.BodyHTML
}

// GetCreatedAt returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) GetCreatedAt() time.Time {
	return v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.CreatedAt
}

// GetReactions returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment.Reactions, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) GetReactions() ReactionsInfoReactionsReactionConnection {
	return v.CommentInfoPullRequestReviewComment.ReactionsInfoPullRequestReviewComment.Reactions
}

func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment
		graphql.NoUnmarshalJSON
	}
	firstPass.pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommentInfoPullRequestReviewComment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment struct {
	ReplyTo *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewCommentReplyToPullRequestReviewComment `json:"replyTo"`

	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`

	Reactions ReactionsInfoReactionsReactionConnection `json:"reactions"`
}

func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment) __premarshalJSON() (*__premarshalpullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment, error) {
	var retval __premarshalpullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment

	retval.ReplyTo = v.ReplyTo
	retval.Id = v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.Id
	{

		dst := &retval.Author
		src := v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewComment.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.Author: %w", err)
			}
		}
	}
	retval.Raw = v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.Raw
	retval.BodyText = v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.BodyText
	retval.BodyHTML = v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.BodyHTML
	retval.CreatedAt = v.CommentInfoPullRequestReviewComment.CommonCommentInfoPullRequestReviewComment.CreatedAt
	retval.Reactions = v.CommentInfoPullRequestReviewComment.ReactionsInfoPullRequestReviewComment.Reactions
	return &retval, nil
}

// pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewCommentReplyToPullRequestReviewComment includes the requested fields of the GraphQL type PullRequestReviewComment.
// The GraphQL type's documentation follows.
//
// A review comment associated with a given repository pull request.
type pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewCommentReplyToPullRequestReviewComment struct {
	Id string `json:"id"`
}

// GetId returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewCommentReplyToPullRequestReviewComment.Id, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionNodesPullRequestReviewCommentReplyToPullRequestReviewComment) GetId() string {
	return v.Id
}

// pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionNodesPullRequestReviewThreadCommentsPullRequestReviewCommentConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsRepositoryPullRequestReviewThreadsPullRequestReviewThreadConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// pullRequestThreadsResponse is returned by pullRequestThreads on success.
type pullRequestThreadsResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository *pullRequestThreadsRepository `json:"repository"`
}

// GetRepository returns pullRequestThreadsResponse.Repository, and is useful for accessing the field via an interface.
func (v *pullRequestThreadsResponse) GetRepository() *pullRequestThreadsRepository {
	return v.Repository
}

// replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayload includes the requested fields of the GraphQL type AddPullRequestReviewCommentPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of AddPullRequestReviewComment
type replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayload struct {
	// The newly created comment.
	Comment *replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayloadCommentPullRequestReviewComment `json:"comment"`
}

// GetComment returns replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayload.Comment, and is useful for accessing the field via an interface.
func (v *replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayload) GetComment() *replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayloadCommentPullRequestReviewComment {
	return v.Comment
}

// replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayloadCommentPullRequestReviewComment includes the requested fields of the GraphQL type PullRequestReviewComment.
// The GraphQL type's documentation follows.
//
// A review comment associated with a given repository pull request.
type replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayloadCommentPullRequestReviewComment struct {
	Id string `json:"id"`
}

// GetId returns replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayloadCommentPullRequestReviewComment.Id, and is useful for accessing the field via an interface.
func (v *replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayloadCommentPullRequestReviewComment) GetId() string {
	return v.Id
}

// replyToResponse is returned by replyTo on success.
type replyToResponse struct {
	// Adds a comment to a review.
	AddPullRequestReviewComment *replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayload `json:"addPullRequestReviewComment"`
}

// GetAddPullRequestReviewComment returns replyToResponse.AddPullRequestReviewComment, and is useful for accessing the field via an interface.
func (v *replyToResponse) GetAddPullRequestReviewComment() *replyToAddPullRequestReviewCommentAddPullRequestReviewCommentPayload {
	return v.AddPullRequestReviewComment
}

// repositoryIdRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type repositoryIdRepository struct {
	Id string `json:"id"`
}

// GetId returns repositoryIdRepository.Id, and is useful for accessing the field via an interface.
func (v *repositoryIdRepository) GetId() string { return v.Id }

// repositoryIdResponse is returned by repositoryId on success.
type repositoryIdResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository *repositoryIdRepository `json:"repository"`
}

// GetRepository returns repositoryIdResponse.Repository, and is useful for accessing the field via an interface.
func (v *repositoryIdResponse) GetRepository() *repositoryIdRepository { return v.Repository }

// requestedReviewsResponse is returned by requestedReviews on success.
type requestedReviewsResponse struct {
	// Perform a search across resources, returning a maximum of 1,000 results.
	Search requestedReviewsSearchSearchResultItemConnection `json:"search"`
}

// GetSearch returns requestedReviewsResponse.Search, and is useful for accessing the field via an interface.
func (v *requestedReviewsResponse) GetSearch() requestedReviewsSearchSearchResultItemConnection {
	return v.Search
}

// requestedReviewsSearchSearchResultItemConnection includes the requested fields of the GraphQL type SearchResultItemConnection.
// The GraphQL type's documentation follows.
//
// A list of results that matched against a search query. Regardless of the number of matches, a maximum of 1,000 results will be available across all types, potentially split across many pages.
type requestedReviewsSearchSearchResultItemConnection struct {
	// The total number of issues that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	IssueCount int `json:"issueCount"`
	// Information to aid in pagination.
	PageInfo requestedReviewsSearchSearchResultItemConnectionPageInfo `json:"pageInfo"`
	// A list of edges.
	Edges []*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge `json:"edges"`
}

// GetIssueCount returns requestedReviewsSearchSearchResultItemConnection.IssueCount, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnection) GetIssueCount() int { return v.IssueCount }

// GetPageInfo returns requestedReviewsSearchSearchResultItemConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnection) GetPageInfo() requestedReviewsSearchSearchResultItemConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns requestedReviewsSearchSearchResultItemConnection.Edges, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnection) GetEdges() []*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge {
	return v.Edges
}

// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge includes the requested fields of the GraphQL type SearchResultItemEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge struct {
	// The item at the end of the edge.
	Node *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem `json:"-"`
}

// GetNode returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge.Node, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge) GetNode() *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem {
	return v.Node
}

func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem)
			err = __unmarshalrequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalrequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge) __premarshalJSON() (*__premarshalrequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge, error) {
	var retval __premarshalrequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge

	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalrequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// A GitHub App.
type requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp struct {
	Typename *string `json:"__typename"`
	// ID of the object.
	Id string `json:"id"`
}

// GetTypename returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp.Typename, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp) GetTypename() *string {
	return v.Typename
}

// GetId returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp.Id, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp) GetId() string {
	return v.Id
}

// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion includes the requested fields of the GraphQL type Discussion.
// The GraphQL type's documentation follows.
//
// A discussion in a repository.
type requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion struct {
	Typename *string `json:"__typename"`
	// ID of the object.
	Id string `json:"id"`
}

// GetTypename returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion.Typename, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion) GetTypename() *string {
	return v.Typename
}

// GetId returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion.Id, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion) GetId() string {
	return v.Id
}

// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
	// ID of the object.
	Id string `json:"id"`
}

// GetTypename returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue) GetTypename() *string {
	return v.Typename
}

// GetId returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue.Id, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue) GetId() string {
	return v.Id
}

// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing includes the requested fields of the GraphQL type MarketplaceListing.
// The GraphQL type's documentation follows.
//
// A listing in the GitHub integration marketplace.
type requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing struct {
	Typename *string `json:"__typename"`
	// ID of the object.
	Id string `json:"id"`
}

// GetTypename returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing.Typename, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing) GetTypename() *string {
	return v.Typename
}

// GetId returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing.Id, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing) GetId() string {
	return v.Id
}

// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization struct {
	Typename *string `json:"__typename"`
	// ID of the object.
	Id string `json:"id"`
}

// GetTypename returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization.Typename, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization) GetTypename() *string {
	return v.Typename
}

// GetId returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization.Id, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization) GetId() string {
	return v.Id
}

// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest struct {
	Typename *string `json:"__typename"`
	// ID of the object.
	Id string `json:"id"`
}

// GetTypename returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest.Typename, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest) GetTypename() *string {
	return v.Typename
}

// GetId returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest.Id, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest) GetId() string {
	return v.Id
}

// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository struct {
	Typename *string `json:"__typename"`
	// ID of the object.
	Id string `json:"id"`
}

// GetTypename returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.Typename, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetTypename() *string {
	return v.Typename
}

// GetId returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.Id, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetId() string {
	return v.Id
}

// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem includes the requested fields of the GraphQL interface SearchResultItem.
//
// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem is implemented by the following types:
// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp
// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion
// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue
// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing
// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization
// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest
// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository
// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser
// The GraphQL type's documentation follows.
//
// The results of a search.
type requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem interface {
	implementsGraphQLInterfacerequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp) implementsGraphQLInterfacerequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion) implementsGraphQLInterfacerequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue) implementsGraphQLInterfacerequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing) implementsGraphQLInterfacerequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization) implementsGraphQLInterfacerequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest) implementsGraphQLInterfacerequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) implementsGraphQLInterfacerequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser) implementsGraphQLInterfacerequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}

func __unmarshalrequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(b []byte, v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "App":
		*v = new(requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp)
		return json.Unmarshal(b, *v)
	case "Discussion":
		*v = new(requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "MarketplaceListing":
		*v = new(requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization)
		return json.Unmarshal(b, *v)
	case "PullRequest":
		*v = new(requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest)
		return json.Unmarshal(b, *v)
	case "Repository":
		*v = new(requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchResultItem.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem: "%v"`, tn.TypeName)
	}
}

func __marshalrequestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp:
		typename = "App"

		result := struct {
			TypeName string `json:"__typename"`
			*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp
		}{typename, v}
		return json.Marshal(result)
	case *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion:
		typename = "Discussion"

		result := struct {
			TypeName string `json:"__typename"`
			*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing:
		typename = "MarketplaceListing"

		result := struct {
			TypeName string `json:"__typename"`
			*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing
		}{typename, v}
		return json.Marshal(result)
	case *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization
		}{typename, v}
		return json.Marshal(result)
	case *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest:
		typename = "PullRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest
		}{typename, v}
		return json.Marshal(result)
	case *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository
		}{typename, v}
		return json.Marshal(result)
	case *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem: "%T"`, v)
	}
}

// requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser struct {
	Typename *string `json:"__typename"`
	// ID of the object.
	Id string `json:"id"`
}

// GetTypename returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser) GetTypename() *string {
	return v.Typename
}

// GetId returns requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser.Id, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser) GetId() string {
	return v.Id
}

// requestedReviewsSearchSearchResultItemConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type requestedReviewsSearchSearchResultItemConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns requestedReviewsSearchSearchResultItemConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns requestedReviewsSearchSearchResultItemConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *requestedReviewsSearchSearchResultItemConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// searchLabelsRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type searchLabelsRepository struct {
	// A list of labels associated with the repository.
	Labels *searchLabelsRepositoryLabelsLabelConnection `json:"labels"`
}

// GetLabels returns searchLabelsRepository.Labels, and is useful for accessing the field via an interface.
func (v *searchLabelsRepository) GetLabels() *searchLabelsRepositoryLabelsLabelConnection {
	return v.Labels
}

// searchLabelsRepositoryLabelsLabelConnection includes the requested fields of the GraphQL type LabelConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Label.
type searchLabelsRepositoryLabelsLabelConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of nodes.
	Nodes []*searchLabelsRepositoryLabelsLabelConnectionNodesLabel `json:"nodes"`
	// Information to aid in pagination.
	PageInfo searchLabelsRepositoryLabelsLabelConnectionPageInfo `json:"pageInfo"`
}

// GetTotalCount returns searchLabelsRepositoryLabelsLabelConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *searchLabelsRepositoryLabelsLabelConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns searchLabelsRepositoryLabelsLabelConnection.Nodes, and is useful for accessing the field via an interface.
func (v *searchLabelsRepositoryLabelsLabelConnection) GetNodes() []*searchLabelsRepositoryLabelsLabelConnectionNodesLabel {
	return v.Nodes
}

// GetPageInfo returns searchLabelsRepositoryLabelsLabelConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *searchLabelsRepositoryLabelsLabelConnection) GetPageInfo() searchLabelsRepositoryLabelsLabelConnectionPageInfo {
	return v.PageInfo
}

// searchLabelsRepositoryLabelsLabelConnectionNodesLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type searchLabelsRepositoryLabelsLabelConnectionNodesLabel struct {
	LabelInfo `json:"-"`
}

// GetId returns searchLabelsRepositoryLabelsLabelConnectionNodesLabel.Id, and is useful for accessing the field via an interface.
func (v *searchLabelsRepositoryLabelsLabelConnectionNodesLabel) GetId() string { return v.LabelInfo.Id }

// GetColor returns searchLabelsRepositoryLabelsLabelConnectionNodesLabel.Color, and is useful for accessing the field via an interface.
func (v *searchLabelsRepositoryLabelsLabelConnectionNodesLabel) GetColor() string {
	return v.LabelInfo.Color
}

// GetDescription returns searchLabelsRepositoryLabelsLabelConnectionNodesLabel.Description, and is useful for accessing the field via an interface.
func (v *searchLabelsRepositoryLabelsLabelConnectionNodesLabel) GetDescription() *string {
	return v.LabelInfo.Description
}

func (v *searchLabelsRepositoryLabelsLabelConnectionNodesLabel) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*searchLabelsRepositoryLabelsLabelConnectionNodesLabel
		graphql.NoUnmarshalJSON
	}
	firstPass.searchLabelsRepositoryLabelsLabelConnectionNodesLabel = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LabelInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalsearchLabelsRepositoryLabelsLabelConnectionNodesLabel struct {
	Id string `json:"id"`

	Color string `json:"color"`

	Description *string `json:"description"`
}

func (v *searchLabelsRepositoryLabelsLabelConnectionNodesLabel) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *searchLabelsRepositoryLabelsLabelConnectionNodesLabel) __premarshalJSON() (*__premarshalsearchLabelsRepositoryLabelsLabelConnectionNodesLabel, error) {
	var retval __premarshalsearchLabelsRepositoryLabelsLabelConnectionNodesLabel

	retval.Id = v.LabelInfo.Id
	retval.Color = v.LabelInfo.Color
	retval.Description = v.LabelInfo.Description
	return &retval, nil
}

// searchLabelsRepositoryLabelsLabelConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type searchLabelsRepositoryLabelsLabelConnectionPageInfo struct {
	NextPageInfo `json:"-"`
}

// GetHasNextPage returns searchLabelsRepositoryLabelsLabelConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *searchLabelsRepositoryLabelsLabelConnectionPageInfo) GetHasNextPage() bool {
	return v.NextPageInfo.HasNextPage
}

// GetEndCursor returns searchLabelsRepositoryLabelsLabelConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *searchLabelsRepositoryLabelsLabelConnectionPageInfo) GetEndCursor() *string {
	return v.NextPageInfo.EndCursor
}

func (v *searchLabelsRepositoryLabelsLabelConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*searchLabelsRepositoryLabelsLabelConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.searchLabelsRepositoryLabelsLabelConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NextPageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalsearchLabelsRepositoryLabelsLabelConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *searchLabelsRepositoryLabelsLabelConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *searchLabelsRepositoryLabelsLabelConnectionPageInfo) __premarshalJSON() (*__premarshalsearchLabelsRepositoryLabelsLabelConnectionPageInfo, error) {
	var retval __premarshalsearchLabelsRepositoryLabelsLabelConnectionPageInfo

	retval.HasNextPage = v.NextPageInfo.HasNextPage
	retval.EndCursor = v.NextPageInfo.EndCursor
	return &retval, nil
}

// searchLabelsResponse is returned by searchLabels on success.
type searchLabelsResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository *searchLabelsRepository `json:"repository"`
}

// GetRepository returns searchLabelsResponse.Repository, and is useful for accessing the field via an interface.
func (v *searchLabelsResponse) GetRepository() *searchLabelsRepository { return v.Repository }

// singleStatusNodesAddedToProjectEvent includes the requested fields of the GraphQL type AddedToProjectEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'added_to_project' event on a given issue or pull request.
type singleStatusNodesAddedToProjectEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesAddedToProjectEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesAddedToProjectEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// A GitHub App.
type singleStatusNodesApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesApp.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesApp) GetTypename() *string { return v.Typename }

// singleStatusNodesAssignedEvent includes the requested fields of the GraphQL type AssignedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'assigned' event on any assignable object.
type singleStatusNodesAssignedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesAssignedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesAssignedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesAutoMergeDisabledEvent includes the requested fields of the GraphQL type AutoMergeDisabledEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'auto_merge_disabled' event on a given pull request.
type singleStatusNodesAutoMergeDisabledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesAutoMergeDisabledEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesAutoMergeDisabledEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesAutoMergeEnabledEvent includes the requested fields of the GraphQL type AutoMergeEnabledEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'auto_merge_enabled' event on a given pull request.
type singleStatusNodesAutoMergeEnabledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesAutoMergeEnabledEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesAutoMergeEnabledEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesAutoRebaseEnabledEvent includes the requested fields of the GraphQL type AutoRebaseEnabledEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'auto_rebase_enabled' event on a given pull request.
type singleStatusNodesAutoRebaseEnabledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesAutoRebaseEnabledEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesAutoRebaseEnabledEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesAutoSquashEnabledEvent includes the requested fields of the GraphQL type AutoSquashEnabledEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'auto_squash_enabled' event on a given pull request.
type singleStatusNodesAutoSquashEnabledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesAutoSquashEnabledEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesAutoSquashEnabledEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesAutomaticBaseChangeFailedEvent includes the requested fields of the GraphQL type AutomaticBaseChangeFailedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'automatic_base_change_failed' event on a given pull request.
type singleStatusNodesAutomaticBaseChangeFailedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesAutomaticBaseChangeFailedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesAutomaticBaseChangeFailedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesAutomaticBaseChangeSucceededEvent includes the requested fields of the GraphQL type AutomaticBaseChangeSucceededEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'automatic_base_change_succeeded' event on a given pull request.
type singleStatusNodesAutomaticBaseChangeSucceededEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesAutomaticBaseChangeSucceededEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesAutomaticBaseChangeSucceededEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesBaseRefChangedEvent includes the requested fields of the GraphQL type BaseRefChangedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'base_ref_changed' event on a given issue or pull request.
type singleStatusNodesBaseRefChangedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesBaseRefChangedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesBaseRefChangedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesBaseRefDeletedEvent includes the requested fields of the GraphQL type BaseRefDeletedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'base_ref_deleted' event on a given pull request.
type singleStatusNodesBaseRefDeletedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesBaseRefDeletedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesBaseRefDeletedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesBaseRefForcePushedEvent includes the requested fields of the GraphQL type BaseRefForcePushedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'base_ref_force_pushed' event on a given pull request.
type singleStatusNodesBaseRefForcePushedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesBaseRefForcePushedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesBaseRefForcePushedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesBlob includes the requested fields of the GraphQL type Blob.
// The GraphQL type's documentation follows.
//
// Represents a Git blob.
type singleStatusNodesBlob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesBlob.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesBlob) GetTypename() *string { return v.Typename }

// singleStatusNodesBot includes the requested fields of the GraphQL type Bot.
// The GraphQL type's documentation follows.
//
// A special type of user which takes actions on behalf of GitHub Apps.
type singleStatusNodesBot struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesBot.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesBot) GetTypename() *string { return v.Typename }

// singleStatusNodesBranchProtectionRule includes the requested fields of the GraphQL type BranchProtectionRule.
// The GraphQL type's documentation follows.
//
// A branch protection rule.
type singleStatusNodesBranchProtectionRule struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesBranchProtectionRule.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesBranchProtectionRule) GetTypename() *string { return v.Typename }

// singleStatusNodesBypassForcePushAllowance includes the requested fields of the GraphQL type BypassForcePushAllowance.
// The GraphQL type's documentation follows.
//
// A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
type singleStatusNodesBypassForcePushAllowance struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesBypassForcePushAllowance.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesBypassForcePushAllowance) GetTypename() *string { return v.Typename }

// singleStatusNodesBypassPullRequestAllowance includes the requested fields of the GraphQL type BypassPullRequestAllowance.
// The GraphQL type's documentation follows.
//
// A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
type singleStatusNodesBypassPullRequestAllowance struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesBypassPullRequestAllowance.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesBypassPullRequestAllowance) GetTypename() *string { return v.Typename }

// singleStatusNodesCWE includes the requested fields of the GraphQL type CWE.
// The GraphQL type's documentation follows.
//
// A common weakness enumeration
type singleStatusNodesCWE struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesCWE.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesCWE) GetTypename() *string { return v.Typename }

// singleStatusNodesCheckRun includes the requested fields of the GraphQL type CheckRun.
// The GraphQL type's documentation follows.
//
// A check run.
type singleStatusNodesCheckRun struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesCheckRun.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesCheckRun) GetTypename() *string { return v.Typename }

// singleStatusNodesCheckSuite includes the requested fields of the GraphQL type CheckSuite.
// The GraphQL type's documentation follows.
//
// A check suite.
type singleStatusNodesCheckSuite struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesCheckSuite.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesCheckSuite) GetTypename() *string { return v.Typename }

// singleStatusNodesClosedEvent includes the requested fields of the GraphQL type ClosedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'closed' event on any `Closable`.
type singleStatusNodesClosedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesClosedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesClosedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesCodeOfConduct includes the requested fields of the GraphQL type CodeOfConduct.
// The GraphQL type's documentation follows.
//
// The Code of Conduct for a repository
type singleStatusNodesCodeOfConduct struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesCodeOfConduct.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesCodeOfConduct) GetTypename() *string { return v.Typename }

// singleStatusNodesCommentDeletedEvent includes the requested fields of the GraphQL type CommentDeletedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'comment_deleted' event on a given issue or pull request.
type singleStatusNodesCommentDeletedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesCommentDeletedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesCommentDeletedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type singleStatusNodesCommit struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesCommit.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesCommit) GetTypename() *string { return v.Typename }

// singleStatusNodesCommitComment includes the requested fields of the GraphQL type CommitComment.
// The GraphQL type's documentation follows.
//
// Represents a comment on a given Commit.
type singleStatusNodesCommitComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesCommitComment.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesCommitComment) GetTypename() *string { return v.Typename }

// singleStatusNodesCommitCommentThread includes the requested fields of the GraphQL type CommitCommentThread.
// The GraphQL type's documentation follows.
//
// A thread of comments on a commit.
type singleStatusNodesCommitCommentThread struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesCommitCommentThread.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesCommitCommentThread) GetTypename() *string { return v.Typename }

// singleStatusNodesComparison includes the requested fields of the GraphQL type Comparison.
// The GraphQL type's documentation follows.
//
// Represents a comparison between two commit revisions.
type singleStatusNodesComparison struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesComparison.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesComparison) GetTypename() *string { return v.Typename }

// singleStatusNodesConnectedEvent includes the requested fields of the GraphQL type ConnectedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'connected' event on a given issue or pull request.
type singleStatusNodesConnectedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesConnectedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesConnectedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesConvertToDraftEvent includes the requested fields of the GraphQL type ConvertToDraftEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'convert_to_draft' event on a given pull request.
type singleStatusNodesConvertToDraftEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesConvertToDraftEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesConvertToDraftEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesConvertedNoteToIssueEvent includes the requested fields of the GraphQL type ConvertedNoteToIssueEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'converted_note_to_issue' event on a given issue or pull request.
type singleStatusNodesConvertedNoteToIssueEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesConvertedNoteToIssueEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesConvertedNoteToIssueEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesConvertedToDiscussionEvent includes the requested fields of the GraphQL type ConvertedToDiscussionEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'converted_to_discussion' event on a given issue.
type singleStatusNodesConvertedToDiscussionEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesConvertedToDiscussionEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesConvertedToDiscussionEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesCrossReferencedEvent includes the requested fields of the GraphQL type CrossReferencedEvent.
// The GraphQL type's documentation follows.
//
// Represents a mention made by one issue or pull request to another.
type singleStatusNodesCrossReferencedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesCrossReferencedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesCrossReferencedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesDemilestonedEvent includes the requested fields of the GraphQL type DemilestonedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'demilestoned' event on a given issue or pull request.
type singleStatusNodesDemilestonedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDemilestonedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDemilestonedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesDeployKey includes the requested fields of the GraphQL type DeployKey.
// The GraphQL type's documentation follows.
//
// A repository deploy key.
type singleStatusNodesDeployKey struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDeployKey.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDeployKey) GetTypename() *string { return v.Typename }

// singleStatusNodesDeployedEvent includes the requested fields of the GraphQL type DeployedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'deployed' event on a given pull request.
type singleStatusNodesDeployedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDeployedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDeployedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesDeployment includes the requested fields of the GraphQL type Deployment.
// The GraphQL type's documentation follows.
//
// Represents triggered deployment instance.
type singleStatusNodesDeployment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDeployment.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDeployment) GetTypename() *string { return v.Typename }

// singleStatusNodesDeploymentEnvironmentChangedEvent includes the requested fields of the GraphQL type DeploymentEnvironmentChangedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'deployment_environment_changed' event on a given pull request.
type singleStatusNodesDeploymentEnvironmentChangedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDeploymentEnvironmentChangedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDeploymentEnvironmentChangedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesDeploymentReview includes the requested fields of the GraphQL type DeploymentReview.
// The GraphQL type's documentation follows.
//
// A deployment review.
type singleStatusNodesDeploymentReview struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDeploymentReview.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDeploymentReview) GetTypename() *string { return v.Typename }

// singleStatusNodesDeploymentStatus includes the requested fields of the GraphQL type DeploymentStatus.
// The GraphQL type's documentation follows.
//
// Describes the status of a given deployment attempt.
type singleStatusNodesDeploymentStatus struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDeploymentStatus.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDeploymentStatus) GetTypename() *string { return v.Typename }

// singleStatusNodesDisconnectedEvent includes the requested fields of the GraphQL type DisconnectedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'disconnected' event on a given issue or pull request.
type singleStatusNodesDisconnectedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDisconnectedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDisconnectedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesDiscussion includes the requested fields of the GraphQL type Discussion.
// The GraphQL type's documentation follows.
//
// A discussion in a repository.
type singleStatusNodesDiscussion struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDiscussion.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDiscussion) GetTypename() *string { return v.Typename }

// singleStatusNodesDiscussionCategory includes the requested fields of the GraphQL type DiscussionCategory.
// The GraphQL type's documentation follows.
//
// A category for discussions in a repository.
type singleStatusNodesDiscussionCategory struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDiscussionCategory.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDiscussionCategory) GetTypename() *string { return v.Typename }

// singleStatusNodesDiscussionComment includes the requested fields of the GraphQL type DiscussionComment.
// The GraphQL type's documentation follows.
//
// A comment on a discussion.
type singleStatusNodesDiscussionComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDiscussionComment.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDiscussionComment) GetTypename() *string { return v.Typename }

// singleStatusNodesDiscussionPoll includes the requested fields of the GraphQL type DiscussionPoll.
// The GraphQL type's documentation follows.
//
// A poll for a discussion.
type singleStatusNodesDiscussionPoll struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDiscussionPoll.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDiscussionPoll) GetTypename() *string { return v.Typename }

// singleStatusNodesDiscussionPollOption includes the requested fields of the GraphQL type DiscussionPollOption.
// The GraphQL type's documentation follows.
//
// An option for a discussion poll.
type singleStatusNodesDiscussionPollOption struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDiscussionPollOption.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDiscussionPollOption) GetTypename() *string { return v.Typename }

// singleStatusNodesDraftIssue includes the requested fields of the GraphQL type DraftIssue.
// The GraphQL type's documentation follows.
//
// A draft issue within a project.
type singleStatusNodesDraftIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesDraftIssue.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesDraftIssue) GetTypename() *string { return v.Typename }

// singleStatusNodesEnterprise includes the requested fields of the GraphQL type Enterprise.
// The GraphQL type's documentation follows.
//
// An account to manage multiple organizations with consolidated policy and billing.
type singleStatusNodesEnterprise struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesEnterprise.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesEnterprise) GetTypename() *string { return v.Typename }

// singleStatusNodesEnterpriseAdministratorInvitation includes the requested fields of the GraphQL type EnterpriseAdministratorInvitation.
// The GraphQL type's documentation follows.
//
// An invitation for a user to become an owner or billing manager of an enterprise.
type singleStatusNodesEnterpriseAdministratorInvitation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesEnterpriseAdministratorInvitation.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesEnterpriseAdministratorInvitation) GetTypename() *string { return v.Typename }

// singleStatusNodesEnterpriseIdentityProvider includes the requested fields of the GraphQL type EnterpriseIdentityProvider.
// The GraphQL type's documentation follows.
//
// An identity provider configured to provision identities for an enterprise.
type singleStatusNodesEnterpriseIdentityProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesEnterpriseIdentityProvider.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesEnterpriseIdentityProvider) GetTypename() *string { return v.Typename }

// singleStatusNodesEnterpriseRepositoryInfo includes the requested fields of the GraphQL type EnterpriseRepositoryInfo.
// The GraphQL type's documentation follows.
//
// A subset of repository information queryable from an enterprise.
type singleStatusNodesEnterpriseRepositoryInfo struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesEnterpriseRepositoryInfo.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesEnterpriseRepositoryInfo) GetTypename() *string { return v.Typename }

// singleStatusNodesEnterpriseServerInstallation includes the requested fields of the GraphQL type EnterpriseServerInstallation.
// The GraphQL type's documentation follows.
//
// An Enterprise Server installation.
type singleStatusNodesEnterpriseServerInstallation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesEnterpriseServerInstallation.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesEnterpriseServerInstallation) GetTypename() *string { return v.Typename }

// singleStatusNodesEnterpriseServerUserAccount includes the requested fields of the GraphQL type EnterpriseServerUserAccount.
// The GraphQL type's documentation follows.
//
// A user account on an Enterprise Server installation.
type singleStatusNodesEnterpriseServerUserAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesEnterpriseServerUserAccount.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesEnterpriseServerUserAccount) GetTypename() *string { return v.Typename }

// singleStatusNodesEnterpriseServerUserAccountEmail includes the requested fields of the GraphQL type EnterpriseServerUserAccountEmail.
// The GraphQL type's documentation follows.
//
// An email belonging to a user account on an Enterprise Server installation.
type singleStatusNodesEnterpriseServerUserAccountEmail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesEnterpriseServerUserAccountEmail.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesEnterpriseServerUserAccountEmail) GetTypename() *string { return v.Typename }

// singleStatusNodesEnterpriseServerUserAccountsUpload includes the requested fields of the GraphQL type EnterpriseServerUserAccountsUpload.
// The GraphQL type's documentation follows.
//
// A user accounts upload from an Enterprise Server installation.
type singleStatusNodesEnterpriseServerUserAccountsUpload struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesEnterpriseServerUserAccountsUpload.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesEnterpriseServerUserAccountsUpload) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesEnterpriseUserAccount includes the requested fields of the GraphQL type EnterpriseUserAccount.
// The GraphQL type's documentation follows.
//
// An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
type singleStatusNodesEnterpriseUserAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesEnterpriseUserAccount.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesEnterpriseUserAccount) GetTypename() *string { return v.Typename }

// singleStatusNodesEnvironment includes the requested fields of the GraphQL type Environment.
// The GraphQL type's documentation follows.
//
// An environment.
type singleStatusNodesEnvironment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesEnvironment.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesEnvironment) GetTypename() *string { return v.Typename }

// singleStatusNodesExternalIdentity includes the requested fields of the GraphQL type ExternalIdentity.
// The GraphQL type's documentation follows.
//
// An external identity provisioned by SAML SSO or SCIM.
type singleStatusNodesExternalIdentity struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesExternalIdentity.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesExternalIdentity) GetTypename() *string { return v.Typename }

// singleStatusNodesGist includes the requested fields of the GraphQL type Gist.
// The GraphQL type's documentation follows.
//
// A Gist.
type singleStatusNodesGist struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesGist.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesGist) GetTypename() *string { return v.Typename }

// singleStatusNodesGistComment includes the requested fields of the GraphQL type GistComment.
// The GraphQL type's documentation follows.
//
// Represents a comment on an Gist.
type singleStatusNodesGistComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesGistComment.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesGistComment) GetTypename() *string { return v.Typename }

// singleStatusNodesHeadRefDeletedEvent includes the requested fields of the GraphQL type HeadRefDeletedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'head_ref_deleted' event on a given pull request.
type singleStatusNodesHeadRefDeletedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesHeadRefDeletedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesHeadRefDeletedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesHeadRefForcePushedEvent includes the requested fields of the GraphQL type HeadRefForcePushedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'head_ref_force_pushed' event on a given pull request.
type singleStatusNodesHeadRefForcePushedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesHeadRefForcePushedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesHeadRefForcePushedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesHeadRefRestoredEvent includes the requested fields of the GraphQL type HeadRefRestoredEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'head_ref_restored' event on a given pull request.
type singleStatusNodesHeadRefRestoredEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesHeadRefRestoredEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesHeadRefRestoredEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesIpAllowListEntry includes the requested fields of the GraphQL type IpAllowListEntry.
// The GraphQL type's documentation follows.
//
// An IP address or range of addresses that is allowed to access an owner's resources.
type singleStatusNodesIpAllowListEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesIpAllowListEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesIpAllowListEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type singleStatusNodesIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesIssue.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesIssue) GetTypename() *string { return v.Typename }

// singleStatusNodesIssueComment includes the requested fields of the GraphQL type IssueComment.
// The GraphQL type's documentation follows.
//
// Represents a comment on an Issue.
type singleStatusNodesIssueComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesIssueComment.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesIssueComment) GetTypename() *string { return v.Typename }

// singleStatusNodesLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type singleStatusNodesLabel struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesLabel.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesLabel) GetTypename() *string { return v.Typename }

// singleStatusNodesLabeledEvent includes the requested fields of the GraphQL type LabeledEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'labeled' event on a given issue or pull request.
type singleStatusNodesLabeledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesLabeledEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesLabeledEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesLanguage includes the requested fields of the GraphQL type Language.
// The GraphQL type's documentation follows.
//
// Represents a given language found in repositories.
type singleStatusNodesLanguage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesLanguage.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesLanguage) GetTypename() *string { return v.Typename }

// singleStatusNodesLicense includes the requested fields of the GraphQL type License.
// The GraphQL type's documentation follows.
//
// A repository's open source license
type singleStatusNodesLicense struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesLicense.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesLicense) GetTypename() *string { return v.Typename }

// singleStatusNodesLinkedBranch includes the requested fields of the GraphQL type LinkedBranch.
// The GraphQL type's documentation follows.
//
// A branch linked to an issue.
type singleStatusNodesLinkedBranch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesLinkedBranch.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesLinkedBranch) GetTypename() *string { return v.Typename }

// singleStatusNodesLockedEvent includes the requested fields of the GraphQL type LockedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'locked' event on a given issue or pull request.
type singleStatusNodesLockedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesLockedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesLockedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesMannequin includes the requested fields of the GraphQL type Mannequin.
// The GraphQL type's documentation follows.
//
// A placeholder user for attribution of imported data on GitHub.
type singleStatusNodesMannequin struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMannequin.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMannequin) GetTypename() *string { return v.Typename }

// singleStatusNodesMarkedAsDuplicateEvent includes the requested fields of the GraphQL type MarkedAsDuplicateEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'marked_as_duplicate' event on a given issue or pull request.
type singleStatusNodesMarkedAsDuplicateEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMarkedAsDuplicateEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMarkedAsDuplicateEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesMarketplaceCategory includes the requested fields of the GraphQL type MarketplaceCategory.
// The GraphQL type's documentation follows.
//
// A public description of a Marketplace category.
type singleStatusNodesMarketplaceCategory struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMarketplaceCategory.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMarketplaceCategory) GetTypename() *string { return v.Typename }

// singleStatusNodesMarketplaceListing includes the requested fields of the GraphQL type MarketplaceListing.
// The GraphQL type's documentation follows.
//
// A listing in the GitHub integration marketplace.
type singleStatusNodesMarketplaceListing struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMarketplaceListing.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMarketplaceListing) GetTypename() *string { return v.Typename }

// singleStatusNodesMembersCanDeleteReposClearAuditEntry includes the requested fields of the GraphQL type MembersCanDeleteReposClearAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a members_can_delete_repos.clear event.
type singleStatusNodesMembersCanDeleteReposClearAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMembersCanDeleteReposClearAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMembersCanDeleteReposClearAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesMembersCanDeleteReposDisableAuditEntry includes the requested fields of the GraphQL type MembersCanDeleteReposDisableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a members_can_delete_repos.disable event.
type singleStatusNodesMembersCanDeleteReposDisableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMembersCanDeleteReposDisableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMembersCanDeleteReposDisableAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesMembersCanDeleteReposEnableAuditEntry includes the requested fields of the GraphQL type MembersCanDeleteReposEnableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a members_can_delete_repos.enable event.
type singleStatusNodesMembersCanDeleteReposEnableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMembersCanDeleteReposEnableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMembersCanDeleteReposEnableAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesMentionedEvent includes the requested fields of the GraphQL type MentionedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'mentioned' event on a given issue or pull request.
type singleStatusNodesMentionedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMentionedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMentionedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesMergedEvent includes the requested fields of the GraphQL type MergedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'merged' event on a given pull request.
type singleStatusNodesMergedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMergedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMergedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesMigrationSource includes the requested fields of the GraphQL type MigrationSource.
// The GraphQL type's documentation follows.
//
// A GitHub Enterprise Importer (GEI) migration source.
type singleStatusNodesMigrationSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMigrationSource.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMigrationSource) GetTypename() *string { return v.Typename }

// singleStatusNodesMilestone includes the requested fields of the GraphQL type Milestone.
// The GraphQL type's documentation follows.
//
// Represents a Milestone object on a given repository.
type singleStatusNodesMilestone struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMilestone.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMilestone) GetTypename() *string { return v.Typename }

// singleStatusNodesMilestonedEvent includes the requested fields of the GraphQL type MilestonedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'milestoned' event on a given issue or pull request.
type singleStatusNodesMilestonedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMilestonedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMilestonedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesMovedColumnsInProjectEvent includes the requested fields of the GraphQL type MovedColumnsInProjectEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'moved_columns_in_project' event on a given issue or pull request.
type singleStatusNodesMovedColumnsInProjectEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesMovedColumnsInProjectEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesMovedColumnsInProjectEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesNode includes the requested fields of the GraphQL interface Node.
//
// singleStatusNodesNode is implemented by the following types:
// singleStatusNodesAddedToProjectEvent
// singleStatusNodesApp
// singleStatusNodesAssignedEvent
// singleStatusNodesAutoMergeDisabledEvent
// singleStatusNodesAutoMergeEnabledEvent
// singleStatusNodesAutoRebaseEnabledEvent
// singleStatusNodesAutoSquashEnabledEvent
// singleStatusNodesAutomaticBaseChangeFailedEvent
// singleStatusNodesAutomaticBaseChangeSucceededEvent
// singleStatusNodesBaseRefChangedEvent
// singleStatusNodesBaseRefDeletedEvent
// singleStatusNodesBaseRefForcePushedEvent
// singleStatusNodesBlob
// singleStatusNodesBot
// singleStatusNodesBranchProtectionRule
// singleStatusNodesBypassForcePushAllowance
// singleStatusNodesBypassPullRequestAllowance
// singleStatusNodesCWE
// singleStatusNodesCheckRun
// singleStatusNodesCheckSuite
// singleStatusNodesClosedEvent
// singleStatusNodesCodeOfConduct
// singleStatusNodesCommentDeletedEvent
// singleStatusNodesCommit
// singleStatusNodesCommitComment
// singleStatusNodesCommitCommentThread
// singleStatusNodesComparison
// singleStatusNodesConnectedEvent
// singleStatusNodesConvertToDraftEvent
// singleStatusNodesConvertedNoteToIssueEvent
// singleStatusNodesConvertedToDiscussionEvent
// singleStatusNodesCrossReferencedEvent
// singleStatusNodesDemilestonedEvent
// singleStatusNodesDeployKey
// singleStatusNodesDeployedEvent
// singleStatusNodesDeployment
// singleStatusNodesDeploymentEnvironmentChangedEvent
// singleStatusNodesDeploymentReview
// singleStatusNodesDeploymentStatus
// singleStatusNodesDisconnectedEvent
// singleStatusNodesDiscussion
// singleStatusNodesDiscussionCategory
// singleStatusNodesDiscussionComment
// singleStatusNodesDiscussionPoll
// singleStatusNodesDiscussionPollOption
// singleStatusNodesDraftIssue
// singleStatusNodesEnterprise
// singleStatusNodesEnterpriseAdministratorInvitation
// singleStatusNodesEnterpriseIdentityProvider
// singleStatusNodesEnterpriseRepositoryInfo
// singleStatusNodesEnterpriseServerInstallation
// singleStatusNodesEnterpriseServerUserAccount
// singleStatusNodesEnterpriseServerUserAccountEmail
// singleStatusNodesEnterpriseServerUserAccountsUpload
// singleStatusNodesEnterpriseUserAccount
// singleStatusNodesEnvironment
// singleStatusNodesExternalIdentity
// singleStatusNodesGist
// singleStatusNodesGistComment
// singleStatusNodesHeadRefDeletedEvent
// singleStatusNodesHeadRefForcePushedEvent
// singleStatusNodesHeadRefRestoredEvent
// singleStatusNodesIpAllowListEntry
// singleStatusNodesIssue
// singleStatusNodesIssueComment
// singleStatusNodesLabel
// singleStatusNodesLabeledEvent
// singleStatusNodesLanguage
// singleStatusNodesLicense
// singleStatusNodesLinkedBranch
// singleStatusNodesLockedEvent
// singleStatusNodesMannequin
// singleStatusNodesMarkedAsDuplicateEvent
// singleStatusNodesMarketplaceCategory
// singleStatusNodesMarketplaceListing
// singleStatusNodesMembersCanDeleteReposClearAuditEntry
// singleStatusNodesMembersCanDeleteReposDisableAuditEntry
// singleStatusNodesMembersCanDeleteReposEnableAuditEntry
// singleStatusNodesMentionedEvent
// singleStatusNodesMergedEvent
// singleStatusNodesMigrationSource
// singleStatusNodesMilestone
// singleStatusNodesMilestonedEvent
// singleStatusNodesMovedColumnsInProjectEvent
// singleStatusNodesOIDCProvider
// singleStatusNodesOauthApplicationCreateAuditEntry
// singleStatusNodesOrgAddBillingManagerAuditEntry
// singleStatusNodesOrgAddMemberAuditEntry
// singleStatusNodesOrgBlockUserAuditEntry
// singleStatusNodesOrgConfigDisableCollaboratorsOnlyAuditEntry
// singleStatusNodesOrgConfigEnableCollaboratorsOnlyAuditEntry
// singleStatusNodesOrgCreateAuditEntry
// singleStatusNodesOrgDisableOauthAppRestrictionsAuditEntry
// singleStatusNodesOrgDisableSamlAuditEntry
// singleStatusNodesOrgDisableTwoFactorRequirementAuditEntry
// singleStatusNodesOrgEnableOauthAppRestrictionsAuditEntry
// singleStatusNodesOrgEnableSamlAuditEntry
// singleStatusNodesOrgEnableTwoFactorRequirementAuditEntry
// singleStatusNodesOrgInviteMemberAuditEntry
// singleStatusNodesOrgInviteToBusinessAuditEntry
// singleStatusNodesOrgOauthAppAccessApprovedAuditEntry
// singleStatusNodesOrgOauthAppAccessDeniedAuditEntry
// singleStatusNodesOrgOauthAppAccessRequestedAuditEntry
// singleStatusNodesOrgRemoveBillingManagerAuditEntry
// singleStatusNodesOrgRemoveMemberAuditEntry
// singleStatusNodesOrgRemoveOutsideCollaboratorAuditEntry
// singleStatusNodesOrgRestoreMemberAuditEntry
// singleStatusNodesOrgUnblockUserAuditEntry
// singleStatusNodesOrgUpdateDefaultRepositoryPermissionAuditEntry
// singleStatusNodesOrgUpdateMemberAuditEntry
// singleStatusNodesOrgUpdateMemberRepositoryCreationPermissionAuditEntry
// singleStatusNodesOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
// singleStatusNodesOrganization
// singleStatusNodesOrganizationIdentityProvider
// singleStatusNodesOrganizationInvitation
// singleStatusNodesPackage
// singleStatusNodesPackageFile
// singleStatusNodesPackageTag
// singleStatusNodesPackageVersion
// singleStatusNodesPinnedDiscussion
// singleStatusNodesPinnedEvent
// singleStatusNodesPinnedIssue
// singleStatusNodesPrivateRepositoryForkingDisableAuditEntry
// singleStatusNodesPrivateRepositoryForkingEnableAuditEntry
// singleStatusNodesProject
// singleStatusNodesProjectCard
// singleStatusNodesProjectColumn
// singleStatusNodesProjectNext
// singleStatusNodesProjectNextField
// singleStatusNodesProjectNextItem
// singleStatusNodesProjectNextItemFieldValue
// singleStatusNodesProjectNextIterationField
// singleStatusNodesProjectNextSingleSelectField
// singleStatusNodesProjectV2
// singleStatusNodesProjectV2Field
// singleStatusNodesProjectV2Item
// singleStatusNodesProjectV2ItemFieldDateValue
// singleStatusNodesProjectV2ItemFieldIterationValue
// singleStatusNodesProjectV2ItemFieldNumberValue
// singleStatusNodesProjectV2ItemFieldSingleSelectValue
// singleStatusNodesProjectV2ItemFieldTextValue
// singleStatusNodesProjectV2IterationField
// singleStatusNodesProjectV2SingleSelectField
// singleStatusNodesProjectV2View
// singleStatusNodesProjectView
// singleStatusNodesPublicKey
// singleStatusNodesPullRequest
// singleStatusNodesPullRequestCommit
// singleStatusNodesPullRequestCommitCommentThread
// singleStatusNodesPullRequestReview
// singleStatusNodesPullRequestReviewComment
// singleStatusNodesPullRequestReviewThread
// singleStatusNodesPullRequestThread
// singleStatusNodesPush
// singleStatusNodesPushAllowance
// singleStatusNodesReaction
// singleStatusNodesReadyForReviewEvent
// singleStatusNodesRef
// singleStatusNodesReferencedEvent
// singleStatusNodesRelease
// singleStatusNodesReleaseAsset
// singleStatusNodesRemovedFromProjectEvent
// singleStatusNodesRenamedTitleEvent
// singleStatusNodesReopenedEvent
// singleStatusNodesRepoAccessAuditEntry
// singleStatusNodesRepoAddMemberAuditEntry
// singleStatusNodesRepoAddTopicAuditEntry
// singleStatusNodesRepoArchivedAuditEntry
// singleStatusNodesRepoChangeMergeSettingAuditEntry
// singleStatusNodesRepoConfigDisableAnonymousGitAccessAuditEntry
// singleStatusNodesRepoConfigDisableCollaboratorsOnlyAuditEntry
// singleStatusNodesRepoConfigDisableContributorsOnlyAuditEntry
// singleStatusNodesRepoConfigDisableSockpuppetDisallowedAuditEntry
// singleStatusNodesRepoConfigEnableAnonymousGitAccessAuditEntry
// singleStatusNodesRepoConfigEnableCollaboratorsOnlyAuditEntry
// singleStatusNodesRepoConfigEnableContributorsOnlyAuditEntry
// singleStatusNodesRepoConfigEnableSockpuppetDisallowedAuditEntry
// singleStatusNodesRepoConfigLockAnonymousGitAccessAuditEntry
// singleStatusNodesRepoConfigUnlockAnonymousGitAccessAuditEntry
// singleStatusNodesRepoCreateAuditEntry
// singleStatusNodesRepoDestroyAuditEntry
// singleStatusNodesRepoRemoveMemberAuditEntry
// singleStatusNodesRepoRemoveTopicAuditEntry
// singleStatusNodesRepository
// singleStatusNodesRepositoryInvitation
// singleStatusNodesRepositoryMigration
// singleStatusNodesRepositoryTopic
// singleStatusNodesRepositoryVisibilityChangeDisableAuditEntry
// singleStatusNodesRepositoryVisibilityChangeEnableAuditEntry
// singleStatusNodesRepositoryVulnerabilityAlert
// singleStatusNodesReviewDismissalAllowance
// singleStatusNodesReviewDismissedEvent
// singleStatusNodesReviewRequest
// singleStatusNodesReviewRequestRemovedEvent
// singleStatusNodesReviewRequestedEvent
// singleStatusNodesSavedReply
// singleStatusNodesSecurityAdvisory
// singleStatusNodesSponsorsActivity
// singleStatusNodesSponsorsListing
// singleStatusNodesSponsorsListingFeaturedItem
// singleStatusNodesSponsorsTier
// singleStatusNodesSponsorship
// singleStatusNodesSponsorshipNewsletter
// singleStatusNodesStatus
// singleStatusNodesStatusCheckRollup
// singleStatusNodesStatusContext
// singleStatusNodesSubscribedEvent
// singleStatusNodesTag
// singleStatusNodesTeam
// singleStatusNodesTeamAddMemberAuditEntry
// singleStatusNodesTeamAddRepositoryAuditEntry
// singleStatusNodesTeamChangeParentTeamAuditEntry
// singleStatusNodesTeamDiscussion
// singleStatusNodesTeamDiscussionComment
// singleStatusNodesTeamRemoveMemberAuditEntry
// singleStatusNodesTeamRemoveRepositoryAuditEntry
// singleStatusNodesTopic
// singleStatusNodesTransferredEvent
// singleStatusNodesTree
// singleStatusNodesUnassignedEvent
// singleStatusNodesUnlabeledEvent
// singleStatusNodesUnlockedEvent
// singleStatusNodesUnmarkedAsDuplicateEvent
// singleStatusNodesUnpinnedEvent
// singleStatusNodesUnsubscribedEvent
// singleStatusNodesUser
// singleStatusNodesUserBlockedEvent
// singleStatusNodesUserContentEdit
// singleStatusNodesUserStatus
// singleStatusNodesVerifiableDomain
// singleStatusNodesWorkflow
// singleStatusNodesWorkflowRun
// The GraphQL type's documentation follows.
//
// An object with an ID.
type singleStatusNodesNode interface {
	implementsGraphQLInterfacesingleStatusNodesNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *singleStatusNodesAddedToProjectEvent) implementsGraphQLInterfacesingleStatusNodesNode()    {}
func (v *singleStatusNodesApp) implementsGraphQLInterfacesingleStatusNodesNode()                    {}
func (v *singleStatusNodesAssignedEvent) implementsGraphQLInterfacesingleStatusNodesNode()          {}
func (v *singleStatusNodesAutoMergeDisabledEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesAutoMergeEnabledEvent) implementsGraphQLInterfacesingleStatusNodesNode()  {}
func (v *singleStatusNodesAutoRebaseEnabledEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesAutoSquashEnabledEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesAutomaticBaseChangeFailedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesAutomaticBaseChangeSucceededEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesBaseRefChangedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesBaseRefDeletedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesBaseRefForcePushedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesBlob) implementsGraphQLInterfacesingleStatusNodesNode()                 {}
func (v *singleStatusNodesBot) implementsGraphQLInterfacesingleStatusNodesNode()                  {}
func (v *singleStatusNodesBranchProtectionRule) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesBypassForcePushAllowance) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesBypassPullRequestAllowance) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesCWE) implementsGraphQLInterfacesingleStatusNodesNode()                 {}
func (v *singleStatusNodesCheckRun) implementsGraphQLInterfacesingleStatusNodesNode()            {}
func (v *singleStatusNodesCheckSuite) implementsGraphQLInterfacesingleStatusNodesNode()          {}
func (v *singleStatusNodesClosedEvent) implementsGraphQLInterfacesingleStatusNodesNode()         {}
func (v *singleStatusNodesCodeOfConduct) implementsGraphQLInterfacesingleStatusNodesNode()       {}
func (v *singleStatusNodesCommentDeletedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesCommit) implementsGraphQLInterfacesingleStatusNodesNode()              {}
func (v *singleStatusNodesCommitComment) implementsGraphQLInterfacesingleStatusNodesNode()       {}
func (v *singleStatusNodesCommitCommentThread) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesComparison) implementsGraphQLInterfacesingleStatusNodesNode()          {}
func (v *singleStatusNodesConnectedEvent) implementsGraphQLInterfacesingleStatusNodesNode()      {}
func (v *singleStatusNodesConvertToDraftEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesConvertedNoteToIssueEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesConvertedToDiscussionEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesCrossReferencedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesDemilestonedEvent) implementsGraphQLInterfacesingleStatusNodesNode()    {}
func (v *singleStatusNodesDeployKey) implementsGraphQLInterfacesingleStatusNodesNode()            {}
func (v *singleStatusNodesDeployedEvent) implementsGraphQLInterfacesingleStatusNodesNode()        {}
func (v *singleStatusNodesDeployment) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesDeploymentEnvironmentChangedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesDeploymentReview) implementsGraphQLInterfacesingleStatusNodesNode()     {}
func (v *singleStatusNodesDeploymentStatus) implementsGraphQLInterfacesingleStatusNodesNode()     {}
func (v *singleStatusNodesDisconnectedEvent) implementsGraphQLInterfacesingleStatusNodesNode()    {}
func (v *singleStatusNodesDiscussion) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesDiscussionCategory) implementsGraphQLInterfacesingleStatusNodesNode()   {}
func (v *singleStatusNodesDiscussionComment) implementsGraphQLInterfacesingleStatusNodesNode()    {}
func (v *singleStatusNodesDiscussionPoll) implementsGraphQLInterfacesingleStatusNodesNode()       {}
func (v *singleStatusNodesDiscussionPollOption) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesDraftIssue) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesEnterprise) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesEnterpriseAdministratorInvitation) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesEnterpriseIdentityProvider) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesEnterpriseRepositoryInfo) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesEnterpriseServerInstallation) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesEnterpriseServerUserAccount) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesEnterpriseServerUserAccountEmail) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesEnterpriseServerUserAccountsUpload) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesEnterpriseUserAccount) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesEnvironment) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesExternalIdentity) implementsGraphQLInterfacesingleStatusNodesNode()      {}
func (v *singleStatusNodesGist) implementsGraphQLInterfacesingleStatusNodesNode()                  {}
func (v *singleStatusNodesGistComment) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesHeadRefDeletedEvent) implementsGraphQLInterfacesingleStatusNodesNode()   {}
func (v *singleStatusNodesHeadRefForcePushedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesHeadRefRestoredEvent) implementsGraphQLInterfacesingleStatusNodesNode()   {}
func (v *singleStatusNodesIpAllowListEntry) implementsGraphQLInterfacesingleStatusNodesNode()       {}
func (v *singleStatusNodesIssue) implementsGraphQLInterfacesingleStatusNodesNode()                  {}
func (v *singleStatusNodesIssueComment) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesLabel) implementsGraphQLInterfacesingleStatusNodesNode()                  {}
func (v *singleStatusNodesLabeledEvent) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesLanguage) implementsGraphQLInterfacesingleStatusNodesNode()               {}
func (v *singleStatusNodesLicense) implementsGraphQLInterfacesingleStatusNodesNode()                {}
func (v *singleStatusNodesLinkedBranch) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesLockedEvent) implementsGraphQLInterfacesingleStatusNodesNode()            {}
func (v *singleStatusNodesMannequin) implementsGraphQLInterfacesingleStatusNodesNode()              {}
func (v *singleStatusNodesMarkedAsDuplicateEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesMarketplaceCategory) implementsGraphQLInterfacesingleStatusNodesNode()    {}
func (v *singleStatusNodesMarketplaceListing) implementsGraphQLInterfacesingleStatusNodesNode()     {}
func (v *singleStatusNodesMembersCanDeleteReposClearAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesMembersCanDeleteReposDisableAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesMembersCanDeleteReposEnableAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesMentionedEvent) implementsGraphQLInterfacesingleStatusNodesNode()  {}
func (v *singleStatusNodesMergedEvent) implementsGraphQLInterfacesingleStatusNodesNode()     {}
func (v *singleStatusNodesMigrationSource) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesMilestone) implementsGraphQLInterfacesingleStatusNodesNode()       {}
func (v *singleStatusNodesMilestonedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesMovedColumnsInProjectEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOIDCProvider) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesOauthApplicationCreateAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgAddBillingManagerAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgAddMemberAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesOrgBlockUserAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesOrgConfigDisableCollaboratorsOnlyAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgConfigEnableCollaboratorsOnlyAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgCreateAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesOrgDisableOauthAppRestrictionsAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgDisableSamlAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgDisableTwoFactorRequirementAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgEnableOauthAppRestrictionsAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgEnableSamlAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgEnableTwoFactorRequirementAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgInviteMemberAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgInviteToBusinessAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgOauthAppAccessApprovedAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgOauthAppAccessDeniedAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgOauthAppAccessRequestedAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgRemoveBillingManagerAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgRemoveMemberAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgRemoveOutsideCollaboratorAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgRestoreMemberAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgUnblockUserAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgUpdateDefaultRepositoryPermissionAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgUpdateMemberAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgUpdateMemberRepositoryCreationPermissionAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrgUpdateMemberRepositoryInvitationPermissionAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrganization) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesOrganizationIdentityProvider) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesOrganizationInvitation) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesPackage) implementsGraphQLInterfacesingleStatusNodesNode()                {}
func (v *singleStatusNodesPackageFile) implementsGraphQLInterfacesingleStatusNodesNode()            {}
func (v *singleStatusNodesPackageTag) implementsGraphQLInterfacesingleStatusNodesNode()             {}
func (v *singleStatusNodesPackageVersion) implementsGraphQLInterfacesingleStatusNodesNode()         {}
func (v *singleStatusNodesPinnedDiscussion) implementsGraphQLInterfacesingleStatusNodesNode()       {}
func (v *singleStatusNodesPinnedEvent) implementsGraphQLInterfacesingleStatusNodesNode()            {}
func (v *singleStatusNodesPinnedIssue) implementsGraphQLInterfacesingleStatusNodesNode()            {}
func (v *singleStatusNodesPrivateRepositoryForkingDisableAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesPrivateRepositoryForkingEnableAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProject) implementsGraphQLInterfacesingleStatusNodesNode()          {}
func (v *singleStatusNodesProjectCard) implementsGraphQLInterfacesingleStatusNodesNode()      {}
func (v *singleStatusNodesProjectColumn) implementsGraphQLInterfacesingleStatusNodesNode()    {}
func (v *singleStatusNodesProjectNext) implementsGraphQLInterfacesingleStatusNodesNode()      {}
func (v *singleStatusNodesProjectNextField) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesProjectNextItem) implementsGraphQLInterfacesingleStatusNodesNode()  {}
func (v *singleStatusNodesProjectNextItemFieldValue) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProjectNextIterationField) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProjectNextSingleSelectField) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProjectV2) implementsGraphQLInterfacesingleStatusNodesNode()      {}
func (v *singleStatusNodesProjectV2Field) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesProjectV2Item) implementsGraphQLInterfacesingleStatusNodesNode()  {}
func (v *singleStatusNodesProjectV2ItemFieldDateValue) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProjectV2ItemFieldIterationValue) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProjectV2ItemFieldNumberValue) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProjectV2ItemFieldSingleSelectValue) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProjectV2ItemFieldTextValue) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProjectV2IterationField) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProjectV2SingleSelectField) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesProjectV2View) implementsGraphQLInterfacesingleStatusNodesNode()     {}
func (v *singleStatusNodesProjectView) implementsGraphQLInterfacesingleStatusNodesNode()       {}
func (v *singleStatusNodesPublicKey) implementsGraphQLInterfacesingleStatusNodesNode()         {}
func (v *singleStatusNodesPullRequest) implementsGraphQLInterfacesingleStatusNodesNode()       {}
func (v *singleStatusNodesPullRequestCommit) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesPullRequestCommitCommentThread) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesPullRequestReview) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesPullRequestReviewComment) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesPullRequestReviewThread) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesPullRequestThread) implementsGraphQLInterfacesingleStatusNodesNode()   {}
func (v *singleStatusNodesPush) implementsGraphQLInterfacesingleStatusNodesNode()                {}
func (v *singleStatusNodesPushAllowance) implementsGraphQLInterfacesingleStatusNodesNode()       {}
func (v *singleStatusNodesReaction) implementsGraphQLInterfacesingleStatusNodesNode()            {}
func (v *singleStatusNodesReadyForReviewEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesRef) implementsGraphQLInterfacesingleStatusNodesNode()                 {}
func (v *singleStatusNodesReferencedEvent) implementsGraphQLInterfacesingleStatusNodesNode()     {}
func (v *singleStatusNodesRelease) implementsGraphQLInterfacesingleStatusNodesNode()             {}
func (v *singleStatusNodesReleaseAsset) implementsGraphQLInterfacesingleStatusNodesNode()        {}
func (v *singleStatusNodesRemovedFromProjectEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRenamedTitleEvent) implementsGraphQLInterfacesingleStatusNodesNode()    {}
func (v *singleStatusNodesReopenedEvent) implementsGraphQLInterfacesingleStatusNodesNode()        {}
func (v *singleStatusNodesRepoAccessAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesRepoAddMemberAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoAddTopicAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesRepoArchivedAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesRepoChangeMergeSettingAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoConfigDisableAnonymousGitAccessAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoConfigDisableCollaboratorsOnlyAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoConfigDisableContributorsOnlyAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoConfigDisableSockpuppetDisallowedAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoConfigEnableAnonymousGitAccessAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoConfigEnableCollaboratorsOnlyAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoConfigEnableContributorsOnlyAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoConfigEnableSockpuppetDisallowedAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoConfigLockAnonymousGitAccessAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoConfigUnlockAnonymousGitAccessAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoCreateAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode()  {}
func (v *singleStatusNodesRepoDestroyAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesRepoRemoveMemberAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepoRemoveTopicAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepository) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesRepositoryInvitation) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesRepositoryMigration) implementsGraphQLInterfacesingleStatusNodesNode()  {}
func (v *singleStatusNodesRepositoryTopic) implementsGraphQLInterfacesingleStatusNodesNode()      {}
func (v *singleStatusNodesRepositoryVisibilityChangeDisableAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepositoryVisibilityChangeEnableAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesRepositoryVulnerabilityAlert) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesReviewDismissalAllowance) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesReviewDismissedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesReviewRequest) implementsGraphQLInterfacesingleStatusNodesNode()        {}
func (v *singleStatusNodesReviewRequestRemovedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesReviewRequestedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesSavedReply) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesSecurityAdvisory) implementsGraphQLInterfacesingleStatusNodesNode()     {}
func (v *singleStatusNodesSponsorsActivity) implementsGraphQLInterfacesingleStatusNodesNode()     {}
func (v *singleStatusNodesSponsorsListing) implementsGraphQLInterfacesingleStatusNodesNode()      {}
func (v *singleStatusNodesSponsorsListingFeaturedItem) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesSponsorsTier) implementsGraphQLInterfacesingleStatusNodesNode()          {}
func (v *singleStatusNodesSponsorship) implementsGraphQLInterfacesingleStatusNodesNode()           {}
func (v *singleStatusNodesSponsorshipNewsletter) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesStatus) implementsGraphQLInterfacesingleStatusNodesNode()                {}
func (v *singleStatusNodesStatusCheckRollup) implementsGraphQLInterfacesingleStatusNodesNode()     {}
func (v *singleStatusNodesStatusContext) implementsGraphQLInterfacesingleStatusNodesNode()         {}
func (v *singleStatusNodesSubscribedEvent) implementsGraphQLInterfacesingleStatusNodesNode()       {}
func (v *singleStatusNodesTag) implementsGraphQLInterfacesingleStatusNodesNode()                   {}
func (v *singleStatusNodesTeam) implementsGraphQLInterfacesingleStatusNodesNode()                  {}
func (v *singleStatusNodesTeamAddMemberAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesTeamAddRepositoryAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesTeamChangeParentTeamAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesTeamDiscussion) implementsGraphQLInterfacesingleStatusNodesNode()        {}
func (v *singleStatusNodesTeamDiscussionComment) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesTeamRemoveMemberAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesTeamRemoveRepositoryAuditEntry) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesTopic) implementsGraphQLInterfacesingleStatusNodesNode()            {}
func (v *singleStatusNodesTransferredEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesTree) implementsGraphQLInterfacesingleStatusNodesNode()             {}
func (v *singleStatusNodesUnassignedEvent) implementsGraphQLInterfacesingleStatusNodesNode()  {}
func (v *singleStatusNodesUnlabeledEvent) implementsGraphQLInterfacesingleStatusNodesNode()   {}
func (v *singleStatusNodesUnlockedEvent) implementsGraphQLInterfacesingleStatusNodesNode()    {}
func (v *singleStatusNodesUnmarkedAsDuplicateEvent) implementsGraphQLInterfacesingleStatusNodesNode() {
}
func (v *singleStatusNodesUnpinnedEvent) implementsGraphQLInterfacesingleStatusNodesNode()     {}
func (v *singleStatusNodesUnsubscribedEvent) implementsGraphQLInterfacesingleStatusNodesNode() {}
func (v *singleStatusNodesUser) implementsGraphQLInterfacesingleStatusNodesNode()              {}
func (v *singleStatusNodesUserBlockedEvent) implementsGraphQLInterfacesingleStatusNodesNode()  {}
func (v *singleStatusNodesUserContentEdit) implementsGraphQLInterfacesingleStatusNodesNode()   {}
func (v *singleStatusNodesUserStatus) implementsGraphQLInterfacesingleStatusNodesNode()        {}
func (v *singleStatusNodesVerifiableDomain) implementsGraphQLInterfacesingleStatusNodesNode()  {}
func (v *singleStatusNodesWorkflow) implementsGraphQLInterfacesingleStatusNodesNode()          {}
func (v *singleStatusNodesWorkflowRun) implementsGraphQLInterfacesingleStatusNodesNode()       {}

func __unmarshalsingleStatusNodesNode(b []byte, v *singleStatusNodesNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddedToProjectEvent":
		*v = new(singleStatusNodesAddedToProjectEvent)
		return json.Unmarshal(b, *v)
	case "App":
		*v = new(singleStatusNodesApp)
		return json.Unmarshal(b, *v)
	case "AssignedEvent":
		*v = new(singleStatusNodesAssignedEvent)
		return json.Unmarshal(b, *v)
	case "AutoMergeDisabledEvent":
		*v = new(singleStatusNodesAutoMergeDisabledEvent)
		return json.Unmarshal(b, *v)
	case "AutoMergeEnabledEvent":
		*v = new(singleStatusNodesAutoMergeEnabledEvent)
		return json.Unmarshal(b, *v)
	case "AutoRebaseEnabledEvent":
		*v = new(singleStatusNodesAutoRebaseEnabledEvent)
		return json.Unmarshal(b, *v)
	case "AutoSquashEnabledEvent":
		*v = new(singleStatusNodesAutoSquashEnabledEvent)
		return json.Unmarshal(b, *v)
	case "AutomaticBaseChangeFailedEvent":
		*v = new(singleStatusNodesAutomaticBaseChangeFailedEvent)
		return json.Unmarshal(b, *v)
	case "AutomaticBaseChangeSucceededEvent":
		*v = new(singleStatusNodesAutomaticBaseChangeSucceededEvent)
		return json.Unmarshal(b, *v)
	case "BaseRefChangedEvent":
		*v = new(singleStatusNodesBaseRefChangedEvent)
		return json.Unmarshal(b, *v)
	case "BaseRefDeletedEvent":
		*v = new(singleStatusNodesBaseRefDeletedEvent)
		return json.Unmarshal(b, *v)
	case "BaseRefForcePushedEvent":
		*v = new(singleStatusNodesBaseRefForcePushedEvent)
		return json.Unmarshal(b, *v)
	case "Blob":
		*v = new(singleStatusNodesBlob)
		return json.Unmarshal(b, *v)
	case "Bot":
		*v = new(singleStatusNodesBot)
		return json.Unmarshal(b, *v)
	case "BranchProtectionRule":
		*v = new(singleStatusNodesBranchProtectionRule)
		return json.Unmarshal(b, *v)
	case "BypassForcePushAllowance":
		*v = new(singleStatusNodesBypassForcePushAllowance)
		return json.Unmarshal(b, *v)
	case "BypassPullRequestAllowance":
		*v = new(singleStatusNodesBypassPullRequestAllowance)
		return json.Unmarshal(b, *v)
	case "CWE":
		*v = new(singleStatusNodesCWE)
		return json.Unmarshal(b, *v)
	case "CheckRun":
		*v = new(singleStatusNodesCheckRun)
		return json.Unmarshal(b, *v)
	case "CheckSuite":
		*v = new(singleStatusNodesCheckSuite)
		return json.Unmarshal(b, *v)
	case "ClosedEvent":
		*v = new(singleStatusNodesClosedEvent)
		return json.Unmarshal(b, *v)
	case "CodeOfConduct":
		*v = new(singleStatusNodesCodeOfConduct)
		return json.Unmarshal(b, *v)
	case "CommentDeletedEvent":
		*v = new(singleStatusNodesCommentDeletedEvent)
		return json.Unmarshal(b, *v)
	case "Commit":
		*v = new(singleStatusNodesCommit)
		return json.Unmarshal(b, *v)
	case "CommitComment":
		*v = new(singleStatusNodesCommitComment)
		return json.Unmarshal(b, *v)
	case "CommitCommentThread":
		*v = new(singleStatusNodesCommitCommentThread)
		return json.Unmarshal(b, *v)
	case "Comparison":
		*v = new(singleStatusNodesComparison)
		return json.Unmarshal(b, *v)
	case "ConnectedEvent":
		*v = new(singleStatusNodesConnectedEvent)
		return json.Unmarshal(b, *v)
	case "ConvertToDraftEvent":
		*v = new(singleStatusNodesConvertToDraftEvent)
		return json.Unmarshal(b, *v)
	case "ConvertedNoteToIssueEvent":
		*v = new(singleStatusNodesConvertedNoteToIssueEvent)
		return json.Unmarshal(b, *v)
	case "ConvertedToDiscussionEvent":
		*v = new(singleStatusNodesConvertedToDiscussionEvent)
		return json.Unmarshal(b, *v)
	case "CrossReferencedEvent":
		*v = new(singleStatusNodesCrossReferencedEvent)
		return json.Unmarshal(b, *v)
	case "DemilestonedEvent":
		*v = new(singleStatusNodesDemilestonedEvent)
		return json.Unmarshal(b, *v)
	case "DeployKey":
		*v = new(singleStatusNodesDeployKey)
		return json.Unmarshal(b, *v)
	case "DeployedEvent":
		*v = new(singleStatusNodesDeployedEvent)
		return json.Unmarshal(b, *v)
	case "Deployment":
		*v = new(singleStatusNodesDeployment)
		return json.Unmarshal(b, *v)
	case "DeploymentEnvironmentChangedEvent":
		*v = new(singleStatusNodesDeploymentEnvironmentChangedEvent)
		return json.Unmarshal(b, *v)
	case "DeploymentReview":
		*v = new(singleStatusNodesDeploymentReview)
		return json.Unmarshal(b, *v)
	case "DeploymentStatus":
		*v = new(singleStatusNodesDeploymentStatus)
		return json.Unmarshal(b, *v)
	case "DisconnectedEvent":
		*v = new(singleStatusNodesDisconnectedEvent)
		return json.Unmarshal(b, *v)
	case "Discussion":
		*v = new(singleStatusNodesDiscussion)
		return json.Unmarshal(b, *v)
	case "DiscussionCategory":
		*v = new(singleStatusNodesDiscussionCategory)
		return json.Unmarshal(b, *v)
	case "DiscussionComment":
		*v = new(singleStatusNodesDiscussionComment)
		return json.Unmarshal(b, *v)
	case "DiscussionPoll":
		*v = new(singleStatusNodesDiscussionPoll)
		return json.Unmarshal(b, *v)
	case "DiscussionPollOption":
		*v = new(singleStatusNodesDiscussionPollOption)
		return json.Unmarshal(b, *v)
	case "DraftIssue":
		*v = new(singleStatusNodesDraftIssue)
		return json.Unmarshal(b, *v)
	case "Enterprise":
		*v = new(singleStatusNodesEnterprise)
		return json.Unmarshal(b, *v)
	case "EnterpriseAdministratorInvitation":
		*v = new(singleStatusNodesEnterpriseAdministratorInvitation)
		return json.Unmarshal(b, *v)
	case "EnterpriseIdentityProvider":
		*v = new(singleStatusNodesEnterpriseIdentityProvider)
		return json.Unmarshal(b, *v)
	case "EnterpriseRepositoryInfo":
		*v = new(singleStatusNodesEnterpriseRepositoryInfo)
		return json.Unmarshal(b, *v)
	case "EnterpriseServerInstallation":
		*v = new(singleStatusNodesEnterpriseServerInstallation)
		return json.Unmarshal(b, *v)
	case "EnterpriseServerUserAccount":
		*v = new(singleStatusNodesEnterpriseServerUserAccount)
		return json.Unmarshal(b, *v)
	case "EnterpriseServerUserAccountEmail":
		*v = new(singleStatusNodesEnterpriseServerUserAccountEmail)
		return json.Unmarshal(b, *v)
	case "EnterpriseServerUserAccountsUpload":
		*v = new(singleStatusNodesEnterpriseServerUserAccountsUpload)
		return json.Unmarshal(b, *v)
	case "EnterpriseUserAccount":
		*v = new(singleStatusNodesEnterpriseUserAccount)
		return json.Unmarshal(b, *v)
	case "Environment":
		*v = new(singleStatusNodesEnvironment)
		return json.Unmarshal(b, *v)
	case "ExternalIdentity":
		*v = new(singleStatusNodesExternalIdentity)
		return json.Unmarshal(b, *v)
	case "Gist":
		*v = new(singleStatusNodesGist)
		return json.Unmarshal(b, *v)
	case "GistComment":
		*v = new(singleStatusNodesGistComment)
		return json.Unmarshal(b, *v)
	case "HeadRefDeletedEvent":
		*v = new(singleStatusNodesHeadRefDeletedEvent)
		return json.Unmarshal(b, *v)
	case "HeadRefForcePushedEvent":
		*v = new(singleStatusNodesHeadRefForcePushedEvent)
		return json.Unmarshal(b, *v)
	case "HeadRefRestoredEvent":
		*v = new(singleStatusNodesHeadRefRestoredEvent)
		return json.Unmarshal(b, *v)
	case "IpAllowListEntry":
		*v = new(singleStatusNodesIpAllowListEntry)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(singleStatusNodesIssue)
		return json.Unmarshal(b, *v)
	case "IssueComment":
		*v = new(singleStatusNodesIssueComment)
		return json.Unmarshal(b, *v)
	case "Label":
		*v = new(singleStatusNodesLabel)
		return json.Unmarshal(b, *v)
	case "LabeledEvent":
		*v = new(singleStatusNodesLabeledEvent)
		return json.Unmarshal(b, *v)
	case "Language":
		*v = new(singleStatusNodesLanguage)
		return json.Unmarshal(b, *v)
	case "License":
		*v = new(singleStatusNodesLicense)
		return json.Unmarshal(b, *v)
	case "LinkedBranch":
		*v = new(singleStatusNodesLinkedBranch)
		return json.Unmarshal(b, *v)
	case "LockedEvent":
		*v = new(singleStatusNodesLockedEvent)
		return json.Unmarshal(b, *v)
	case "Mannequin":
		*v = new(singleStatusNodesMannequin)
		return json.Unmarshal(b, *v)
	case "MarkedAsDuplicateEvent":
		*v = new(singleStatusNodesMarkedAsDuplicateEvent)
		return json.Unmarshal(b, *v)
	case "MarketplaceCategory":
		*v = new(singleStatusNodesMarketplaceCategory)
		return json.Unmarshal(b, *v)
	case "MarketplaceListing":
		*v = new(singleStatusNodesMarketplaceListing)
		return json.Unmarshal(b, *v)
	case "MembersCanDeleteReposClearAuditEntry":
		*v = new(singleStatusNodesMembersCanDeleteReposClearAuditEntry)
		return json.Unmarshal(b, *v)
	case "MembersCanDeleteReposDisableAuditEntry":
		*v = new(singleStatusNodesMembersCanDeleteReposDisableAuditEntry)
		return json.Unmarshal(b, *v)
	case "MembersCanDeleteReposEnableAuditEntry":
		*v = new(singleStatusNodesMembersCanDeleteReposEnableAuditEntry)
		return json.Unmarshal(b, *v)
	case "MentionedEvent":
		*v = new(singleStatusNodesMentionedEvent)
		return json.Unmarshal(b, *v)
	case "MergedEvent":
		*v = new(singleStatusNodesMergedEvent)
		return json.Unmarshal(b, *v)
	case "MigrationSource":
		*v = new(singleStatusNodesMigrationSource)
		return json.Unmarshal(b, *v)
	case "Milestone":
		*v = new(singleStatusNodesMilestone)
		return json.Unmarshal(b, *v)
	case "MilestonedEvent":
		*v = new(singleStatusNodesMilestonedEvent)
		return json.Unmarshal(b, *v)
	case "MovedColumnsInProjectEvent":
		*v = new(singleStatusNodesMovedColumnsInProjectEvent)
		return json.Unmarshal(b, *v)
	case "OIDCProvider":
		*v = new(singleStatusNodesOIDCProvider)
		return json.Unmarshal(b, *v)
	case "OauthApplicationCreateAuditEntry":
		*v = new(singleStatusNodesOauthApplicationCreateAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgAddBillingManagerAuditEntry":
		*v = new(singleStatusNodesOrgAddBillingManagerAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgAddMemberAuditEntry":
		*v = new(singleStatusNodesOrgAddMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgBlockUserAuditEntry":
		*v = new(singleStatusNodesOrgBlockUserAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgConfigDisableCollaboratorsOnlyAuditEntry":
		*v = new(singleStatusNodesOrgConfigDisableCollaboratorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgConfigEnableCollaboratorsOnlyAuditEntry":
		*v = new(singleStatusNodesOrgConfigEnableCollaboratorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgCreateAuditEntry":
		*v = new(singleStatusNodesOrgCreateAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgDisableOauthAppRestrictionsAuditEntry":
		*v = new(singleStatusNodesOrgDisableOauthAppRestrictionsAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgDisableSamlAuditEntry":
		*v = new(singleStatusNodesOrgDisableSamlAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgDisableTwoFactorRequirementAuditEntry":
		*v = new(singleStatusNodesOrgDisableTwoFactorRequirementAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgEnableOauthAppRestrictionsAuditEntry":
		*v = new(singleStatusNodesOrgEnableOauthAppRestrictionsAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgEnableSamlAuditEntry":
		*v = new(singleStatusNodesOrgEnableSamlAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgEnableTwoFactorRequirementAuditEntry":
		*v = new(singleStatusNodesOrgEnableTwoFactorRequirementAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgInviteMemberAuditEntry":
		*v = new(singleStatusNodesOrgInviteMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgInviteToBusinessAuditEntry":
		*v = new(singleStatusNodesOrgInviteToBusinessAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgOauthAppAccessApprovedAuditEntry":
		*v = new(singleStatusNodesOrgOauthAppAccessApprovedAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgOauthAppAccessDeniedAuditEntry":
		*v = new(singleStatusNodesOrgOauthAppAccessDeniedAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgOauthAppAccessRequestedAuditEntry":
		*v = new(singleStatusNodesOrgOauthAppAccessRequestedAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgRemoveBillingManagerAuditEntry":
		*v = new(singleStatusNodesOrgRemoveBillingManagerAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgRemoveMemberAuditEntry":
		*v = new(singleStatusNodesOrgRemoveMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgRemoveOutsideCollaboratorAuditEntry":
		*v = new(singleStatusNodesOrgRemoveOutsideCollaboratorAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgRestoreMemberAuditEntry":
		*v = new(singleStatusNodesOrgRestoreMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgUnblockUserAuditEntry":
		*v = new(singleStatusNodesOrgUnblockUserAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgUpdateDefaultRepositoryPermissionAuditEntry":
		*v = new(singleStatusNodesOrgUpdateDefaultRepositoryPermissionAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgUpdateMemberAuditEntry":
		*v = new(singleStatusNodesOrgUpdateMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgUpdateMemberRepositoryCreationPermissionAuditEntry":
		*v = new(singleStatusNodesOrgUpdateMemberRepositoryCreationPermissionAuditEntry)
		return json.Unmarshal(b, *v)
	case "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry":
		*v = new(singleStatusNodesOrgUpdateMemberRepositoryInvitationPermissionAuditEntry)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(singleStatusNodesOrganization)
		return json.Unmarshal(b, *v)
	case "OrganizationIdentityProvider":
		*v = new(singleStatusNodesOrganizationIdentityProvider)
		return json.Unmarshal(b, *v)
	case "OrganizationInvitation":
		*v = new(singleStatusNodesOrganizationInvitation)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(singleStatusNodesPackage)
		return json.Unmarshal(b, *v)
	case "PackageFile":
		*v = new(singleStatusNodesPackageFile)
		return json.Unmarshal(b, *v)
	case "PackageTag":
		*v = new(singleStatusNodesPackageTag)
		return json.Unmarshal(b, *v)
	case "PackageVersion":
		*v = new(singleStatusNodesPackageVersion)
		return json.Unmarshal(b, *v)
	case "PinnedDiscussion":
		*v = new(singleStatusNodesPinnedDiscussion)
		return json.Unmarshal(b, *v)
	case "PinnedEvent":
		*v = new(singleStatusNodesPinnedEvent)
		return json.Unmarshal(b, *v)
	case "PinnedIssue":
		*v = new(singleStatusNodesPinnedIssue)
		return json.Unmarshal(b, *v)
	case "PrivateRepositoryForkingDisableAuditEntry":
		*v = new(singleStatusNodesPrivateRepositoryForkingDisableAuditEntry)
		return json.Unmarshal(b, *v)
	case "PrivateRepositoryForkingEnableAuditEntry":
		*v = new(singleStatusNodesPrivateRepositoryForkingEnableAuditEntry)
		return json.Unmarshal(b, *v)
	case "Project":
		*v = new(singleStatusNodesProject)
		return json.Unmarshal(b, *v)
	case "ProjectCard":
		*v = new(singleStatusNodesProjectCard)
		return json.Unmarshal(b, *v)
	case "ProjectColumn":
		*v = new(singleStatusNodesProjectColumn)
		return json.Unmarshal(b, *v)
	case "ProjectNext":
		*v = new(singleStatusNodesProjectNext)
		return json.Unmarshal(b, *v)
	case "ProjectNextField":
		*v = new(singleStatusNodesProjectNextField)
		return json.Unmarshal(b, *v)
	case "ProjectNextItem":
		*v = new(singleStatusNodesProjectNextItem)
		return json.Unmarshal(b, *v)
	case "ProjectNextItemFieldValue":
		*v = new(singleStatusNodesProjectNextItemFieldValue)
		return json.Unmarshal(b, *v)
	case "ProjectNextIterationField":
		*v = new(singleStatusNodesProjectNextIterationField)
		return json.Unmarshal(b, *v)
	case "ProjectNextSingleSelectField":
		*v = new(singleStatusNodesProjectNextSingleSelectField)
		return json.Unmarshal(b, *v)
	case "ProjectV2":
		*v = new(singleStatusNodesProjectV2)
		return json.Unmarshal(b, *v)
	case "ProjectV2Field":
		*v = new(singleStatusNodesProjectV2Field)
		return json.Unmarshal(b, *v)
	case "ProjectV2Item":
		*v = new(singleStatusNodesProjectV2Item)
		return json.Unmarshal(b, *v)
	case "ProjectV2ItemFieldDateValue":
		*v = new(singleStatusNodesProjectV2ItemFieldDateValue)
		return json.Unmarshal(b, *v)
	case "ProjectV2ItemFieldIterationValue":
		*v = new(singleStatusNodesProjectV2ItemFieldIterationValue)
		return json.Unmarshal(b, *v)
	case "ProjectV2ItemFieldNumberValue":
		*v = new(singleStatusNodesProjectV2ItemFieldNumberValue)
		return json.Unmarshal(b, *v)
	case "ProjectV2ItemFieldSingleSelectValue":
		*v = new(singleStatusNodesProjectV2ItemFieldSingleSelectValue)
		return json.Unmarshal(b, *v)
	case "ProjectV2ItemFieldTextValue":
		*v = new(singleStatusNodesProjectV2ItemFieldTextValue)
		return json.Unmarshal(b, *v)
	case "ProjectV2IterationField":
		*v = new(singleStatusNodesProjectV2IterationField)
		return json.Unmarshal(b, *v)
	case "ProjectV2SingleSelectField":
		*v = new(singleStatusNodesProjectV2SingleSelectField)
		return json.Unmarshal(b, *v)
	case "ProjectV2View":
		*v = new(singleStatusNodesProjectV2View)
		return json.Unmarshal(b, *v)
	case "ProjectView":
		*v = new(singleStatusNodesProjectView)
		return json.Unmarshal(b, *v)
	case "PublicKey":
		*v = new(singleStatusNodesPublicKey)
		return json.Unmarshal(b, *v)
	case "PullRequest":
		*v = new(singleStatusNodesPullRequest)
		return json.Unmarshal(b, *v)
	case "PullRequestCommit":
		*v = new(singleStatusNodesPullRequestCommit)
		return json.Unmarshal(b, *v)
	case "PullRequestCommitCommentThread":
		*v = new(singleStatusNodesPullRequestCommitCommentThread)
		return json.Unmarshal(b, *v)
	case "PullRequestReview":
		*v = new(singleStatusNodesPullRequestReview)
		return json.Unmarshal(b, *v)
	case "PullRequestReviewComment":
		*v = new(singleStatusNodesPullRequestReviewComment)
		return json.Unmarshal(b, *v)
	case "PullRequestReviewThread":
		*v = new(singleStatusNodesPullRequestReviewThread)
		return json.Unmarshal(b, *v)
	case "PullRequestThread":
		*v = new(singleStatusNodesPullRequestThread)
		return json.Unmarshal(b, *v)
	case "Push":
		*v = new(singleStatusNodesPush)
		return json.Unmarshal(b, *v)
	case "PushAllowance":
		*v = new(singleStatusNodesPushAllowance)
		return json.Unmarshal(b, *v)
	case "Reaction":
		*v = new(singleStatusNodesReaction)
		return json.Unmarshal(b, *v)
	case "ReadyForReviewEvent":
		*v = new(singleStatusNodesReadyForReviewEvent)
		return json.Unmarshal(b, *v)
	case "Ref":
		*v = new(singleStatusNodesRef)
		return json.Unmarshal(b, *v)
	case "ReferencedEvent":
		*v = new(singleStatusNodesReferencedEvent)
		return json.Unmarshal(b, *v)
	case "Release":
		*v = new(singleStatusNodesRelease)
		return json.Unmarshal(b, *v)
	case "ReleaseAsset":
		*v = new(singleStatusNodesReleaseAsset)
		return json.Unmarshal(b, *v)
	case "RemovedFromProjectEvent":
		*v = new(singleStatusNodesRemovedFromProjectEvent)
		return json.Unmarshal(b, *v)
	case "RenamedTitleEvent":
		*v = new(singleStatusNodesRenamedTitleEvent)
		return json.Unmarshal(b, *v)
	case "ReopenedEvent":
		*v = new(singleStatusNodesReopenedEvent)
		return json.Unmarshal(b, *v)
	case "RepoAccessAuditEntry":
		*v = new(singleStatusNodesRepoAccessAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoAddMemberAuditEntry":
		*v = new(singleStatusNodesRepoAddMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoAddTopicAuditEntry":
		*v = new(singleStatusNodesRepoAddTopicAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoArchivedAuditEntry":
		*v = new(singleStatusNodesRepoArchivedAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoChangeMergeSettingAuditEntry":
		*v = new(singleStatusNodesRepoChangeMergeSettingAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigDisableAnonymousGitAccessAuditEntry":
		*v = new(singleStatusNodesRepoConfigDisableAnonymousGitAccessAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigDisableCollaboratorsOnlyAuditEntry":
		*v = new(singleStatusNodesRepoConfigDisableCollaboratorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigDisableContributorsOnlyAuditEntry":
		*v = new(singleStatusNodesRepoConfigDisableContributorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigDisableSockpuppetDisallowedAuditEntry":
		*v = new(singleStatusNodesRepoConfigDisableSockpuppetDisallowedAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigEnableAnonymousGitAccessAuditEntry":
		*v = new(singleStatusNodesRepoConfigEnableAnonymousGitAccessAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigEnableCollaboratorsOnlyAuditEntry":
		*v = new(singleStatusNodesRepoConfigEnableCollaboratorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigEnableContributorsOnlyAuditEntry":
		*v = new(singleStatusNodesRepoConfigEnableContributorsOnlyAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigEnableSockpuppetDisallowedAuditEntry":
		*v = new(singleStatusNodesRepoConfigEnableSockpuppetDisallowedAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigLockAnonymousGitAccessAuditEntry":
		*v = new(singleStatusNodesRepoConfigLockAnonymousGitAccessAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoConfigUnlockAnonymousGitAccessAuditEntry":
		*v = new(singleStatusNodesRepoConfigUnlockAnonymousGitAccessAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoCreateAuditEntry":
		*v = new(singleStatusNodesRepoCreateAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoDestroyAuditEntry":
		*v = new(singleStatusNodesRepoDestroyAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoRemoveMemberAuditEntry":
		*v = new(singleStatusNodesRepoRemoveMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepoRemoveTopicAuditEntry":
		*v = new(singleStatusNodesRepoRemoveTopicAuditEntry)
		return json.Unmarshal(b, *v)
	case "Repository":
		*v = new(singleStatusNodesRepository)
		return json.Unmarshal(b, *v)
	case "RepositoryInvitation":
		*v = new(singleStatusNodesRepositoryInvitation)
		return json.Unmarshal(b, *v)
	case "RepositoryMigration":
		*v = new(singleStatusNodesRepositoryMigration)
		return json.Unmarshal(b, *v)
	case "RepositoryTopic":
		*v = new(singleStatusNodesRepositoryTopic)
		return json.Unmarshal(b, *v)
	case "RepositoryVisibilityChangeDisableAuditEntry":
		*v = new(singleStatusNodesRepositoryVisibilityChangeDisableAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepositoryVisibilityChangeEnableAuditEntry":
		*v = new(singleStatusNodesRepositoryVisibilityChangeEnableAuditEntry)
		return json.Unmarshal(b, *v)
	case "RepositoryVulnerabilityAlert":
		*v = new(singleStatusNodesRepositoryVulnerabilityAlert)
		return json.Unmarshal(b, *v)
	case "ReviewDismissalAllowance":
		*v = new(singleStatusNodesReviewDismissalAllowance)
		return json.Unmarshal(b, *v)
	case "ReviewDismissedEvent":
		*v = new(singleStatusNodesReviewDismissedEvent)
		return json.Unmarshal(b, *v)
	case "ReviewRequest":
		*v = new(singleStatusNodesReviewRequest)
		return json.Unmarshal(b, *v)
	case "ReviewRequestRemovedEvent":
		*v = new(singleStatusNodesReviewRequestRemovedEvent)
		return json.Unmarshal(b, *v)
	case "ReviewRequestedEvent":
		*v = new(singleStatusNodesReviewRequestedEvent)
		return json.Unmarshal(b, *v)
	case "SavedReply":
		*v = new(singleStatusNodesSavedReply)
		return json.Unmarshal(b, *v)
	case "SecurityAdvisory":
		*v = new(singleStatusNodesSecurityAdvisory)
		return json.Unmarshal(b, *v)
	case "SponsorsActivity":
		*v = new(singleStatusNodesSponsorsActivity)
		return json.Unmarshal(b, *v)
	case "SponsorsListing":
		*v = new(singleStatusNodesSponsorsListing)
		return json.Unmarshal(b, *v)
	case "SponsorsListingFeaturedItem":
		*v = new(singleStatusNodesSponsorsListingFeaturedItem)
		return json.Unmarshal(b, *v)
	case "SponsorsTier":
		*v = new(singleStatusNodesSponsorsTier)
		return json.Unmarshal(b, *v)
	case "Sponsorship":
		*v = new(singleStatusNodesSponsorship)
		return json.Unmarshal(b, *v)
	case "SponsorshipNewsletter":
		*v = new(singleStatusNodesSponsorshipNewsletter)
		return json.Unmarshal(b, *v)
	case "Status":
		*v = new(singleStatusNodesStatus)
		return json.Unmarshal(b, *v)
	case "StatusCheckRollup":
		*v = new(singleStatusNodesStatusCheckRollup)
		return json.Unmarshal(b, *v)
	case "StatusContext":
		*v = new(singleStatusNodesStatusContext)
		return json.Unmarshal(b, *v)
	case "SubscribedEvent":
		*v = new(singleStatusNodesSubscribedEvent)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(singleStatusNodesTag)
		return json.Unmarshal(b, *v)
	case "Team":
		*v = new(singleStatusNodesTeam)
		return json.Unmarshal(b, *v)
	case "TeamAddMemberAuditEntry":
		*v = new(singleStatusNodesTeamAddMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "TeamAddRepositoryAuditEntry":
		*v = new(singleStatusNodesTeamAddRepositoryAuditEntry)
		return json.Unmarshal(b, *v)
	case "TeamChangeParentTeamAuditEntry":
		*v = new(singleStatusNodesTeamChangeParentTeamAuditEntry)
		return json.Unmarshal(b, *v)
	case "TeamDiscussion":
		*v = new(singleStatusNodesTeamDiscussion)
		return json.Unmarshal(b, *v)
	case "TeamDiscussionComment":
		*v = new(singleStatusNodesTeamDiscussionComment)
		return json.Unmarshal(b, *v)
	case "TeamRemoveMemberAuditEntry":
		*v = new(singleStatusNodesTeamRemoveMemberAuditEntry)
		return json.Unmarshal(b, *v)
	case "TeamRemoveRepositoryAuditEntry":
		*v = new(singleStatusNodesTeamRemoveRepositoryAuditEntry)
		return json.Unmarshal(b, *v)
	case "Topic":
		*v = new(singleStatusNodesTopic)
		return json.Unmarshal(b, *v)
	case "TransferredEvent":
		*v = new(singleStatusNodesTransferredEvent)
		return json.Unmarshal(b, *v)
	case "Tree":
		*v = new(singleStatusNodesTree)
		return json.Unmarshal(b, *v)
	case "UnassignedEvent":
		*v = new(singleStatusNodesUnassignedEvent)
		return json.Unmarshal(b, *v)
	case "UnlabeledEvent":
		*v = new(singleStatusNodesUnlabeledEvent)
		return json.Unmarshal(b, *v)
	case "UnlockedEvent":
		*v = new(singleStatusNodesUnlockedEvent)
		return json.Unmarshal(b, *v)
	case "UnmarkedAsDuplicateEvent":
		*v = new(singleStatusNodesUnmarkedAsDuplicateEvent)
		return json.Unmarshal(b, *v)
	case "UnpinnedEvent":
		*v = new(singleStatusNodesUnpinnedEvent)
		return json.Unmarshal(b, *v)
	case "UnsubscribedEvent":
		*v = new(singleStatusNodesUnsubscribedEvent)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(singleStatusNodesUser)
		return json.Unmarshal(b, *v)
	case "UserBlockedEvent":
		*v = new(singleStatusNodesUserBlockedEvent)
		return json.Unmarshal(b, *v)
	case "UserContentEdit":
		*v = new(singleStatusNodesUserContentEdit)
		return json.Unmarshal(b, *v)
	case "UserStatus":
		*v = new(singleStatusNodesUserStatus)
		return json.Unmarshal(b, *v)
	case "VerifiableDomain":
		*v = new(singleStatusNodesVerifiableDomain)
		return json.Unmarshal(b, *v)
	case "Workflow":
		*v = new(singleStatusNodesWorkflow)
		return json.Unmarshal(b, *v)
	case "WorkflowRun":
		*v = new(singleStatusNodesWorkflowRun)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for singleStatusNodesNode: "%v"`, tn.TypeName)
	}
}

func __marshalsingleStatusNodesNode(v *singleStatusNodesNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *singleStatusNodesAddedToProjectEvent:
		typename = "AddedToProjectEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesAddedToProjectEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesApp:
		typename = "App"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesApp
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesAssignedEvent:
		typename = "AssignedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesAssignedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesAutoMergeDisabledEvent:
		typename = "AutoMergeDisabledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesAutoMergeDisabledEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesAutoMergeEnabledEvent:
		typename = "AutoMergeEnabledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesAutoMergeEnabledEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesAutoRebaseEnabledEvent:
		typename = "AutoRebaseEnabledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesAutoRebaseEnabledEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesAutoSquashEnabledEvent:
		typename = "AutoSquashEnabledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesAutoSquashEnabledEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesAutomaticBaseChangeFailedEvent:
		typename = "AutomaticBaseChangeFailedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesAutomaticBaseChangeFailedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesAutomaticBaseChangeSucceededEvent:
		typename = "AutomaticBaseChangeSucceededEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesAutomaticBaseChangeSucceededEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesBaseRefChangedEvent:
		typename = "BaseRefChangedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesBaseRefChangedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesBaseRefDeletedEvent:
		typename = "BaseRefDeletedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesBaseRefDeletedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesBaseRefForcePushedEvent:
		typename = "BaseRefForcePushedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesBaseRefForcePushedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesBlob:
		typename = "Blob"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesBlob
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesBot:
		typename = "Bot"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesBot
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesBranchProtectionRule:
		typename = "BranchProtectionRule"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesBranchProtectionRule
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesBypassForcePushAllowance:
		typename = "BypassForcePushAllowance"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesBypassForcePushAllowance
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesBypassPullRequestAllowance:
		typename = "BypassPullRequestAllowance"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesBypassPullRequestAllowance
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesCWE:
		typename = "CWE"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesCWE
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesCheckRun:
		typename = "CheckRun"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesCheckRun
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesCheckSuite:
		typename = "CheckSuite"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesCheckSuite
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesClosedEvent:
		typename = "ClosedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesClosedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesCodeOfConduct:
		typename = "CodeOfConduct"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesCodeOfConduct
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesCommentDeletedEvent:
		typename = "CommentDeletedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesCommentDeletedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesCommit:
		typename = "Commit"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesCommit
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesCommitComment:
		typename = "CommitComment"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesCommitComment
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesCommitCommentThread:
		typename = "CommitCommentThread"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesCommitCommentThread
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesComparison:
		typename = "Comparison"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesComparison
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesConnectedEvent:
		typename = "ConnectedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesConnectedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesConvertToDraftEvent:
		typename = "ConvertToDraftEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesConvertToDraftEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesConvertedNoteToIssueEvent:
		typename = "ConvertedNoteToIssueEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesConvertedNoteToIssueEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesConvertedToDiscussionEvent:
		typename = "ConvertedToDiscussionEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesConvertedToDiscussionEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesCrossReferencedEvent:
		typename = "CrossReferencedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesCrossReferencedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDemilestonedEvent:
		typename = "DemilestonedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDemilestonedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDeployKey:
		typename = "DeployKey"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDeployKey
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDeployedEvent:
		typename = "DeployedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDeployedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDeployment:
		typename = "Deployment"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDeployment
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDeploymentEnvironmentChangedEvent:
		typename = "DeploymentEnvironmentChangedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDeploymentEnvironmentChangedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDeploymentReview:
		typename = "DeploymentReview"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDeploymentReview
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDeploymentStatus:
		typename = "DeploymentStatus"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDeploymentStatus
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDisconnectedEvent:
		typename = "DisconnectedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDisconnectedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDiscussion:
		typename = "Discussion"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDiscussionCategory:
		typename = "DiscussionCategory"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDiscussionCategory
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDiscussionComment:
		typename = "DiscussionComment"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDiscussionComment
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDiscussionPoll:
		typename = "DiscussionPoll"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDiscussionPoll
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDiscussionPollOption:
		typename = "DiscussionPollOption"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDiscussionPollOption
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesDraftIssue:
		typename = "DraftIssue"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesDraftIssue
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesEnterprise:
		typename = "Enterprise"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesEnterprise
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesEnterpriseAdministratorInvitation:
		typename = "EnterpriseAdministratorInvitation"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesEnterpriseAdministratorInvitation
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesEnterpriseIdentityProvider:
		typename = "EnterpriseIdentityProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesEnterpriseIdentityProvider
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesEnterpriseRepositoryInfo:
		typename = "EnterpriseRepositoryInfo"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesEnterpriseRepositoryInfo
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesEnterpriseServerInstallation:
		typename = "EnterpriseServerInstallation"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesEnterpriseServerInstallation
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesEnterpriseServerUserAccount:
		typename = "EnterpriseServerUserAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesEnterpriseServerUserAccount
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesEnterpriseServerUserAccountEmail:
		typename = "EnterpriseServerUserAccountEmail"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesEnterpriseServerUserAccountEmail
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesEnterpriseServerUserAccountsUpload:
		typename = "EnterpriseServerUserAccountsUpload"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesEnterpriseServerUserAccountsUpload
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesEnterpriseUserAccount:
		typename = "EnterpriseUserAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesEnterpriseUserAccount
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesEnvironment:
		typename = "Environment"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesEnvironment
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesExternalIdentity:
		typename = "ExternalIdentity"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesExternalIdentity
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesGist:
		typename = "Gist"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesGist
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesGistComment:
		typename = "GistComment"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesGistComment
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesHeadRefDeletedEvent:
		typename = "HeadRefDeletedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesHeadRefDeletedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesHeadRefForcePushedEvent:
		typename = "HeadRefForcePushedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesHeadRefForcePushedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesHeadRefRestoredEvent:
		typename = "HeadRefRestoredEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesHeadRefRestoredEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesIpAllowListEntry:
		typename = "IpAllowListEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesIpAllowListEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesIssue
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesIssueComment:
		typename = "IssueComment"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesIssueComment
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesLabel:
		typename = "Label"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesLabel
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesLabeledEvent:
		typename = "LabeledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesLabeledEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesLanguage:
		typename = "Language"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesLanguage
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesLicense:
		typename = "License"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesLicense
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesLinkedBranch:
		typename = "LinkedBranch"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesLinkedBranch
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesLockedEvent:
		typename = "LockedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesLockedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMannequin:
		typename = "Mannequin"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMannequin
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMarkedAsDuplicateEvent:
		typename = "MarkedAsDuplicateEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMarkedAsDuplicateEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMarketplaceCategory:
		typename = "MarketplaceCategory"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMarketplaceCategory
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMarketplaceListing:
		typename = "MarketplaceListing"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMarketplaceListing
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMembersCanDeleteReposClearAuditEntry:
		typename = "MembersCanDeleteReposClearAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMembersCanDeleteReposClearAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMembersCanDeleteReposDisableAuditEntry:
		typename = "MembersCanDeleteReposDisableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMembersCanDeleteReposDisableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMembersCanDeleteReposEnableAuditEntry:
		typename = "MembersCanDeleteReposEnableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMembersCanDeleteReposEnableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMentionedEvent:
		typename = "MentionedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMentionedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMergedEvent:
		typename = "MergedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMergedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMigrationSource:
		typename = "MigrationSource"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMigrationSource
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMilestone:
		typename = "Milestone"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMilestone
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMilestonedEvent:
		typename = "MilestonedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMilestonedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesMovedColumnsInProjectEvent:
		typename = "MovedColumnsInProjectEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesMovedColumnsInProjectEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOIDCProvider:
		typename = "OIDCProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOIDCProvider
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOauthApplicationCreateAuditEntry:
		typename = "OauthApplicationCreateAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOauthApplicationCreateAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgAddBillingManagerAuditEntry:
		typename = "OrgAddBillingManagerAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgAddBillingManagerAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgAddMemberAuditEntry:
		typename = "OrgAddMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgAddMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgBlockUserAuditEntry:
		typename = "OrgBlockUserAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgBlockUserAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgConfigDisableCollaboratorsOnlyAuditEntry:
		typename = "OrgConfigDisableCollaboratorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgConfigDisableCollaboratorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgConfigEnableCollaboratorsOnlyAuditEntry:
		typename = "OrgConfigEnableCollaboratorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgConfigEnableCollaboratorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgCreateAuditEntry:
		typename = "OrgCreateAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgCreateAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgDisableOauthAppRestrictionsAuditEntry:
		typename = "OrgDisableOauthAppRestrictionsAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgDisableOauthAppRestrictionsAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgDisableSamlAuditEntry:
		typename = "OrgDisableSamlAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgDisableSamlAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgDisableTwoFactorRequirementAuditEntry:
		typename = "OrgDisableTwoFactorRequirementAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgDisableTwoFactorRequirementAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgEnableOauthAppRestrictionsAuditEntry:
		typename = "OrgEnableOauthAppRestrictionsAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgEnableOauthAppRestrictionsAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgEnableSamlAuditEntry:
		typename = "OrgEnableSamlAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgEnableSamlAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgEnableTwoFactorRequirementAuditEntry:
		typename = "OrgEnableTwoFactorRequirementAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgEnableTwoFactorRequirementAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgInviteMemberAuditEntry:
		typename = "OrgInviteMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgInviteMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgInviteToBusinessAuditEntry:
		typename = "OrgInviteToBusinessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgInviteToBusinessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgOauthAppAccessApprovedAuditEntry:
		typename = "OrgOauthAppAccessApprovedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgOauthAppAccessApprovedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgOauthAppAccessDeniedAuditEntry:
		typename = "OrgOauthAppAccessDeniedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgOauthAppAccessDeniedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgOauthAppAccessRequestedAuditEntry:
		typename = "OrgOauthAppAccessRequestedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgOauthAppAccessRequestedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgRemoveBillingManagerAuditEntry:
		typename = "OrgRemoveBillingManagerAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgRemoveBillingManagerAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgRemoveMemberAuditEntry:
		typename = "OrgRemoveMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgRemoveMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgRemoveOutsideCollaboratorAuditEntry:
		typename = "OrgRemoveOutsideCollaboratorAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgRemoveOutsideCollaboratorAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgRestoreMemberAuditEntry:
		typename = "OrgRestoreMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgRestoreMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgUnblockUserAuditEntry:
		typename = "OrgUnblockUserAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgUnblockUserAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgUpdateDefaultRepositoryPermissionAuditEntry:
		typename = "OrgUpdateDefaultRepositoryPermissionAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgUpdateDefaultRepositoryPermissionAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgUpdateMemberAuditEntry:
		typename = "OrgUpdateMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgUpdateMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgUpdateMemberRepositoryCreationPermissionAuditEntry:
		typename = "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgUpdateMemberRepositoryCreationPermissionAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrgUpdateMemberRepositoryInvitationPermissionAuditEntry:
		typename = "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrganization
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrganizationIdentityProvider:
		typename = "OrganizationIdentityProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrganizationIdentityProvider
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesOrganizationInvitation:
		typename = "OrganizationInvitation"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesOrganizationInvitation
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPackage:
		typename = "Package"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPackage
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPackageFile:
		typename = "PackageFile"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPackageFile
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPackageTag:
		typename = "PackageTag"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPackageTag
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPackageVersion:
		typename = "PackageVersion"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPackageVersion
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPinnedDiscussion:
		typename = "PinnedDiscussion"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPinnedDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPinnedEvent:
		typename = "PinnedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPinnedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPinnedIssue:
		typename = "PinnedIssue"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPinnedIssue
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPrivateRepositoryForkingDisableAuditEntry:
		typename = "PrivateRepositoryForkingDisableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPrivateRepositoryForkingDisableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPrivateRepositoryForkingEnableAuditEntry:
		typename = "PrivateRepositoryForkingEnableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPrivateRepositoryForkingEnableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProject:
		typename = "Project"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProject
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectCard:
		typename = "ProjectCard"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectCard
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectColumn:
		typename = "ProjectColumn"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectColumn
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectNext:
		typename = "ProjectNext"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectNext
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectNextField:
		typename = "ProjectNextField"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectNextField
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectNextItem:
		typename = "ProjectNextItem"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectNextItem
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectNextItemFieldValue:
		typename = "ProjectNextItemFieldValue"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectNextItemFieldValue
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectNextIterationField:
		typename = "ProjectNextIterationField"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectNextIterationField
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectNextSingleSelectField:
		typename = "ProjectNextSingleSelectField"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectNextSingleSelectField
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2:
		typename = "ProjectV2"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2Field:
		typename = "ProjectV2Field"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2Field
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2Item:
		typename = "ProjectV2Item"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2Item
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2ItemFieldDateValue:
		typename = "ProjectV2ItemFieldDateValue"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2ItemFieldDateValue
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2ItemFieldIterationValue:
		typename = "ProjectV2ItemFieldIterationValue"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2ItemFieldIterationValue
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2ItemFieldNumberValue:
		typename = "ProjectV2ItemFieldNumberValue"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2ItemFieldNumberValue
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2ItemFieldSingleSelectValue:
		typename = "ProjectV2ItemFieldSingleSelectValue"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2ItemFieldSingleSelectValue
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2ItemFieldTextValue:
		typename = "ProjectV2ItemFieldTextValue"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2ItemFieldTextValue
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2IterationField:
		typename = "ProjectV2IterationField"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2IterationField
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2SingleSelectField:
		typename = "ProjectV2SingleSelectField"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2SingleSelectField
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectV2View:
		typename = "ProjectV2View"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectV2View
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesProjectView:
		typename = "ProjectView"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesProjectView
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPublicKey:
		typename = "PublicKey"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPublicKey
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPullRequest:
		typename = "PullRequest"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalsingleStatusNodesPullRequest
		}{typename, premarshaled}
		return json.Marshal(result)
	case *singleStatusNodesPullRequestCommit:
		typename = "PullRequestCommit"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPullRequestCommit
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPullRequestCommitCommentThread:
		typename = "PullRequestCommitCommentThread"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPullRequestCommitCommentThread
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPullRequestReview:
		typename = "PullRequestReview"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPullRequestReview
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPullRequestReviewComment:
		typename = "PullRequestReviewComment"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPullRequestReviewComment
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPullRequestReviewThread:
		typename = "PullRequestReviewThread"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPullRequestReviewThread
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPullRequestThread:
		typename = "PullRequestThread"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPullRequestThread
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPush:
		typename = "Push"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPush
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesPushAllowance:
		typename = "PushAllowance"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesPushAllowance
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesReaction:
		typename = "Reaction"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesReaction
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesReadyForReviewEvent:
		typename = "ReadyForReviewEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesReadyForReviewEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRef:
		typename = "Ref"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRef
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesReferencedEvent:
		typename = "ReferencedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesReferencedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRelease:
		typename = "Release"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRelease
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesReleaseAsset:
		typename = "ReleaseAsset"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesReleaseAsset
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRemovedFromProjectEvent:
		typename = "RemovedFromProjectEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRemovedFromProjectEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRenamedTitleEvent:
		typename = "RenamedTitleEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRenamedTitleEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesReopenedEvent:
		typename = "ReopenedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesReopenedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoAccessAuditEntry:
		typename = "RepoAccessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoAccessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoAddMemberAuditEntry:
		typename = "RepoAddMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoAddMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoAddTopicAuditEntry:
		typename = "RepoAddTopicAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoAddTopicAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoArchivedAuditEntry:
		typename = "RepoArchivedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoArchivedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoChangeMergeSettingAuditEntry:
		typename = "RepoChangeMergeSettingAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoChangeMergeSettingAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoConfigDisableAnonymousGitAccessAuditEntry:
		typename = "RepoConfigDisableAnonymousGitAccessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoConfigDisableAnonymousGitAccessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoConfigDisableCollaboratorsOnlyAuditEntry:
		typename = "RepoConfigDisableCollaboratorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoConfigDisableCollaboratorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoConfigDisableContributorsOnlyAuditEntry:
		typename = "RepoConfigDisableContributorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoConfigDisableContributorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoConfigDisableSockpuppetDisallowedAuditEntry:
		typename = "RepoConfigDisableSockpuppetDisallowedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoConfigDisableSockpuppetDisallowedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoConfigEnableAnonymousGitAccessAuditEntry:
		typename = "RepoConfigEnableAnonymousGitAccessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoConfigEnableAnonymousGitAccessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoConfigEnableCollaboratorsOnlyAuditEntry:
		typename = "RepoConfigEnableCollaboratorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoConfigEnableCollaboratorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoConfigEnableContributorsOnlyAuditEntry:
		typename = "RepoConfigEnableContributorsOnlyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoConfigEnableContributorsOnlyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoConfigEnableSockpuppetDisallowedAuditEntry:
		typename = "RepoConfigEnableSockpuppetDisallowedAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoConfigEnableSockpuppetDisallowedAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoConfigLockAnonymousGitAccessAuditEntry:
		typename = "RepoConfigLockAnonymousGitAccessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoConfigLockAnonymousGitAccessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoConfigUnlockAnonymousGitAccessAuditEntry:
		typename = "RepoConfigUnlockAnonymousGitAccessAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoConfigUnlockAnonymousGitAccessAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoCreateAuditEntry:
		typename = "RepoCreateAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoCreateAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoDestroyAuditEntry:
		typename = "RepoDestroyAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoDestroyAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoRemoveMemberAuditEntry:
		typename = "RepoRemoveMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoRemoveMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepoRemoveTopicAuditEntry:
		typename = "RepoRemoveTopicAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepoRemoveTopicAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepository
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepositoryInvitation:
		typename = "RepositoryInvitation"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepositoryInvitation
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepositoryMigration:
		typename = "RepositoryMigration"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepositoryMigration
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepositoryTopic:
		typename = "RepositoryTopic"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepositoryTopic
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepositoryVisibilityChangeDisableAuditEntry:
		typename = "RepositoryVisibilityChangeDisableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepositoryVisibilityChangeDisableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepositoryVisibilityChangeEnableAuditEntry:
		typename = "RepositoryVisibilityChangeEnableAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepositoryVisibilityChangeEnableAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesRepositoryVulnerabilityAlert:
		typename = "RepositoryVulnerabilityAlert"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesRepositoryVulnerabilityAlert
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesReviewDismissalAllowance:
		typename = "ReviewDismissalAllowance"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesReviewDismissalAllowance
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesReviewDismissedEvent:
		typename = "ReviewDismissedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesReviewDismissedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesReviewRequest:
		typename = "ReviewRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesReviewRequest
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesReviewRequestRemovedEvent:
		typename = "ReviewRequestRemovedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesReviewRequestRemovedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesReviewRequestedEvent:
		typename = "ReviewRequestedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesReviewRequestedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesSavedReply:
		typename = "SavedReply"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesSavedReply
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesSecurityAdvisory:
		typename = "SecurityAdvisory"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesSecurityAdvisory
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesSponsorsActivity:
		typename = "SponsorsActivity"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesSponsorsActivity
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesSponsorsListing:
		typename = "SponsorsListing"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesSponsorsListing
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesSponsorsListingFeaturedItem:
		typename = "SponsorsListingFeaturedItem"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesSponsorsListingFeaturedItem
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesSponsorsTier:
		typename = "SponsorsTier"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesSponsorsTier
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesSponsorship:
		typename = "Sponsorship"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesSponsorship
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesSponsorshipNewsletter:
		typename = "SponsorshipNewsletter"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesSponsorshipNewsletter
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesStatus:
		typename = "Status"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesStatus
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesStatusCheckRollup:
		typename = "StatusCheckRollup"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesStatusCheckRollup
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesStatusContext:
		typename = "StatusContext"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesStatusContext
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesSubscribedEvent:
		typename = "SubscribedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesSubscribedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTag
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTeam:
		typename = "Team"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTeam
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTeamAddMemberAuditEntry:
		typename = "TeamAddMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTeamAddMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTeamAddRepositoryAuditEntry:
		typename = "TeamAddRepositoryAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTeamAddRepositoryAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTeamChangeParentTeamAuditEntry:
		typename = "TeamChangeParentTeamAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTeamChangeParentTeamAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTeamDiscussion:
		typename = "TeamDiscussion"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTeamDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTeamDiscussionComment:
		typename = "TeamDiscussionComment"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTeamDiscussionComment
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTeamRemoveMemberAuditEntry:
		typename = "TeamRemoveMemberAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTeamRemoveMemberAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTeamRemoveRepositoryAuditEntry:
		typename = "TeamRemoveRepositoryAuditEntry"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTeamRemoveRepositoryAuditEntry
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTopic:
		typename = "Topic"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTopic
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTransferredEvent:
		typename = "TransferredEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTransferredEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesTree:
		typename = "Tree"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesTree
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesUnassignedEvent:
		typename = "UnassignedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesUnassignedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesUnlabeledEvent:
		typename = "UnlabeledEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesUnlabeledEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesUnlockedEvent:
		typename = "UnlockedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesUnlockedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesUnmarkedAsDuplicateEvent:
		typename = "UnmarkedAsDuplicateEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesUnmarkedAsDuplicateEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesUnpinnedEvent:
		typename = "UnpinnedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesUnpinnedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesUnsubscribedEvent:
		typename = "UnsubscribedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesUnsubscribedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesUser
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesUserBlockedEvent:
		typename = "UserBlockedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesUserBlockedEvent
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesUserContentEdit:
		typename = "UserContentEdit"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesUserContentEdit
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesUserStatus:
		typename = "UserStatus"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesUserStatus
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesVerifiableDomain:
		typename = "VerifiableDomain"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesVerifiableDomain
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesWorkflow:
		typename = "Workflow"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesWorkflow
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusNodesWorkflowRun:
		typename = "WorkflowRun"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusNodesWorkflowRun
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for singleStatusNodesNode: "%T"`, v)
	}
}

// singleStatusNodesOIDCProvider includes the requested fields of the GraphQL type OIDCProvider.
// The GraphQL type's documentation follows.
//
// An OIDC identity provider configured to provision identities for an enterprise.
type singleStatusNodesOIDCProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOIDCProvider.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOIDCProvider) GetTypename() *string { return v.Typename }

// singleStatusNodesOauthApplicationCreateAuditEntry includes the requested fields of the GraphQL type OauthApplicationCreateAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a oauth_application.create event.
type singleStatusNodesOauthApplicationCreateAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOauthApplicationCreateAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOauthApplicationCreateAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgAddBillingManagerAuditEntry includes the requested fields of the GraphQL type OrgAddBillingManagerAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.add_billing_manager
type singleStatusNodesOrgAddBillingManagerAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgAddBillingManagerAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgAddBillingManagerAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgAddMemberAuditEntry includes the requested fields of the GraphQL type OrgAddMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.add_member
type singleStatusNodesOrgAddMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgAddMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgAddMemberAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgBlockUserAuditEntry includes the requested fields of the GraphQL type OrgBlockUserAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.block_user
type singleStatusNodesOrgBlockUserAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgBlockUserAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgBlockUserAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgConfigDisableCollaboratorsOnlyAuditEntry includes the requested fields of the GraphQL type OrgConfigDisableCollaboratorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.config.disable_collaborators_only event.
type singleStatusNodesOrgConfigDisableCollaboratorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgConfigDisableCollaboratorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgConfigDisableCollaboratorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgConfigEnableCollaboratorsOnlyAuditEntry includes the requested fields of the GraphQL type OrgConfigEnableCollaboratorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.config.enable_collaborators_only event.
type singleStatusNodesOrgConfigEnableCollaboratorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgConfigEnableCollaboratorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgConfigEnableCollaboratorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgCreateAuditEntry includes the requested fields of the GraphQL type OrgCreateAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.create event.
type singleStatusNodesOrgCreateAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgCreateAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgCreateAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgDisableOauthAppRestrictionsAuditEntry includes the requested fields of the GraphQL type OrgDisableOauthAppRestrictionsAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.disable_oauth_app_restrictions event.
type singleStatusNodesOrgDisableOauthAppRestrictionsAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgDisableOauthAppRestrictionsAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgDisableOauthAppRestrictionsAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgDisableSamlAuditEntry includes the requested fields of the GraphQL type OrgDisableSamlAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.disable_saml event.
type singleStatusNodesOrgDisableSamlAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgDisableSamlAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgDisableSamlAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgDisableTwoFactorRequirementAuditEntry includes the requested fields of the GraphQL type OrgDisableTwoFactorRequirementAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.disable_two_factor_requirement event.
type singleStatusNodesOrgDisableTwoFactorRequirementAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgDisableTwoFactorRequirementAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgDisableTwoFactorRequirementAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgEnableOauthAppRestrictionsAuditEntry includes the requested fields of the GraphQL type OrgEnableOauthAppRestrictionsAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.enable_oauth_app_restrictions event.
type singleStatusNodesOrgEnableOauthAppRestrictionsAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgEnableOauthAppRestrictionsAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgEnableOauthAppRestrictionsAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgEnableSamlAuditEntry includes the requested fields of the GraphQL type OrgEnableSamlAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.enable_saml event.
type singleStatusNodesOrgEnableSamlAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgEnableSamlAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgEnableSamlAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgEnableTwoFactorRequirementAuditEntry includes the requested fields of the GraphQL type OrgEnableTwoFactorRequirementAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.enable_two_factor_requirement event.
type singleStatusNodesOrgEnableTwoFactorRequirementAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgEnableTwoFactorRequirementAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgEnableTwoFactorRequirementAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgInviteMemberAuditEntry includes the requested fields of the GraphQL type OrgInviteMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.invite_member event.
type singleStatusNodesOrgInviteMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgInviteMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgInviteMemberAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgInviteToBusinessAuditEntry includes the requested fields of the GraphQL type OrgInviteToBusinessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.invite_to_business event.
type singleStatusNodesOrgInviteToBusinessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgInviteToBusinessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgInviteToBusinessAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgOauthAppAccessApprovedAuditEntry includes the requested fields of the GraphQL type OrgOauthAppAccessApprovedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.oauth_app_access_approved event.
type singleStatusNodesOrgOauthAppAccessApprovedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgOauthAppAccessApprovedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgOauthAppAccessApprovedAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgOauthAppAccessDeniedAuditEntry includes the requested fields of the GraphQL type OrgOauthAppAccessDeniedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.oauth_app_access_denied event.
type singleStatusNodesOrgOauthAppAccessDeniedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgOauthAppAccessDeniedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgOauthAppAccessDeniedAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgOauthAppAccessRequestedAuditEntry includes the requested fields of the GraphQL type OrgOauthAppAccessRequestedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.oauth_app_access_requested event.
type singleStatusNodesOrgOauthAppAccessRequestedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgOauthAppAccessRequestedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgOauthAppAccessRequestedAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgRemoveBillingManagerAuditEntry includes the requested fields of the GraphQL type OrgRemoveBillingManagerAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.remove_billing_manager event.
type singleStatusNodesOrgRemoveBillingManagerAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgRemoveBillingManagerAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgRemoveBillingManagerAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgRemoveMemberAuditEntry includes the requested fields of the GraphQL type OrgRemoveMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.remove_member event.
type singleStatusNodesOrgRemoveMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgRemoveMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgRemoveMemberAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgRemoveOutsideCollaboratorAuditEntry includes the requested fields of the GraphQL type OrgRemoveOutsideCollaboratorAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.remove_outside_collaborator event.
type singleStatusNodesOrgRemoveOutsideCollaboratorAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgRemoveOutsideCollaboratorAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgRemoveOutsideCollaboratorAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgRestoreMemberAuditEntry includes the requested fields of the GraphQL type OrgRestoreMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.restore_member event.
type singleStatusNodesOrgRestoreMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgRestoreMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgRestoreMemberAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgUnblockUserAuditEntry includes the requested fields of the GraphQL type OrgUnblockUserAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.unblock_user
type singleStatusNodesOrgUnblockUserAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgUnblockUserAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgUnblockUserAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgUpdateDefaultRepositoryPermissionAuditEntry includes the requested fields of the GraphQL type OrgUpdateDefaultRepositoryPermissionAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.update_default_repository_permission
type singleStatusNodesOrgUpdateDefaultRepositoryPermissionAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgUpdateDefaultRepositoryPermissionAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgUpdateDefaultRepositoryPermissionAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgUpdateMemberAuditEntry includes the requested fields of the GraphQL type OrgUpdateMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.update_member event.
type singleStatusNodesOrgUpdateMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgUpdateMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgUpdateMemberAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesOrgUpdateMemberRepositoryCreationPermissionAuditEntry includes the requested fields of the GraphQL type OrgUpdateMemberRepositoryCreationPermissionAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.update_member_repository_creation_permission event.
type singleStatusNodesOrgUpdateMemberRepositoryCreationPermissionAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgUpdateMemberRepositoryCreationPermissionAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrgUpdateMemberRepositoryInvitationPermissionAuditEntry includes the requested fields of the GraphQL type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a org.update_member_repository_invitation_permission event.
type singleStatusNodesOrgUpdateMemberRepositoryInvitationPermissionAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrgUpdateMemberRepositoryInvitationPermissionAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type singleStatusNodesOrganization struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrganization.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrganization) GetTypename() *string { return v.Typename }

// singleStatusNodesOrganizationIdentityProvider includes the requested fields of the GraphQL type OrganizationIdentityProvider.
// The GraphQL type's documentation follows.
//
// An Identity Provider configured to provision SAML and SCIM identities for Organizations
type singleStatusNodesOrganizationIdentityProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrganizationIdentityProvider.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrganizationIdentityProvider) GetTypename() *string { return v.Typename }

// singleStatusNodesOrganizationInvitation includes the requested fields of the GraphQL type OrganizationInvitation.
// The GraphQL type's documentation follows.
//
// An Invitation for a user to an organization.
type singleStatusNodesOrganizationInvitation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesOrganizationInvitation.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesOrganizationInvitation) GetTypename() *string { return v.Typename }

// singleStatusNodesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Information for an uploaded package.
type singleStatusNodesPackage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPackage.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPackage) GetTypename() *string { return v.Typename }

// singleStatusNodesPackageFile includes the requested fields of the GraphQL type PackageFile.
// The GraphQL type's documentation follows.
//
// A file in a package version.
type singleStatusNodesPackageFile struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPackageFile.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPackageFile) GetTypename() *string { return v.Typename }

// singleStatusNodesPackageTag includes the requested fields of the GraphQL type PackageTag.
// The GraphQL type's documentation follows.
//
// A version tag contains the mapping between a tag name and a version.
type singleStatusNodesPackageTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPackageTag.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPackageTag) GetTypename() *string { return v.Typename }

// singleStatusNodesPackageVersion includes the requested fields of the GraphQL type PackageVersion.
// The GraphQL type's documentation follows.
//
// Information about a specific package version.
type singleStatusNodesPackageVersion struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPackageVersion.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPackageVersion) GetTypename() *string { return v.Typename }

// singleStatusNodesPinnedDiscussion includes the requested fields of the GraphQL type PinnedDiscussion.
// The GraphQL type's documentation follows.
//
// A Pinned Discussion is a discussion pinned to a repository's index page.
type singleStatusNodesPinnedDiscussion struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPinnedDiscussion.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPinnedDiscussion) GetTypename() *string { return v.Typename }

// singleStatusNodesPinnedEvent includes the requested fields of the GraphQL type PinnedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'pinned' event on a given issue or pull request.
type singleStatusNodesPinnedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPinnedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPinnedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesPinnedIssue includes the requested fields of the GraphQL type PinnedIssue.
// The GraphQL type's documentation follows.
//
// A Pinned Issue is a issue pinned to a repository's index page.
type singleStatusNodesPinnedIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPinnedIssue.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPinnedIssue) GetTypename() *string { return v.Typename }

// singleStatusNodesPrivateRepositoryForkingDisableAuditEntry includes the requested fields of the GraphQL type PrivateRepositoryForkingDisableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a private_repository_forking.disable event.
type singleStatusNodesPrivateRepositoryForkingDisableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPrivateRepositoryForkingDisableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPrivateRepositoryForkingDisableAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesPrivateRepositoryForkingEnableAuditEntry includes the requested fields of the GraphQL type PrivateRepositoryForkingEnableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a private_repository_forking.enable event.
type singleStatusNodesPrivateRepositoryForkingEnableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPrivateRepositoryForkingEnableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPrivateRepositoryForkingEnableAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Projects manage issues, pull requests and notes within a project owner.
type singleStatusNodesProject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProject.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProject) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectCard includes the requested fields of the GraphQL type ProjectCard.
// The GraphQL type's documentation follows.
//
// A card in a project.
type singleStatusNodesProjectCard struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectCard.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectCard) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectColumn includes the requested fields of the GraphQL type ProjectColumn.
// The GraphQL type's documentation follows.
//
// A column inside a project.
type singleStatusNodesProjectColumn struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectColumn.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectColumn) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectNext includes the requested fields of the GraphQL type ProjectNext.
// The GraphQL type's documentation follows.
//
// New projects that manage issues, pull requests and drafts using tables and boards.
type singleStatusNodesProjectNext struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectNext.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectNext) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectNextField includes the requested fields of the GraphQL type ProjectNextField.
// The GraphQL type's documentation follows.
//
// A field inside a project.
type singleStatusNodesProjectNextField struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectNextField.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectNextField) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectNextItem includes the requested fields of the GraphQL type ProjectNextItem.
// The GraphQL type's documentation follows.
//
// An item within a new Project.
type singleStatusNodesProjectNextItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectNextItem.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectNextItem) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectNextItemFieldValue includes the requested fields of the GraphQL type ProjectNextItemFieldValue.
// The GraphQL type's documentation follows.
//
// An value of a field in an item of a new Project.
type singleStatusNodesProjectNextItemFieldValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectNextItemFieldValue.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectNextItemFieldValue) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectNextIterationField includes the requested fields of the GraphQL type ProjectNextIterationField.
// The GraphQL type's documentation follows.
//
// An iteration field inside a project.
type singleStatusNodesProjectNextIterationField struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectNextIterationField.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectNextIterationField) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectNextSingleSelectField includes the requested fields of the GraphQL type ProjectNextSingleSelectField.
// The GraphQL type's documentation follows.
//
// A single select field inside a project.
type singleStatusNodesProjectNextSingleSelectField struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectNextSingleSelectField.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectNextSingleSelectField) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectV2 includes the requested fields of the GraphQL type ProjectV2.
// The GraphQL type's documentation follows.
//
// New projects that manage issues, pull requests and drafts using tables and boards.
type singleStatusNodesProjectV2 struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectV2Field includes the requested fields of the GraphQL type ProjectV2Field.
// The GraphQL type's documentation follows.
//
// A field inside a project.
type singleStatusNodesProjectV2Field struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2Field.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2Field) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectV2Item includes the requested fields of the GraphQL type ProjectV2Item.
// The GraphQL type's documentation follows.
//
// An item within a Project.
type singleStatusNodesProjectV2Item struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2Item.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2Item) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectV2ItemFieldDateValue includes the requested fields of the GraphQL type ProjectV2ItemFieldDateValue.
// The GraphQL type's documentation follows.
//
// The value of a date field in a Project item.
type singleStatusNodesProjectV2ItemFieldDateValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2ItemFieldDateValue.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2ItemFieldDateValue) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectV2ItemFieldIterationValue includes the requested fields of the GraphQL type ProjectV2ItemFieldIterationValue.
// The GraphQL type's documentation follows.
//
// The value of an iteration field in a Project item.
type singleStatusNodesProjectV2ItemFieldIterationValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2ItemFieldIterationValue.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2ItemFieldIterationValue) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectV2ItemFieldNumberValue includes the requested fields of the GraphQL type ProjectV2ItemFieldNumberValue.
// The GraphQL type's documentation follows.
//
// The value of a number field in a Project item.
type singleStatusNodesProjectV2ItemFieldNumberValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2ItemFieldNumberValue.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2ItemFieldNumberValue) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectV2ItemFieldSingleSelectValue includes the requested fields of the GraphQL type ProjectV2ItemFieldSingleSelectValue.
// The GraphQL type's documentation follows.
//
// The value of a single select field in a Project item.
type singleStatusNodesProjectV2ItemFieldSingleSelectValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2ItemFieldSingleSelectValue.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2ItemFieldSingleSelectValue) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesProjectV2ItemFieldTextValue includes the requested fields of the GraphQL type ProjectV2ItemFieldTextValue.
// The GraphQL type's documentation follows.
//
// The value of a text field in a Project item.
type singleStatusNodesProjectV2ItemFieldTextValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2ItemFieldTextValue.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2ItemFieldTextValue) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectV2IterationField includes the requested fields of the GraphQL type ProjectV2IterationField.
// The GraphQL type's documentation follows.
//
// An iteration field inside a project.
type singleStatusNodesProjectV2IterationField struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2IterationField.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2IterationField) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectV2SingleSelectField includes the requested fields of the GraphQL type ProjectV2SingleSelectField.
// The GraphQL type's documentation follows.
//
// A single select field inside a project.
type singleStatusNodesProjectV2SingleSelectField struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2SingleSelectField.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2SingleSelectField) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectV2View includes the requested fields of the GraphQL type ProjectV2View.
// The GraphQL type's documentation follows.
//
// A view within a ProjectV2.
type singleStatusNodesProjectV2View struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectV2View.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectV2View) GetTypename() *string { return v.Typename }

// singleStatusNodesProjectView includes the requested fields of the GraphQL type ProjectView.
// The GraphQL type's documentation follows.
//
// A view within a Project.
type singleStatusNodesProjectView struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesProjectView.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesProjectView) GetTypename() *string { return v.Typename }

// singleStatusNodesPublicKey includes the requested fields of the GraphQL type PublicKey.
// The GraphQL type's documentation follows.
//
// A user's public key.
type singleStatusNodesPublicKey struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPublicKey.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPublicKey) GetTypename() *string { return v.Typename }

// singleStatusNodesPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type singleStatusNodesPullRequest struct {
	Typename                *string `json:"__typename"`
	singleStatusPullRequest `json:"-"`
}

// GetTypename returns singleStatusNodesPullRequest.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetTypename() *string { return v.Typename }

// GetId returns singleStatusNodesPullRequest.Id, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetId() string { return v.singleStatusPullRequest.Id }

// GetNumber returns singleStatusNodesPullRequest.Number, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetNumber() int { return v.singleStatusPullRequest.Number }

// GetTitle returns singleStatusNodesPullRequest.Title, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetTitle() string { return v.singleStatusPullRequest.Title }

// GetState returns singleStatusNodesPullRequest.State, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetState() PullRequestState {
	return v.singleStatusPullRequest.State
}

// GetRepository returns singleStatusNodesPullRequest.Repository, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetRepository() singleStatusPullRequestRepository {
	return v.singleStatusPullRequest.Repository
}

// GetAuthor returns singleStatusNodesPullRequest.Author, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetAuthor() *singleStatusPullRequestAuthorActor {
	return v.singleStatusPullRequest.Author
}

// GetBaseRefName returns singleStatusNodesPullRequest.BaseRefName, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetBaseRefName() string {
	return v.singleStatusPullRequest.BaseRefName
}

// GetHeadRefName returns singleStatusNodesPullRequest.HeadRefName, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetHeadRefName() string {
	return v.singleStatusPullRequest.HeadRefName
}

// GetReviews returns singleStatusNodesPullRequest.Reviews, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetReviews() *singleStatusPullRequestReviewsPullRequestReviewConnection {
	return v.singleStatusPullRequest.Reviews
}

// GetReviewRequests returns singleStatusNodesPullRequest.ReviewRequests, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetReviewRequests() *singleStatusPullRequestReviewRequestsReviewRequestConnection {
	return v.singleStatusPullRequest.ReviewRequests
}

// GetCommits returns singleStatusNodesPullRequest.Commits, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequest) GetCommits() singleStatusPullRequestCommitsPullRequestCommitConnection {
	return v.singleStatusPullRequest.Commits
}

func (v *singleStatusNodesPullRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*singleStatusNodesPullRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.singleStatusNodesPullRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.singleStatusPullRequest)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalsingleStatusNodesPullRequest struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Number int `json:"number"`

	Title string `json:"title"`

	State PullRequestState `json:"state"`

	Repository singleStatusPullRequestRepository `json:"repository"`

	Author json.RawMessage `json:"author"`

	BaseRefName string `json:"baseRefName"`

	HeadRefName string `json:"headRefName"`

	Reviews *singleStatusPullRequestReviewsPullRequestReviewConnection `json:"reviews"`

	ReviewRequests *singleStatusPullRequestReviewRequestsReviewRequestConnection `json:"reviewRequests"`

	Commits singleStatusPullRequestCommitsPullRequestCommitConnection `json:"commits"`
}

func (v *singleStatusNodesPullRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *singleStatusNodesPullRequest) __premarshalJSON() (*__premarshalsingleStatusNodesPullRequest, error) {
	var retval __premarshalsingleStatusNodesPullRequest

	retval.Typename = v.Typename
	retval.Id = v.singleStatusPullRequest.Id
	retval.Number = v.singleStatusPullRequest.Number
	retval.Title = v.singleStatusPullRequest.Title
	retval.State = v.singleStatusPullRequest.State
	retval.Repository = v.singleStatusPullRequest.Repository
	{

		dst := &retval.Author
		src := v.singleStatusPullRequest.Author
		if src != nil {
			var err error
			*dst, err = __marshalsingleStatusPullRequestAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal singleStatusNodesPullRequest.singleStatusPullRequest.Author: %w", err)
			}
		}
	}
	retval.BaseRefName = v.singleStatusPullRequest.BaseRefName
	retval.HeadRefName = v.singleStatusPullRequest.HeadRefName
	retval.Reviews = v.singleStatusPullRequest.Reviews
	retval.ReviewRequests = v.singleStatusPullRequest.ReviewRequests
	retval.Commits = v.singleStatusPullRequest.Commits
	return &retval, nil
}

// singleStatusNodesPullRequestCommit includes the requested fields of the GraphQL type PullRequestCommit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit part of a pull request.
type singleStatusNodesPullRequestCommit struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPullRequestCommit.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequestCommit) GetTypename() *string { return v.Typename }

// singleStatusNodesPullRequestCommitCommentThread includes the requested fields of the GraphQL type PullRequestCommitCommentThread.
// The GraphQL type's documentation follows.
//
// Represents a commit comment thread part of a pull request.
type singleStatusNodesPullRequestCommitCommentThread struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPullRequestCommitCommentThread.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequestCommitCommentThread) GetTypename() *string { return v.Typename }

// singleStatusNodesPullRequestReview includes the requested fields of the GraphQL type PullRequestReview.
// The GraphQL type's documentation follows.
//
// A review object for a given pull request.
type singleStatusNodesPullRequestReview struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPullRequestReview.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequestReview) GetTypename() *string { return v.Typename }

// singleStatusNodesPullRequestReviewComment includes the requested fields of the GraphQL type PullRequestReviewComment.
// The GraphQL type's documentation follows.
//
// A review comment associated with a given repository pull request.
type singleStatusNodesPullRequestReviewComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPullRequestReviewComment.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequestReviewComment) GetTypename() *string { return v.Typename }

// singleStatusNodesPullRequestReviewThread includes the requested fields of the GraphQL type PullRequestReviewThread.
// The GraphQL type's documentation follows.
//
// A threaded list of comments for a given pull request.
type singleStatusNodesPullRequestReviewThread struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPullRequestReviewThread.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequestReviewThread) GetTypename() *string { return v.Typename }

// singleStatusNodesPullRequestThread includes the requested fields of the GraphQL type PullRequestThread.
// The GraphQL type's documentation follows.
//
// A threaded list of comments for a given pull request.
type singleStatusNodesPullRequestThread struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPullRequestThread.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPullRequestThread) GetTypename() *string { return v.Typename }

// singleStatusNodesPush includes the requested fields of the GraphQL type Push.
// The GraphQL type's documentation follows.
//
// A Git push.
type singleStatusNodesPush struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPush.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPush) GetTypename() *string { return v.Typename }

// singleStatusNodesPushAllowance includes the requested fields of the GraphQL type PushAllowance.
// The GraphQL type's documentation follows.
//
// A team, user, or app who has the ability to push to a protected branch.
type singleStatusNodesPushAllowance struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesPushAllowance.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesPushAllowance) GetTypename() *string { return v.Typename }

// singleStatusNodesReaction includes the requested fields of the GraphQL type Reaction.
// The GraphQL type's documentation follows.
//
// An emoji reaction to a particular piece of content.
type singleStatusNodesReaction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesReaction.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesReaction) GetTypename() *string { return v.Typename }

// singleStatusNodesReadyForReviewEvent includes the requested fields of the GraphQL type ReadyForReviewEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'ready_for_review' event on a given pull request.
type singleStatusNodesReadyForReviewEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesReadyForReviewEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesReadyForReviewEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type singleStatusNodesRef struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRef.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRef) GetTypename() *string { return v.Typename }

// singleStatusNodesReferencedEvent includes the requested fields of the GraphQL type ReferencedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'referenced' event on a given `ReferencedSubject`.
type singleStatusNodesReferencedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesReferencedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesReferencedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesRelease includes the requested fields of the GraphQL type Release.
// The GraphQL type's documentation follows.
//
// A release contains the content for a release.
type singleStatusNodesRelease struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRelease.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRelease) GetTypename() *string { return v.Typename }

// singleStatusNodesReleaseAsset includes the requested fields of the GraphQL type ReleaseAsset.
// The GraphQL type's documentation follows.
//
// A release asset contains the content for a release asset.
type singleStatusNodesReleaseAsset struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesReleaseAsset.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesReleaseAsset) GetTypename() *string { return v.Typename }

// singleStatusNodesRemovedFromProjectEvent includes the requested fields of the GraphQL type RemovedFromProjectEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'removed_from_project' event on a given issue or pull request.
type singleStatusNodesRemovedFromProjectEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRemovedFromProjectEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRemovedFromProjectEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesRenamedTitleEvent includes the requested fields of the GraphQL type RenamedTitleEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'renamed' event on a given issue or pull request
type singleStatusNodesRenamedTitleEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRenamedTitleEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRenamedTitleEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesReopenedEvent includes the requested fields of the GraphQL type ReopenedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'reopened' event on any `Closable`.
type singleStatusNodesReopenedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesReopenedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesReopenedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesRepoAccessAuditEntry includes the requested fields of the GraphQL type RepoAccessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.access event.
type singleStatusNodesRepoAccessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoAccessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoAccessAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesRepoAddMemberAuditEntry includes the requested fields of the GraphQL type RepoAddMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.add_member event.
type singleStatusNodesRepoAddMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoAddMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoAddMemberAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesRepoAddTopicAuditEntry includes the requested fields of the GraphQL type RepoAddTopicAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.add_topic event.
type singleStatusNodesRepoAddTopicAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoAddTopicAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoAddTopicAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesRepoArchivedAuditEntry includes the requested fields of the GraphQL type RepoArchivedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.archived event.
type singleStatusNodesRepoArchivedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoArchivedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoArchivedAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesRepoChangeMergeSettingAuditEntry includes the requested fields of the GraphQL type RepoChangeMergeSettingAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.change_merge_setting event.
type singleStatusNodesRepoChangeMergeSettingAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoChangeMergeSettingAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoChangeMergeSettingAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesRepoConfigDisableAnonymousGitAccessAuditEntry includes the requested fields of the GraphQL type RepoConfigDisableAnonymousGitAccessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.disable_anonymous_git_access event.
type singleStatusNodesRepoConfigDisableAnonymousGitAccessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoConfigDisableAnonymousGitAccessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoConfigDisableAnonymousGitAccessAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepoConfigDisableCollaboratorsOnlyAuditEntry includes the requested fields of the GraphQL type RepoConfigDisableCollaboratorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.disable_collaborators_only event.
type singleStatusNodesRepoConfigDisableCollaboratorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoConfigDisableCollaboratorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoConfigDisableCollaboratorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepoConfigDisableContributorsOnlyAuditEntry includes the requested fields of the GraphQL type RepoConfigDisableContributorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.disable_contributors_only event.
type singleStatusNodesRepoConfigDisableContributorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoConfigDisableContributorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoConfigDisableContributorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepoConfigDisableSockpuppetDisallowedAuditEntry includes the requested fields of the GraphQL type RepoConfigDisableSockpuppetDisallowedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
type singleStatusNodesRepoConfigDisableSockpuppetDisallowedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoConfigDisableSockpuppetDisallowedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoConfigDisableSockpuppetDisallowedAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepoConfigEnableAnonymousGitAccessAuditEntry includes the requested fields of the GraphQL type RepoConfigEnableAnonymousGitAccessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.enable_anonymous_git_access event.
type singleStatusNodesRepoConfigEnableAnonymousGitAccessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoConfigEnableAnonymousGitAccessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoConfigEnableAnonymousGitAccessAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepoConfigEnableCollaboratorsOnlyAuditEntry includes the requested fields of the GraphQL type RepoConfigEnableCollaboratorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.enable_collaborators_only event.
type singleStatusNodesRepoConfigEnableCollaboratorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoConfigEnableCollaboratorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoConfigEnableCollaboratorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepoConfigEnableContributorsOnlyAuditEntry includes the requested fields of the GraphQL type RepoConfigEnableContributorsOnlyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.enable_contributors_only event.
type singleStatusNodesRepoConfigEnableContributorsOnlyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoConfigEnableContributorsOnlyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoConfigEnableContributorsOnlyAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepoConfigEnableSockpuppetDisallowedAuditEntry includes the requested fields of the GraphQL type RepoConfigEnableSockpuppetDisallowedAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
type singleStatusNodesRepoConfigEnableSockpuppetDisallowedAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoConfigEnableSockpuppetDisallowedAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoConfigEnableSockpuppetDisallowedAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepoConfigLockAnonymousGitAccessAuditEntry includes the requested fields of the GraphQL type RepoConfigLockAnonymousGitAccessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.lock_anonymous_git_access event.
type singleStatusNodesRepoConfigLockAnonymousGitAccessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoConfigLockAnonymousGitAccessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoConfigLockAnonymousGitAccessAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepoConfigUnlockAnonymousGitAccessAuditEntry includes the requested fields of the GraphQL type RepoConfigUnlockAnonymousGitAccessAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.config.unlock_anonymous_git_access event.
type singleStatusNodesRepoConfigUnlockAnonymousGitAccessAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoConfigUnlockAnonymousGitAccessAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoConfigUnlockAnonymousGitAccessAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepoCreateAuditEntry includes the requested fields of the GraphQL type RepoCreateAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.create event.
type singleStatusNodesRepoCreateAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoCreateAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoCreateAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesRepoDestroyAuditEntry includes the requested fields of the GraphQL type RepoDestroyAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.destroy event.
type singleStatusNodesRepoDestroyAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoDestroyAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoDestroyAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesRepoRemoveMemberAuditEntry includes the requested fields of the GraphQL type RepoRemoveMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.remove_member event.
type singleStatusNodesRepoRemoveMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoRemoveMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoRemoveMemberAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesRepoRemoveTopicAuditEntry includes the requested fields of the GraphQL type RepoRemoveTopicAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repo.remove_topic event.
type singleStatusNodesRepoRemoveTopicAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepoRemoveTopicAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepoRemoveTopicAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type singleStatusNodesRepository struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepository.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepository) GetTypename() *string { return v.Typename }

// singleStatusNodesRepositoryInvitation includes the requested fields of the GraphQL type RepositoryInvitation.
// The GraphQL type's documentation follows.
//
// An invitation for a user to be added to a repository.
type singleStatusNodesRepositoryInvitation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepositoryInvitation.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepositoryInvitation) GetTypename() *string { return v.Typename }

// singleStatusNodesRepositoryMigration includes the requested fields of the GraphQL type RepositoryMigration.
// The GraphQL type's documentation follows.
//
// A GitHub Enterprise Importer (GEI) repository migration.
type singleStatusNodesRepositoryMigration struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepositoryMigration.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepositoryMigration) GetTypename() *string { return v.Typename }

// singleStatusNodesRepositoryTopic includes the requested fields of the GraphQL type RepositoryTopic.
// The GraphQL type's documentation follows.
//
// A repository-topic connects a repository to a topic.
type singleStatusNodesRepositoryTopic struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepositoryTopic.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepositoryTopic) GetTypename() *string { return v.Typename }

// singleStatusNodesRepositoryVisibilityChangeDisableAuditEntry includes the requested fields of the GraphQL type RepositoryVisibilityChangeDisableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repository_visibility_change.disable event.
type singleStatusNodesRepositoryVisibilityChangeDisableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepositoryVisibilityChangeDisableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepositoryVisibilityChangeDisableAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepositoryVisibilityChangeEnableAuditEntry includes the requested fields of the GraphQL type RepositoryVisibilityChangeEnableAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a repository_visibility_change.enable event.
type singleStatusNodesRepositoryVisibilityChangeEnableAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepositoryVisibilityChangeEnableAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepositoryVisibilityChangeEnableAuditEntry) GetTypename() *string {
	return v.Typename
}

// singleStatusNodesRepositoryVulnerabilityAlert includes the requested fields of the GraphQL type RepositoryVulnerabilityAlert.
// The GraphQL type's documentation follows.
//
// A Dependabot alert for a repository with a dependency affected by a security vulnerability.
type singleStatusNodesRepositoryVulnerabilityAlert struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesRepositoryVulnerabilityAlert.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesRepositoryVulnerabilityAlert) GetTypename() *string { return v.Typename }

// singleStatusNodesReviewDismissalAllowance includes the requested fields of the GraphQL type ReviewDismissalAllowance.
// The GraphQL type's documentation follows.
//
// A user, team, or app who has the ability to dismiss a review on a protected branch.
type singleStatusNodesReviewDismissalAllowance struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesReviewDismissalAllowance.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesReviewDismissalAllowance) GetTypename() *string { return v.Typename }

// singleStatusNodesReviewDismissedEvent includes the requested fields of the GraphQL type ReviewDismissedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'review_dismissed' event on a given issue or pull request.
type singleStatusNodesReviewDismissedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesReviewDismissedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesReviewDismissedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesReviewRequest includes the requested fields of the GraphQL type ReviewRequest.
// The GraphQL type's documentation follows.
//
// A request for a user to review a pull request.
type singleStatusNodesReviewRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesReviewRequest.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesReviewRequest) GetTypename() *string { return v.Typename }

// singleStatusNodesReviewRequestRemovedEvent includes the requested fields of the GraphQL type ReviewRequestRemovedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'review_request_removed' event on a given pull request.
type singleStatusNodesReviewRequestRemovedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesReviewRequestRemovedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesReviewRequestRemovedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesReviewRequestedEvent includes the requested fields of the GraphQL type ReviewRequestedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'review_requested' event on a given pull request.
type singleStatusNodesReviewRequestedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesReviewRequestedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesReviewRequestedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesSavedReply includes the requested fields of the GraphQL type SavedReply.
// The GraphQL type's documentation follows.
//
// A Saved Reply is text a user can use to reply quickly.
type singleStatusNodesSavedReply struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesSavedReply.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesSavedReply) GetTypename() *string { return v.Typename }

// singleStatusNodesSecurityAdvisory includes the requested fields of the GraphQL type SecurityAdvisory.
// The GraphQL type's documentation follows.
//
// A GitHub Security Advisory
type singleStatusNodesSecurityAdvisory struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesSecurityAdvisory.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesSecurityAdvisory) GetTypename() *string { return v.Typename }

// singleStatusNodesSponsorsActivity includes the requested fields of the GraphQL type SponsorsActivity.
// The GraphQL type's documentation follows.
//
// An event related to sponsorship activity.
type singleStatusNodesSponsorsActivity struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesSponsorsActivity.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesSponsorsActivity) GetTypename() *string { return v.Typename }

// singleStatusNodesSponsorsListing includes the requested fields of the GraphQL type SponsorsListing.
// The GraphQL type's documentation follows.
//
// A GitHub Sponsors listing.
type singleStatusNodesSponsorsListing struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesSponsorsListing.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesSponsorsListing) GetTypename() *string { return v.Typename }

// singleStatusNodesSponsorsListingFeaturedItem includes the requested fields of the GraphQL type SponsorsListingFeaturedItem.
// The GraphQL type's documentation follows.
//
// A record that is promoted on a GitHub Sponsors profile.
type singleStatusNodesSponsorsListingFeaturedItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesSponsorsListingFeaturedItem.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesSponsorsListingFeaturedItem) GetTypename() *string { return v.Typename }

// singleStatusNodesSponsorsTier includes the requested fields of the GraphQL type SponsorsTier.
// The GraphQL type's documentation follows.
//
// A GitHub Sponsors tier associated with a GitHub Sponsors listing.
type singleStatusNodesSponsorsTier struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesSponsorsTier.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesSponsorsTier) GetTypename() *string { return v.Typename }

// singleStatusNodesSponsorship includes the requested fields of the GraphQL type Sponsorship.
// The GraphQL type's documentation follows.
//
// A sponsorship relationship between a sponsor and a maintainer
type singleStatusNodesSponsorship struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesSponsorship.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesSponsorship) GetTypename() *string { return v.Typename }

// singleStatusNodesSponsorshipNewsletter includes the requested fields of the GraphQL type SponsorshipNewsletter.
// The GraphQL type's documentation follows.
//
// An update sent to sponsors of a user or organization on GitHub Sponsors.
type singleStatusNodesSponsorshipNewsletter struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesSponsorshipNewsletter.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesSponsorshipNewsletter) GetTypename() *string { return v.Typename }

// singleStatusNodesStatus includes the requested fields of the GraphQL type Status.
// The GraphQL type's documentation follows.
//
// Represents a commit status.
type singleStatusNodesStatus struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesStatus.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesStatus) GetTypename() *string { return v.Typename }

// singleStatusNodesStatusCheckRollup includes the requested fields of the GraphQL type StatusCheckRollup.
// The GraphQL type's documentation follows.
//
// Represents the rollup for both the check runs and status for a commit.
type singleStatusNodesStatusCheckRollup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesStatusCheckRollup.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesStatusCheckRollup) GetTypename() *string { return v.Typename }

// singleStatusNodesStatusContext includes the requested fields of the GraphQL type StatusContext.
// The GraphQL type's documentation follows.
//
// Represents an individual commit status context
type singleStatusNodesStatusContext struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesStatusContext.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesStatusContext) GetTypename() *string { return v.Typename }

// singleStatusNodesSubscribedEvent includes the requested fields of the GraphQL type SubscribedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'subscribed' event on a given `Subscribable`.
type singleStatusNodesSubscribedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesSubscribedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesSubscribedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Represents a Git tag.
type singleStatusNodesTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTag.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTag) GetTypename() *string { return v.Typename }

// singleStatusNodesTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users in an organization.
type singleStatusNodesTeam struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTeam.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTeam) GetTypename() *string { return v.Typename }

// singleStatusNodesTeamAddMemberAuditEntry includes the requested fields of the GraphQL type TeamAddMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a team.add_member event.
type singleStatusNodesTeamAddMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTeamAddMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTeamAddMemberAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesTeamAddRepositoryAuditEntry includes the requested fields of the GraphQL type TeamAddRepositoryAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a team.add_repository event.
type singleStatusNodesTeamAddRepositoryAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTeamAddRepositoryAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTeamAddRepositoryAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesTeamChangeParentTeamAuditEntry includes the requested fields of the GraphQL type TeamChangeParentTeamAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a team.change_parent_team event.
type singleStatusNodesTeamChangeParentTeamAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTeamChangeParentTeamAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTeamChangeParentTeamAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesTeamDiscussion includes the requested fields of the GraphQL type TeamDiscussion.
// The GraphQL type's documentation follows.
//
// A team discussion.
type singleStatusNodesTeamDiscussion struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTeamDiscussion.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTeamDiscussion) GetTypename() *string { return v.Typename }

// singleStatusNodesTeamDiscussionComment includes the requested fields of the GraphQL type TeamDiscussionComment.
// The GraphQL type's documentation follows.
//
// A comment on a team discussion.
type singleStatusNodesTeamDiscussionComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTeamDiscussionComment.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTeamDiscussionComment) GetTypename() *string { return v.Typename }

// singleStatusNodesTeamRemoveMemberAuditEntry includes the requested fields of the GraphQL type TeamRemoveMemberAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a team.remove_member event.
type singleStatusNodesTeamRemoveMemberAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTeamRemoveMemberAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTeamRemoveMemberAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesTeamRemoveRepositoryAuditEntry includes the requested fields of the GraphQL type TeamRemoveRepositoryAuditEntry.
// The GraphQL type's documentation follows.
//
// Audit log entry for a team.remove_repository event.
type singleStatusNodesTeamRemoveRepositoryAuditEntry struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTeamRemoveRepositoryAuditEntry.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTeamRemoveRepositoryAuditEntry) GetTypename() *string { return v.Typename }

// singleStatusNodesTopic includes the requested fields of the GraphQL type Topic.
// The GraphQL type's documentation follows.
//
// A topic aggregates entities that are related to a subject.
type singleStatusNodesTopic struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTopic.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTopic) GetTypename() *string { return v.Typename }

// singleStatusNodesTransferredEvent includes the requested fields of the GraphQL type TransferredEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'transferred' event on a given issue or pull request.
type singleStatusNodesTransferredEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTransferredEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTransferredEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesTree includes the requested fields of the GraphQL type Tree.
// The GraphQL type's documentation follows.
//
// Represents a Git tree.
type singleStatusNodesTree struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesTree.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesTree) GetTypename() *string { return v.Typename }

// singleStatusNodesUnassignedEvent includes the requested fields of the GraphQL type UnassignedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unassigned' event on any assignable object.
type singleStatusNodesUnassignedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesUnassignedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesUnassignedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesUnlabeledEvent includes the requested fields of the GraphQL type UnlabeledEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unlabeled' event on a given issue or pull request.
type singleStatusNodesUnlabeledEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesUnlabeledEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesUnlabeledEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesUnlockedEvent includes the requested fields of the GraphQL type UnlockedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unlocked' event on a given issue or pull request.
type singleStatusNodesUnlockedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesUnlockedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesUnlockedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesUnmarkedAsDuplicateEvent includes the requested fields of the GraphQL type UnmarkedAsDuplicateEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
type singleStatusNodesUnmarkedAsDuplicateEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesUnmarkedAsDuplicateEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesUnmarkedAsDuplicateEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesUnpinnedEvent includes the requested fields of the GraphQL type UnpinnedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unpinned' event on a given issue or pull request.
type singleStatusNodesUnpinnedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesUnpinnedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesUnpinnedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesUnsubscribedEvent includes the requested fields of the GraphQL type UnsubscribedEvent.
// The GraphQL type's documentation follows.
//
// Represents an 'unsubscribed' event on a given `Subscribable`.
type singleStatusNodesUnsubscribedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesUnsubscribedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesUnsubscribedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type singleStatusNodesUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesUser.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesUser) GetTypename() *string { return v.Typename }

// singleStatusNodesUserBlockedEvent includes the requested fields of the GraphQL type UserBlockedEvent.
// The GraphQL type's documentation follows.
//
// Represents a 'user_blocked' event on a given user.
type singleStatusNodesUserBlockedEvent struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesUserBlockedEvent.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesUserBlockedEvent) GetTypename() *string { return v.Typename }

// singleStatusNodesUserContentEdit includes the requested fields of the GraphQL type UserContentEdit.
// The GraphQL type's documentation follows.
//
// An edit on user content
type singleStatusNodesUserContentEdit struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesUserContentEdit.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesUserContentEdit) GetTypename() *string { return v.Typename }

// singleStatusNodesUserStatus includes the requested fields of the GraphQL type UserStatus.
// The GraphQL type's documentation follows.
//
// The user's description of what they're currently doing.
type singleStatusNodesUserStatus struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesUserStatus.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesUserStatus) GetTypename() *string { return v.Typename }

// singleStatusNodesVerifiableDomain includes the requested fields of the GraphQL type VerifiableDomain.
// The GraphQL type's documentation follows.
//
// A domain that can be verified or approved for an organization or an enterprise.
type singleStatusNodesVerifiableDomain struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesVerifiableDomain.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesVerifiableDomain) GetTypename() *string { return v.Typename }

// singleStatusNodesWorkflow includes the requested fields of the GraphQL type Workflow.
// The GraphQL type's documentation follows.
//
// A workflow contains meta information about an Actions workflow file.
type singleStatusNodesWorkflow struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesWorkflow.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesWorkflow) GetTypename() *string { return v.Typename }

// singleStatusNodesWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
// The GraphQL type's documentation follows.
//
// A workflow run.
type singleStatusNodesWorkflowRun struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusNodesWorkflowRun.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusNodesWorkflowRun) GetTypename() *string { return v.Typename }

// singleStatusPullRequest includes the GraphQL fields of PullRequest requested by the fragment singleStatusPullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type singleStatusPullRequest struct {
	Id string `json:"id"`
	// Identifies the pull request number.
	Number int `json:"number"`
	// Identifies the pull request title.
	Title string `json:"title"`
	// Identifies the state of the pull request.
	State PullRequestState `json:"state"`
	// The repository associated with this node.
	Repository singleStatusPullRequestRepository `json:"repository"`
	// The actor who authored the comment.
	Author *singleStatusPullRequestAuthorActor `json:"-"`
	// Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
	BaseRefName string `json:"baseRefName"`
	// Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
	HeadRefName string `json:"headRefName"`
	// A list of reviews associated with the pull request.
	Reviews *singleStatusPullRequestReviewsPullRequestReviewConnection `json:"reviews"`
	// A list of review requests associated with the pull request.
	ReviewRequests *singleStatusPullRequestReviewRequestsReviewRequestConnection `json:"reviewRequests"`
	// A list of commits present in this pull request's head branch not present in the base branch.
	Commits singleStatusPullRequestCommitsPullRequestCommitConnection `json:"commits"`
}

// GetId returns singleStatusPullRequest.Id, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetId() string { return v.Id }

// GetNumber returns singleStatusPullRequest.Number, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetNumber() int { return v.Number }

// GetTitle returns singleStatusPullRequest.Title, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetTitle() string { return v.Title }

// GetState returns singleStatusPullRequest.State, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetState() PullRequestState { return v.State }

// GetRepository returns singleStatusPullRequest.Repository, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetRepository() singleStatusPullRequestRepository {
	return v.Repository
}

// GetAuthor returns singleStatusPullRequest.Author, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetAuthor() *singleStatusPullRequestAuthorActor { return v.Author }

// GetBaseRefName returns singleStatusPullRequest.BaseRefName, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetBaseRefName() string { return v.BaseRefName }

// GetHeadRefName returns singleStatusPullRequest.HeadRefName, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetHeadRefName() string { return v.HeadRefName }

// GetReviews returns singleStatusPullRequest.Reviews, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetReviews() *singleStatusPullRequestReviewsPullRequestReviewConnection {
	return v.Reviews
}

// GetReviewRequests returns singleStatusPullRequest.ReviewRequests, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetReviewRequests() *singleStatusPullRequestReviewRequestsReviewRequestConnection {
	return v.ReviewRequests
}

// GetCommits returns singleStatusPullRequest.Commits, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequest) GetCommits() singleStatusPullRequestCommitsPullRequestCommitConnection {
	return v.Commits
}

func (v *singleStatusPullRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*singleStatusPullRequest
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.singleStatusPullRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			*dst = new(singleStatusPullRequestAuthorActor)
			err = __unmarshalsingleStatusPullRequestAuthorActor(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal singleStatusPullRequest.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalsingleStatusPullRequest struct {
	Id string `json:"id"`

	Number int `json:"number"`

	Title string `json:"title"`

	State PullRequestState `json:"state"`

	Repository singleStatusPullRequestRepository `json:"repository"`

	Author json.RawMessage `json:"author"`

	BaseRefName string `json:"baseRefName"`

	HeadRefName string `json:"headRefName"`

	Reviews *singleStatusPullRequestReviewsPullRequestReviewConnection `json:"reviews"`

	ReviewRequests *singleStatusPullRequestReviewRequestsReviewRequestConnection `json:"reviewRequests"`

	Commits singleStatusPullRequestCommitsPullRequestCommitConnection `json:"commits"`
}

func (v *singleStatusPullRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *singleStatusPullRequest) __premarshalJSON() (*__premarshalsingleStatusPullRequest, error) {
	var retval __premarshalsingleStatusPullRequest

	retval.Id = v.Id
	retval.Number = v.Number
	retval.Title = v.Title
	retval.State = v.State
	retval.Repository = v.Repository
	{

		dst := &retval.Author
		src := v.Author
		if src != nil {
			var err error
			*dst, err = __marshalsingleStatusPullRequestAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal singleStatusPullRequest.Author: %w", err)
			}
		}
	}
	retval.BaseRefName = v.BaseRefName
	retval.HeadRefName = v.HeadRefName
	retval.Reviews = v.Reviews
	retval.ReviewRequests = v.ReviewRequests
	retval.Commits = v.Commits
	return &retval, nil
}

// singleStatusPullRequestAuthorActor includes the requested fields of the GraphQL interface Actor.
//
// singleStatusPullRequestAuthorActor is implemented by the following types:
// singleStatusPullRequestAuthorBot
// singleStatusPullRequestAuthorEnterpriseUserAccount
// singleStatusPullRequestAuthorMannequin
// singleStatusPullRequestAuthorOrganization
// singleStatusPullRequestAuthorUser
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
type singleStatusPullRequestAuthorActor interface {
	implementsGraphQLInterfacesingleStatusPullRequestAuthorActor()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetLogin returns the interface-field "login" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The username of the actor.
	GetLogin() string
}

func (v *singleStatusPullRequestAuthorBot) implementsGraphQLInterfacesingleStatusPullRequestAuthorActor() {
}
func (v *singleStatusPullRequestAuthorEnterpriseUserAccount) implementsGraphQLInterfacesingleStatusPullRequestAuthorActor() {
}
func (v *singleStatusPullRequestAuthorMannequin) implementsGraphQLInterfacesingleStatusPullRequestAuthorActor() {
}
func (v *singleStatusPullRequestAuthorOrganization) implementsGraphQLInterfacesingleStatusPullRequestAuthorActor() {
}
func (v *singleStatusPullRequestAuthorUser) implementsGraphQLInterfacesingleStatusPullRequestAuthorActor() {
}

func __unmarshalsingleStatusPullRequestAuthorActor(b []byte, v *singleStatusPullRequestAuthorActor) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Bot":
		*v = new(singleStatusPullRequestAuthorBot)
		return json.Unmarshal(b, *v)
	case "EnterpriseUserAccount":
		*v = new(singleStatusPullRequestAuthorEnterpriseUserAccount)
		return json.Unmarshal(b, *v)
	case "Mannequin":
		*v = new(singleStatusPullRequestAuthorMannequin)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(singleStatusPullRequestAuthorOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(singleStatusPullRequestAuthorUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Actor.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for singleStatusPullRequestAuthorActor: "%v"`, tn.TypeName)
	}
}

func __marshalsingleStatusPullRequestAuthorActor(v *singleStatusPullRequestAuthorActor) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *singleStatusPullRequestAuthorBot:
		typename = "Bot"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusPullRequestAuthorBot
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusPullRequestAuthorEnterpriseUserAccount:
		typename = "EnterpriseUserAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusPullRequestAuthorEnterpriseUserAccount
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusPullRequestAuthorMannequin:
		typename = "Mannequin"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusPullRequestAuthorMannequin
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusPullRequestAuthorOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusPullRequestAuthorOrganization
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusPullRequestAuthorUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusPullRequestAuthorUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for singleStatusPullRequestAuthorActor: "%T"`, v)
	}
}

// singleStatusPullRequestAuthorBot includes the requested fields of the GraphQL type Bot.
// The GraphQL type's documentation follows.
//
// A special type of user which takes actions on behalf of GitHub Apps.
type singleStatusPullRequestAuthorBot struct {
	Typename *string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns singleStatusPullRequestAuthorBot.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestAuthorBot) GetTypename() *string { return v.Typename }

// GetLogin returns singleStatusPullRequestAuthorBot.Login, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestAuthorBot) GetLogin() string { return v.Login }

// singleStatusPullRequestAuthorEnterpriseUserAccount includes the requested fields of the GraphQL type EnterpriseUserAccount.
// The GraphQL type's documentation follows.
//
// An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
type singleStatusPullRequestAuthorEnterpriseUserAccount struct {
	Typename *string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns singleStatusPullRequestAuthorEnterpriseUserAccount.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestAuthorEnterpriseUserAccount) GetTypename() *string { return v.Typename }

// GetLogin returns singleStatusPullRequestAuthorEnterpriseUserAccount.Login, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestAuthorEnterpriseUserAccount) GetLogin() string { return v.Login }

// singleStatusPullRequestAuthorMannequin includes the requested fields of the GraphQL type Mannequin.
// The GraphQL type's documentation follows.
//
// A placeholder user for attribution of imported data on GitHub.
type singleStatusPullRequestAuthorMannequin struct {
	Typename *string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns singleStatusPullRequestAuthorMannequin.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestAuthorMannequin) GetTypename() *string { return v.Typename }

// GetLogin returns singleStatusPullRequestAuthorMannequin.Login, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestAuthorMannequin) GetLogin() string { return v.Login }

// singleStatusPullRequestAuthorOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type singleStatusPullRequestAuthorOrganization struct {
	Typename *string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns singleStatusPullRequestAuthorOrganization.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestAuthorOrganization) GetTypename() *string { return v.Typename }

// GetLogin returns singleStatusPullRequestAuthorOrganization.Login, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestAuthorOrganization) GetLogin() string { return v.Login }

// singleStatusPullRequestAuthorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type singleStatusPullRequestAuthorUser struct {
	Typename *string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns singleStatusPullRequestAuthorUser.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestAuthorUser) GetTypename() *string { return v.Typename }

// GetLogin returns singleStatusPullRequestAuthorUser.Login, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestAuthorUser) GetLogin() string { return v.Login }

// singleStatusPullRequestCommitsPullRequestCommitConnection includes the requested fields of the GraphQL type PullRequestCommitConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequestCommit.
type singleStatusPullRequestCommitsPullRequestCommitConnection struct {
	// A list of nodes.
	Nodes []*singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit `json:"nodes"`
}

// GetNodes returns singleStatusPullRequestCommitsPullRequestCommitConnection.Nodes, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestCommitsPullRequestCommitConnection) GetNodes() []*singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit {
	return v.Nodes
}

// singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit includes the requested fields of the GraphQL type PullRequestCommit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit part of a pull request.
type singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit struct {
	// The Git commit object
	Commit singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit `json:"commit"`
}

// GetCommit returns singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit.Commit, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit) GetCommit() singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit {
	return v.Commit
}

// singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit struct {
	// Check and Status rollup information for this commit.
	StatusCheckRollup *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup `json:"statusCheckRollup"`
}

// GetStatusCheckRollup returns singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit.StatusCheckRollup, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit) GetStatusCheckRollup() *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup {
	return v.StatusCheckRollup
}

// singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup includes the requested fields of the GraphQL type StatusCheckRollup.
// The GraphQL type's documentation follows.
//
// Represents the rollup for both the check runs and status for a commit.
type singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup struct {
	// A list of status contexts and check runs for this commit.
	Contexts singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection `json:"contexts"`
}

// GetContexts returns singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup.Contexts, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollup) GetContexts() singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection {
	return v.Contexts
}

// singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection includes the requested fields of the GraphQL type StatusCheckRollupContextConnection.
// The GraphQL type's documentation follows.
//
// The connection type for StatusCheckRollupContext.
type singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection struct {
	// Counts of check runs by state.
	CheckRunCountsByState []singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionCheckRunCountsByStateCheckRunStateCount `json:"checkRunCountsByState"`
	// Counts of status contexts by state.
	StatusContextCountsByState []singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionStatusContextCountsByStateStatusContextStateCount `json:"statusContextCountsByState"`
}

// GetCheckRunCountsByState returns singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection.CheckRunCountsByState, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection) GetCheckRunCountsByState() []singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionCheckRunCountsByStateCheckRunStateCount {
	return v.CheckRunCountsByState
}

// GetStatusContextCountsByState returns singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection.StatusContextCountsByState, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnection) GetStatusContextCountsByState() []singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionStatusContextCountsByStateStatusContextStateCount {
	return v.StatusContextCountsByState
}

// singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionCheckRunCountsByStateCheckRunStateCount includes the requested fields of the GraphQL type CheckRunStateCount.
// The GraphQL type's documentation follows.
//
// Represents a count of the state of a check run.
type singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionCheckRunCountsByStateCheckRunStateCount struct {
	// The state of a check run.
	State CheckRunState `json:"state"`
	// The number of check runs with this state.
	Count int `json:"count"`
}

// GetState returns singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionCheckRunCountsByStateCheckRunStateCount.State, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionCheckRunCountsByStateCheckRunStateCount) GetState() CheckRunState {
	return v.State
}

// GetCount returns singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionCheckRunCountsByStateCheckRunStateCount.Count, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionCheckRunCountsByStateCheckRunStateCount) GetCount() int {
	return v.Count
}

// singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionStatusContextCountsByStateStatusContextStateCount includes the requested fields of the GraphQL type StatusContextStateCount.
// The GraphQL type's documentation follows.
//
// Represents a count of the state of a status context.
type singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionStatusContextCountsByStateStatusContextStateCount struct {
	// The state of a status context.
	State StatusState `json:"state"`
	// The number of statuses with this state.
	Count int `json:"count"`
}

// GetState returns singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionStatusContextCountsByStateStatusContextStateCount.State, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionStatusContextCountsByStateStatusContextStateCount) GetState() StatusState {
	return v.State
}

// GetCount returns singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionStatusContextCountsByStateStatusContextStateCount.Count, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommitStatusCheckRollupContextsStatusCheckRollupContextConnectionStatusContextCountsByStateStatusContextStateCount) GetCount() int {
	return v.Count
}

// singleStatusPullRequestRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type singleStatusPullRequestRepository struct {
	// The name of the repository.
	Name string `json:"name"`
	// The User owner of the repository.
	Owner singleStatusPullRequestRepositoryOwner `json:"-"`
}

// GetName returns singleStatusPullRequestRepository.Name, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestRepository) GetName() string { return v.Name }

// GetOwner returns singleStatusPullRequestRepository.Owner, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestRepository) GetOwner() singleStatusPullRequestRepositoryOwner {
	return v.Owner
}

func (v *singleStatusPullRequestRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*singleStatusPullRequestRepository
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.singleStatusPullRequestRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalsingleStatusPullRequestRepositoryOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal singleStatusPullRequestRepository.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalsingleStatusPullRequestRepository struct {
	Name string `json:"name"`

	Owner json.RawMessage `json:"owner"`
}

func (v *singleStatusPullRequestRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *singleStatusPullRequestRepository) __premarshalJSON() (*__premarshalsingleStatusPullRequestRepository, error) {
	var retval __premarshalsingleStatusPullRequestRepository

	retval.Name = v.Name
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalsingleStatusPullRequestRepositoryOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal singleStatusPullRequestRepository.Owner: %w", err)
		}
	}
	return &retval, nil
}

// singleStatusPullRequestRepositoryOwner includes the requested fields of the GraphQL interface RepositoryOwner.
//
// singleStatusPullRequestRepositoryOwner is implemented by the following types:
// singleStatusPullRequestRepositoryOwnerOrganization
// singleStatusPullRequestRepositoryOwnerUser
// The GraphQL type's documentation follows.
//
// Represents an owner of a Repository.
type singleStatusPullRequestRepositoryOwner interface {
	implementsGraphQLInterfacesingleStatusPullRequestRepositoryOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetLogin returns the interface-field "login" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The username used to login.
	GetLogin() string
}

func (v *singleStatusPullRequestRepositoryOwnerOrganization) implementsGraphQLInterfacesingleStatusPullRequestRepositoryOwner() {
}
func (v *singleStatusPullRequestRepositoryOwnerUser) implementsGraphQLInterfacesingleStatusPullRequestRepositoryOwner() {
}

func __unmarshalsingleStatusPullRequestRepositoryOwner(b []byte, v *singleStatusPullRequestRepositoryOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Organization":
		*v = new(singleStatusPullRequestRepositoryOwnerOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(singleStatusPullRequestRepositoryOwnerUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RepositoryOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for singleStatusPullRequestRepositoryOwner: "%v"`, tn.TypeName)
	}
}

func __marshalsingleStatusPullRequestRepositoryOwner(v *singleStatusPullRequestRepositoryOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *singleStatusPullRequestRepositoryOwnerOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusPullRequestRepositoryOwnerOrganization
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusPullRequestRepositoryOwnerUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusPullRequestRepositoryOwnerUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for singleStatusPullRequestRepositoryOwner: "%T"`, v)
	}
}

// singleStatusPullRequestRepositoryOwnerOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type singleStatusPullRequestRepositoryOwnerOrganization struct {
	Typename *string `json:"__typename"`
	// The username used to login.
	Login string `json:"login"`
}

// GetTypename returns singleStatusPullRequestRepositoryOwnerOrganization.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestRepositoryOwnerOrganization) GetTypename() *string { return v.Typename }

// GetLogin returns singleStatusPullRequestRepositoryOwnerOrganization.Login, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestRepositoryOwnerOrganization) GetLogin() string { return v.Login }

// singleStatusPullRequestRepositoryOwnerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type singleStatusPullRequestRepositoryOwnerUser struct {
	Typename *string `json:"__typename"`
	// The username used to login.
	Login string `json:"login"`
}

// GetTypename returns singleStatusPullRequestRepositoryOwnerUser.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestRepositoryOwnerUser) GetTypename() *string { return v.Typename }

// GetLogin returns singleStatusPullRequestRepositoryOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestRepositoryOwnerUser) GetLogin() string { return v.Login }

// singleStatusPullRequestReviewRequestsReviewRequestConnection includes the requested fields of the GraphQL type ReviewRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for ReviewRequest.
type singleStatusPullRequestReviewRequestsReviewRequestConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of nodes.
	Nodes []*singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest `json:"nodes"`
}

// GetTotalCount returns singleStatusPullRequestReviewRequestsReviewRequestConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewRequestsReviewRequestConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns singleStatusPullRequestReviewRequestsReviewRequestConnection.Nodes, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewRequestsReviewRequestConnection) GetNodes() []*singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest {
	return v.Nodes
}

// singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest includes the requested fields of the GraphQL type ReviewRequest.
// The GraphQL type's documentation follows.
//
// A request for a user to review a pull request.
type singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest struct {
	// The reviewer that is requested.
	RequestedReviewer *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer `json:"-"`
}

// GetRequestedReviewer returns singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest.RequestedReviewer, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest) GetRequestedReviewer() *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer {
	return v.RequestedReviewer
}

func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest
		RequestedReviewer json.RawMessage `json:"requestedReviewer"`
		graphql.NoUnmarshalJSON
	}
	firstPass.singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.RequestedReviewer
		src := firstPass.RequestedReviewer
		if len(src) != 0 && string(src) != "null" {
			*dst = new(singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer)
			err = __unmarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest.RequestedReviewer: %w", err)
			}
		}
	}
	return nil
}

type __premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest struct {
	RequestedReviewer json.RawMessage `json:"requestedReviewer"`
}

func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest) __premarshalJSON() (*__premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest, error) {
	var retval __premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest

	{

		dst := &retval.RequestedReviewer
		src := v.RequestedReviewer
		if src != nil {
			var err error
			*dst, err = __marshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest.RequestedReviewer: %w", err)
			}
		}
	}
	return &retval, nil
}

// singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer includes the requested fields of the GraphQL interface RequestedReviewer.
//
// singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer is implemented by the following types:
// singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin
// singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam
// singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser
// The GraphQL type's documentation follows.
//
// Types that can be requested reviewers.
type singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer interface {
	implementsGraphQLInterfacesingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin) implementsGraphQLInterfacesingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer() {
}
func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam) implementsGraphQLInterfacesingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer() {
}
func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser) implementsGraphQLInterfacesingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer() {
}

func __unmarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer(b []byte, v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Mannequin":
		*v = new(singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin)
		return json.Unmarshal(b, *v)
	case "Team":
		*v = new(singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RequestedReviewer.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer: "%v"`, tn.TypeName)
	}
}

func __marshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer(v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin:
		typename = "Mannequin"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin
		}{typename, premarshaled}
		return json.Marshal(result)
	case *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam:
		typename = "Team"

		result := struct {
			TypeName string `json:"__typename"`
			*singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam
		}{typename, v}
		return json.Marshal(result)
	case *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer: "%T"`, v)
	}
}

// singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin includes the requested fields of the GraphQL type Mannequin.
// The GraphQL type's documentation follows.
//
// A placeholder user for attribution of imported data on GitHub.
type singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin struct {
	Typename          *string `json:"__typename"`
	UserInfoMannequin `json:"-"`
}

// GetTypename returns singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin) GetTypename() *string {
	return v.Typename
}

// GetDisplayName returns singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin.DisplayName, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin) GetDisplayName() string {
	return v.UserInfoMannequin.DisplayName
}

func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin
		graphql.NoUnmarshalJSON
	}
	firstPass.singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInfoMannequin)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin struct {
	Typename *string `json:"__typename"`

	DisplayName string `json:"displayName"`
}

func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin) __premarshalJSON() (*__premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin, error) {
	var retval __premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin

	retval.Typename = v.Typename
	retval.DisplayName = v.UserInfoMannequin.DisplayName
	return &retval, nil
}

// singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users in an organization.
type singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam) GetTypename() *string {
	return v.Typename
}

// singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser struct {
	Typename     *string `json:"__typename"`
	UserInfoUser `json:"-"`
}

// GetTypename returns singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser.Typename, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser) GetTypename() *string {
	return v.Typename
}

// GetDisplayName returns singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser.DisplayName, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser) GetDisplayName() string {
	return v.UserInfoUser.DisplayName
}

func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser
		graphql.NoUnmarshalJSON
	}
	firstPass.singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInfoUser)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser struct {
	Typename *string `json:"__typename"`

	DisplayName string `json:"displayName"`
}

func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *singleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser) __premarshalJSON() (*__premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser, error) {
	var retval __premarshalsingleStatusPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser

	retval.Typename = v.Typename
	retval.DisplayName = v.UserInfoUser.DisplayName
	return &retval, nil
}

// singleStatusPullRequestReviewsPullRequestReviewConnection includes the requested fields of the GraphQL type PullRequestReviewConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequestReview.
type singleStatusPullRequestReviewsPullRequestReviewConnection struct {
	// A list of nodes.
	Nodes []*singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview `json:"nodes"`
}

// GetNodes returns singleStatusPullRequestReviewsPullRequestReviewConnection.Nodes, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewsPullRequestReviewConnection) GetNodes() []*singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview {
	return v.Nodes
}

// singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview includes the requested fields of the GraphQL type PullRequestReview.
// The GraphQL type's documentation follows.
//
// A review object for a given pull request.
type singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview struct {
	ReviewInfo `json:"-"`
}

// GetState returns singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.State, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetState() PullRequestReviewState {
	return v.ReviewInfo.State
}

// GetId returns singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.Id, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetId() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.Id
}

// GetAuthor returns singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.Author, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetAuthor() *CommonCommentInfoAuthorActor {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.Author
}

// GetRaw returns singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.Raw, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetRaw() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.Raw
}

// GetBodyText returns singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.BodyText, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetBodyText() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyText
}

// GetBodyHTML returns singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.BodyHTML, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetBodyHTML() string {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyHTML
}

// GetCreatedAt returns singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.CreatedAt, and is useful for accessing the field via an interface.
func (v *singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetCreatedAt() time.Time {
	return v.ReviewInfo.CommonCommentInfoPullRequestReview.CreatedAt
}

func (v *singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview
		graphql.NoUnmarshalJSON
	}
	firstPass.singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ReviewInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalsingleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview struct {
	State PullRequestReviewState `json:"state"`

	Id string `json:"id"`

	Author json.RawMessage `json:"author"`

	Raw string `json:"raw"`

	BodyText string `json:"bodyText"`

	BodyHTML string `json:"bodyHTML"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview) __premarshalJSON() (*__premarshalsingleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview, error) {
	var retval __premarshalsingleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview

	retval.State = v.ReviewInfo.State
	retval.Id = v.ReviewInfo.CommonCommentInfoPullRequestReview.Id
	{

		dst := &retval.Author
		src := v.ReviewInfo.CommonCommentInfoPullRequestReview.Author
		if src != nil {
			var err error
			*dst, err = __marshalCommonCommentInfoAuthorActor(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal singleStatusPullRequestReviewsPullRequestReviewConnectionNodesPullRequestReview.ReviewInfo.CommonCommentInfoPullRequestReview.Author: %w", err)
			}
		}
	}
	retval.Raw = v.ReviewInfo.CommonCommentInfoPullRequestReview.Raw
	retval.BodyText = v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyText
	retval.BodyHTML = v.ReviewInfo.CommonCommentInfoPullRequestReview.BodyHTML
	retval.CreatedAt = v.ReviewInfo.CommonCommentInfoPullRequestReview.CreatedAt
	return &retval, nil
}

// singleStatusResponse is returned by singleStatus on success.
type singleStatusResponse struct {
	// Lookup nodes by a list of IDs.
	Nodes []*singleStatusNodesNode `json:"-"`
}

// GetNodes returns singleStatusResponse.Nodes, and is useful for accessing the field via an interface.
func (v *singleStatusResponse) GetNodes() []*singleStatusNodesNode { return v.Nodes }

func (v *singleStatusResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*singleStatusResponse
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.singleStatusResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]*singleStatusNodesNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				*dst = new(singleStatusNodesNode)
				err = __unmarshalsingleStatusNodesNode(
					src, *dst)
				if err != nil {
					return fmt.Errorf(
						"Unable to unmarshal singleStatusResponse.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalsingleStatusResponse struct {
	Nodes []json.RawMessage `json:"nodes"`
}

func (v *singleStatusResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *singleStatusResponse) __premarshalJSON() (*__premarshalsingleStatusResponse, error) {
	var retval __premarshalsingleStatusResponse

	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalsingleStatusNodesNode(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"Unable to marshal singleStatusResponse.Nodes: %w", err)
				}
			}
		}
	}
	return &retval, nil
}

func GetChecksAndStatus(
	ctx context.Context,
	name string,
	owner string,
	number int,
) (*GetChecksAndStatusResponse, error) {
	req := &graphql.Request{
		OpName: "GetChecksAndStatus",
		Query: `
query GetChecksAndStatus ($name: String!, $owner: String!, $number: Int!) {
	repository(name: $name, owner: $owner) {
		pullRequest(number: $number) {
			statusCheckRollup: commits(last: 1) {
				nodes {
					commit {
						statusCheckRollup {
							contexts(first: 100) {
								nodes {
									__typename
									... StatusContextCase
									... CheckRunCase
								}
								pageInfo {
									hasNextPage
									endCursor
								}
							}
						}
					}
				}
			}
		}
	}
}
fragment StatusContextCase on StatusContext {
	context
	state
	targetUrl
}
fragment CheckRunCase on CheckRun {
	name
	status
	conclusion
	startedAt
	completedAt
	detailsUrl
}
`,
		Variables: &__GetChecksAndStatusInput{
			Name:   name,
			Owner:  owner,
			Number: number,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data GetChecksAndStatusResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func PullRequestsList(
	ctx context.Context,
	name string,
	owner string,
	number int,
) (*PullRequestsListResponse, error) {
	req := &graphql.Request{
		OpName: "PullRequestsList",
		Query: `
query PullRequestsList ($name: String!, $owner: String!, $number: Int!) {
	repository(name: $name, owner: $owner) {
		pullRequest(number: $number) {
			reviews(first: 100) {
				nodes {
					author {
						__typename
						login
					}
					body
					bodyHTML
					bodyText
					state
					submittedAt
				}
			}
		}
	}
}
`,
		Variables: &__PullRequestsListInput{
			Name:   name,
			Owner:  owner,
			Number: number,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data PullRequestsListResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func cancelReview(
	ctx context.Context,
	revId string,
) (*cancelReviewResponse, error) {
	req := &graphql.Request{
		OpName: "cancelReview",
		Query: `
mutation cancelReview ($revId: ID!) {
	deletePullRequestReview(input: {pullRequestReviewId:$revId}) {
		clientMutationId
	}
}
`,
		Variables: &__cancelReviewInput{
			RevId: revId,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data cancelReviewResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func closeReview(
	ctx context.Context,
	revId string,
) (*closeReviewResponse, error) {
	req := &graphql.Request{
		OpName: "closeReview",
		Query: `
mutation closeReview ($revId: ID!) {
	submitPullRequestReview(input: {pullRequestReviewId:$revId,event:COMMENT}) {
		clientMutationId
	}
}
`,
		Variables: &__closeReviewInput{
			RevId: revId,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data closeReviewResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func closeReviewWithEvent(
	ctx context.Context,
	revId string,
	event PullRequestReviewEvent,
	comment *string,
) (*closeReviewWithEventResponse, error) {
	req := &graphql.Request{
		OpName: "closeReviewWithEvent",
		Query: `
mutation closeReviewWithEvent ($revId: ID!, $event: PullRequestReviewEvent!, $comment: String) {
	submitPullRequestReview(input: {pullRequestReviewId:$revId,event:$event,body:$comment}) {
		clientMutationId
	}
}
`,
		Variables: &__closeReviewWithEventInput{
			RevId:   revId,
			Event:   event,
			Comment: comment,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data closeReviewWithEventResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createLabel(
	ctx context.Context,
	name string,
	description *string,
	color string,
	repoId string,
) (*createLabelResponse, error) {
	req := &graphql.Request{
		OpName: "createLabel",
		Query: `
mutation createLabel ($name: String!, $description: String, $color: String!, $repoId: ID!) {
	createLabel(input: {name:$name,color:$color,repositoryId:$repoId,description:$description}) {
		clientMutationId
		label {
			... LabelInfo
		}
	}
}
fragment LabelInfo on Label {
	id
	color
	description
}
`,
		Variables: &__createLabelInput{
			Name:        name,
			Description: description,
			Color:       color,
			RepoId:      repoId,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data createLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createPullRequest(
	ctx context.Context,
	repoId string,
	branchName string,
	baseBranch string,
	title string,
	description *string,
) (*createPullRequestResponse, error) {
	req := &graphql.Request{
		OpName: "createPullRequest",
		Query: `
mutation createPullRequest ($repoId: ID!, $branchName: String!, $baseBranch: String!, $title: String!, $description: String) {
	createPullRequest(input: {headRefName:$branchName,baseRefName:$baseBranch,title:$title,body:$description,repositoryId:$repoId}) {
		clientMutationId
		pullRequest {
			... singleStatusPullRequest
		}
	}
}
fragment singleStatusPullRequest on PullRequest {
	id
	number
	title
	state
	repository {
		name
		owner {
			__typename
			login
		}
	}
	author {
		__typename
		login
	}
	baseRefName
	headRefName
	reviews(first: 5) {
		nodes {
			... ReviewInfo
		}
	}
	reviewRequests(first: 10) {
		totalCount
		nodes {
			requestedReviewer {
				__typename
				... UserInfo
			}
		}
	}
	commits(last: 1) {
		nodes {
			commit {
				statusCheckRollup {
					contexts {
						checkRunCountsByState {
							state
							count
						}
						statusContextCountsByState {
							state
							count
						}
					}
				}
			}
		}
	}
}
fragment ReviewInfo on PullRequestReview {
	... CommonCommentInfo
	state
}
fragment UserInfo on Actor {
	displayName: login
}
fragment CommonCommentInfo on Comment {
	id
	author {
		__typename
		... UserInfo
	}
	raw: body
	bodyText
	bodyHTML
	createdAt
}
`,
		Variables: &__createPullRequestInput{
			RepoId:      repoId,
			BranchName:  branchName,
			BaseBranch:  baseBranch,
			Title:       title,
			Description: description,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data createPullRequestResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func currentPendingReview(
	ctx context.Context,
	prId string,
	author *string,
) (*currentPendingReviewResponse, error) {
	req := &graphql.Request{
		OpName: "currentPendingReview",
		Query: `
query currentPendingReview ($prId: ID!, $author: String) {
	node(id: $prId) {
		__typename
		... on PullRequest {
			reviews(author: $author, states: [PENDING], last: 1) {
				nodes {
					... ReviewInfo
				}
			}
		}
	}
}
fragment ReviewInfo on PullRequestReview {
	... CommonCommentInfo
	state
}
fragment CommonCommentInfo on Comment {
	id
	author {
		__typename
		... UserInfo
	}
	raw: body
	bodyText
	bodyHTML
	createdAt
}
fragment UserInfo on Actor {
	displayName: login
}
`,
		Variables: &__currentPendingReviewInput{
			PrId:   prId,
			Author: author,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data currentPendingReviewResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func editPullRequest(
	ctx context.Context,
	id string,
	labels []string,
) (*editPullRequestResponse, error) {
	req := &graphql.Request{
		OpName: "editPullRequest",
		Query: `
mutation editPullRequest ($id: ID!, $labels: [ID!]) {
	updatePullRequest(input: {pullRequestId:$id,labelIds:$labels}) {
		clientMutationId
		pullRequest {
			... singleStatusPullRequest
		}
	}
}
fragment singleStatusPullRequest on PullRequest {
	id
	number
	title
	state
	repository {
		name
		owner {
			__typename
			login
		}
	}
	author {
		__typename
		login
	}
	baseRefName
	headRefName
	reviews(first: 5) {
		nodes {
			... ReviewInfo
		}
	}
	reviewRequests(first: 10) {
		totalCount
		nodes {
			requestedReviewer {
				__typename
				... UserInfo
			}
		}
	}
	commits(last: 1) {
		nodes {
			commit {
				statusCheckRollup {
					contexts {
						checkRunCountsByState {
							state
							count
						}
						statusContextCountsByState {
							state
							count
						}
					}
				}
			}
		}
	}
}
fragment ReviewInfo on PullRequestReview {
	... CommonCommentInfo
	state
}
fragment UserInfo on Actor {
	displayName: login
}
fragment CommonCommentInfo on Comment {
	id
	author {
		__typename
		... UserInfo
	}
	raw: body
	bodyText
	bodyHTML
	createdAt
}
`,
		Variables: &__editPullRequestInput{
			Id:     id,
			Labels: labels,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data editPullRequestResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func editPullRequestReviewers(
	ctx context.Context,
	id string,
	reviewers []string,
) (*editPullRequestReviewersResponse, error) {
	req := &graphql.Request{
		OpName: "editPullRequestReviewers",
		Query: `
mutation editPullRequestReviewers ($id: ID!, $reviewers: [ID!]) {
	requestReviews(input: {pullRequestId:$id,userIds:$reviewers}) {
		clientMutationId
		pullRequest {
			... singleStatusPullRequest
		}
	}
}
fragment singleStatusPullRequest on PullRequest {
	id
	number
	title
	state
	repository {
		name
		owner {
			__typename
			login
		}
	}
	author {
		__typename
		login
	}
	baseRefName
	headRefName
	reviews(first: 5) {
		nodes {
			... ReviewInfo
		}
	}
	reviewRequests(first: 10) {
		totalCount
		nodes {
			requestedReviewer {
				__typename
				... UserInfo
			}
		}
	}
	commits(last: 1) {
		nodes {
			commit {
				statusCheckRollup {
					contexts {
						checkRunCountsByState {
							state
							count
						}
						statusContextCountsByState {
							state
							count
						}
					}
				}
			}
		}
	}
}
fragment ReviewInfo on PullRequestReview {
	... CommonCommentInfo
	state
}
fragment UserInfo on Actor {
	displayName: login
}
fragment CommonCommentInfo on Comment {
	id
	author {
		__typename
		... UserInfo
	}
	raw: body
	bodyText
	bodyHTML
	createdAt
}
`,
		Variables: &__editPullRequestReviewersInput{
			Id:        id,
			Reviewers: reviewers,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data editPullRequestReviewersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getLabelByName(
	ctx context.Context,
	label string,
	owner string,
	repo string,
) (*getLabelByNameResponse, error) {
	req := &graphql.Request{
		OpName: "getLabelByName",
		Query: `
query getLabelByName ($label: String!, $owner: String!, $repo: String!) {
	repository(owner: $owner, name: $repo) {
		label(name: $label) {
			... LabelInfo
		}
	}
}
fragment LabelInfo on Label {
	id
	color
	description
}
`,
		Variables: &__getLabelByNameInput{
			Label: label,
			Owner: owner,
			Repo:  repo,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data getLabelByNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getUserIdByLogin(
	ctx context.Context,
	login string,
) (*getUserIdByLoginResponse, error) {
	req := &graphql.Request{
		OpName: "getUserIdByLogin",
		Query: `
query getUserIdByLogin ($login: String!) {
	user(login: $login) {
		id
	}
}
`,
		Variables: &__getUserIdByLoginInput{
			Login: login,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data getUserIdByLoginResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func mergePullRequest(
	ctx context.Context,
	prId string,
) (*mergePullRequestResponse, error) {
	req := &graphql.Request{
		OpName: "mergePullRequest",
		Query: `
mutation mergePullRequest ($prId: ID!) {
	mergePullRequest(input: {pullRequestId:$prId,mergeMethod:SQUASH}) {
		clientMutationId
	}
}
`,
		Variables: &__mergePullRequestInput{
			PrId: prId,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data mergePullRequestResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func myLogin(
	ctx context.Context,
) (*myLoginResponse, error) {
	req := &graphql.Request{
		OpName: "myLogin",
		Query: `
query myLogin {
	viewer {
		login
	}
}
`,
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data myLoginResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func newReview(
	ctx context.Context,
	prId string,
) (*newReviewResponse, error) {
	req := &graphql.Request{
		OpName: "newReview",
		Query: `
mutation newReview ($prId: ID!) {
	addPullRequestReview(input: {pullRequestId:$prId}) {
		pullRequestReview {
			... ReviewInfo
		}
	}
}
fragment ReviewInfo on PullRequestReview {
	... CommonCommentInfo
	state
}
fragment CommonCommentInfo on Comment {
	id
	author {
		__typename
		... UserInfo
	}
	raw: body
	bodyText
	bodyHTML
	createdAt
}
fragment UserInfo on Actor {
	displayName: login
}
`,
		Variables: &__newReviewInput{
			PrId: prId,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data newReviewResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func pullRequestComments(
	ctx context.Context,
	number int,
	owner string,
	name string,
	commentAfter *string,
) (*pullRequestCommentsResponse, error) {
	req := &graphql.Request{
		OpName: "pullRequestComments",
		Query: `
query pullRequestComments ($number: Int!, $owner: String!, $name: String!, $commentAfter: String) {
	repository(owner: $owner, name: $name) {
		pullRequest(number: $number) {
			comments(first: 100, after: $commentAfter) {
				pageInfo {
					... NextPageInfo
				}
				totalCount
				nodes {
					... CommentInfo
				}
			}
		}
	}
}
fragment NextPageInfo on PageInfo {
	hasNextPage
	endCursor
}
fragment CommentInfo on Comment {
	... CommonCommentInfo
	... ReactionsInfo
}
fragment CommonCommentInfo on Comment {
	id
	author {
		__typename
		... UserInfo
	}
	raw: body
	bodyText
	bodyHTML
	createdAt
}
fragment ReactionsInfo on Reactable {
	reactions(first: 20) {
		totalCount
		nodes {
			content
			createdAt
			user {
				... UserInfo
			}
		}
	}
}
fragment UserInfo on Actor {
	displayName: login
}
`,
		Variables: &__pullRequestCommentsInput{
			Number:       number,
			Owner:        owner,
			Name:         name,
			CommentAfter: commentAfter,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data pullRequestCommentsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func pullRequestThreads(
	ctx context.Context,
	number int,
	owner string,
	name string,
	commentAfter *string,
) (*pullRequestThreadsResponse, error) {
	req := &graphql.Request{
		OpName: "pullRequestThreads",
		Query: `
query pullRequestThreads ($number: Int!, $owner: String!, $name: String!, $commentAfter: String) {
	repository(owner: $owner, name: $name) {
		pullRequest(number: $number) {
			reviewThreads(first: 5, after: $commentAfter) {
				pageInfo {
					endCursor
					hasNextPage
				}
				totalCount
				nodes {
					line
					originalLine
					path
					diffSide
					startLine
					startDiffSide
					originalStartLine
					isOutdated
					comments(first: 100) {
						pageInfo {
							endCursor
							hasNextPage
						}
						totalCount
						nodes {
							replyTo {
								id
							}
							... CommentInfo
						}
					}
				}
			}
		}
	}
}
fragment CommentInfo on Comment {
	... CommonCommentInfo
	... ReactionsInfo
}
fragment CommonCommentInfo on Comment {
	id
	author {
		__typename
		... UserInfo
	}
	raw: body
	bodyText
	bodyHTML
	createdAt
}
fragment ReactionsInfo on Reactable {
	reactions(first: 20) {
		totalCount
		nodes {
			content
			createdAt
			user {
				... UserInfo
			}
		}
	}
}
fragment UserInfo on Actor {
	displayName: login
}
`,
		Variables: &__pullRequestThreadsInput{
			Number:       number,
			Owner:        owner,
			Name:         name,
			CommentAfter: commentAfter,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data pullRequestThreadsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func replyTo(
	ctx context.Context,
	revId string,
	commentId string,
	body string,
) (*replyToResponse, error) {
	req := &graphql.Request{
		OpName: "replyTo",
		Query: `
mutation replyTo ($revId: ID!, $commentId: ID!, $body: String!) {
	addPullRequestReviewComment(input: {pullRequestReviewId:$revId,inReplyTo:$commentId,body:$body}) {
		comment {
			id
		}
	}
}
`,
		Variables: &__replyToInput{
			RevId:     revId,
			CommentId: commentId,
			Body:      body,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data replyToResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func repositoryId(
	ctx context.Context,
	owner string,
	name string,
) (*repositoryIdResponse, error) {
	req := &graphql.Request{
		OpName: "repositoryId",
		Query: `
query repositoryId ($owner: String!, $name: String!) {
	repository(owner: $owner, name: $name) {
		id
	}
}
`,
		Variables: &__repositoryIdInput{
			Owner: owner,
			Name:  name,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data repositoryIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func requestedReviews(
	ctx context.Context,
	prQuery string,
	after *string,
) (*requestedReviewsResponse, error) {
	req := &graphql.Request{
		OpName: "requestedReviews",
		Query: `
query requestedReviews ($prQuery: String!, $after: String) {
	search(query: $prQuery, type: ISSUE, first: 5, after: $after) {
		issueCount
		pageInfo {
			endCursor
			hasNextPage
		}
		edges {
			node {
				__typename
				... on Node {
					id
				}
			}
		}
	}
}
`,
		Variables: &__requestedReviewsInput{
			PrQuery: prQuery,
			After:   after,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data requestedReviewsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func searchLabels(
	ctx context.Context,
	query string,
	owner string,
	repo string,
	cursor *string,
) (*searchLabelsResponse, error) {
	req := &graphql.Request{
		OpName: "searchLabels",
		Query: `
query searchLabels ($query: String!, $owner: String!, $repo: String!, $cursor: String) {
	repository(owner: $owner, name: $repo) {
		labels(query: $query, first: 10, after: $cursor) {
			totalCount
			nodes {
				... LabelInfo
			}
			pageInfo {
				... NextPageInfo
			}
		}
	}
}
fragment LabelInfo on Label {
	id
	color
	description
}
fragment NextPageInfo on PageInfo {
	hasNextPage
	endCursor
}
`,
		Variables: &__searchLabelsInput{
			Query:  query,
			Owner:  owner,
			Repo:   repo,
			Cursor: cursor,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data searchLabelsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func singleStatus(
	ctx context.Context,
	ids []string,
) (*singleStatusResponse, error) {
	req := &graphql.Request{
		OpName: "singleStatus",
		Query: `
query singleStatus ($ids: [ID!]!) {
	nodes(ids: $ids) {
		__typename
		... singleStatusPullRequest
	}
}
fragment singleStatusPullRequest on PullRequest {
	id
	number
	title
	state
	repository {
		name
		owner {
			__typename
			login
		}
	}
	author {
		__typename
		login
	}
	baseRefName
	headRefName
	reviews(first: 5) {
		nodes {
			... ReviewInfo
		}
	}
	reviewRequests(first: 10) {
		totalCount
		nodes {
			requestedReviewer {
				__typename
				... UserInfo
			}
		}
	}
	commits(last: 1) {
		nodes {
			commit {
				statusCheckRollup {
					contexts {
						checkRunCountsByState {
							state
							count
						}
						statusContextCountsByState {
							state
							count
						}
					}
				}
			}
		}
	}
}
fragment ReviewInfo on PullRequestReview {
	... CommonCommentInfo
	state
}
fragment UserInfo on Actor {
	displayName: login
}
fragment CommonCommentInfo on Comment {
	id
	author {
		__typename
		... UserInfo
	}
	raw: body
	bodyText
	bodyHTML
	createdAt
}
`,
		Variables: &__singleStatusInput{
			Ids: ids,
		},
	}
	var err error
	var client graphql.Client

	client, err = gh_utils.GetGraphQLClient(ctx)
	if err != nil {
		return nil, err
	}

	var data singleStatusResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
